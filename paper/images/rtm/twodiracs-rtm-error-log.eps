%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: MacOS Roman
%%Title: twodiracs-rtm-error-log.eps
%%Creator: Adobe Illustrator(R) 13.0
%%For: Gabriel Peyré
%%CreationDate: 2/21/11
%%BoundingBox: 0 0 550 456
%%HiResBoundingBox: 0 0 549.9072 455.1504
%%CropBox: 0 0 549.9072 455.1504
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 13.0.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 13.0.0 x406 R agm 4.4378 ct 5.1039%ADO_ContainsXMP: MainFirst%AI7_Thumbnail: 128 108 8%%BeginData: 7100 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF%0066000066330066660066990066CC0066FF009900009933009966009999%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333%3333663333993333CC3333FF3366003366333366663366993366CC3366FF%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033%6600666600996600CC6600FF6633006633336633666633996633CC6633FF%6666006666336666666666996666CC6666FF669900669933669966669999%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF%9933009933339933669933999933CC9933FF996600996633996666996699%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100%000011111111220000002200000022222222440000004400000044444444%550000005500000055555555770000007700000077777777880000008800%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF%524C45FD90FFA852527DFD7CFF527DFF27FD7CFF27FFFF527DFD7BFF27FF%FF52A8A8CACAFD78FF27A8FF52A8A89BC3BCC3C3FFFFFF7DFD71FFA8527D%52FFAFFFFFFFCAC3BCC39A76FD08FFA8FD69FFA8A8FFFFFFA8FD05FFCACA%BDBCBDCAFD04FFA8FD6EFFA8FD08FF84FFCABDC3C3FFFFA884FD76FF7DFF%FFFFCAC3BCC34B7DFD6DFFA8FD08FFA8FD06FFCA9493FD6DFFA8A8FD07FF%52FD07FF7DA1BCCAFD6BFFA8FD08FFA8FD07FFA884FFBCCAFD04FFA8FD66%FFA8FD07FFA8FD07FF7DA8FFFFBCC3FFFFA87DA8FD64FFA8FD15FFC3BCCA%FF52FD65FFA8A8FD15FFCABCC37DA8FD64FFA8FD18FFC36FFD7EFFAF93CA%FD64FFA8FD19FF76C3FD64FFA8A8FD17FFAFA8BCFD64FFA8FD19FFA8C3C3%FD64FFA8FD18FFA8A8BDFD60FF7DFFFFA8FD19FF7DFFC3CAFD5DFFA852F8%FFFFFFA8FD1AFFCABCFD5EFFA852FFFFA8FD1CFFC3CAFD4EFF7D52527D7D%FD05FFA8A8A8FFFFFF27FFFFFFA8FD1BFFC3C3FD4CFFA852FD05A852A8FF%FFFD057DFFA852FFFFA8FD1DFFBCFD4CFF7DFD07FF7DFD09FF27FFFFA8A8%FD1CFFC3C3FD4EFF7DFD0EFFA8FFFFA8FD1DFFCAC3FD4DFFA852A8A87DFD%0FFFA8FD1DFFBCCAFD4CFFA827525252FD0EFFA8FD1EFFCAC3FD4CFFA8A8%FFFFA8FD0FFFA8FD1EFFBDCBA87DFD49FFA87DFD11FFA8FD1FFFC3CAAFFD%4AFFA827525252FD2FFFBCFFA8FD4AFF52A87DA8FD0EFFA8FD20FFC37684%FD47FFA87D7DFFA87D7DFD0EFFA8A8FD1FFFC4BCA8FD47FF7D52FFFFFFA8%52FD0EFFA8FD21FFBCA8FD47FF7DFFA8527DFF7DFD0FFFA8FD20FFA193FD%47FFA8A8FF7DFFFF7DFD0EFFA8FD21FFA8BCC3FD46FF52F82727F82727FD%0FFFA8FD20FF7D52C3BDFD45FFA87DFD04A87DFD0EFFA8FD21FF7D7DFFC3%C3FD44FFA8FD07FFA8FD2FFFA8FFFFC3BCFFFFFF7DFD3FFF7D7DFD05FF7D%7DFD08FF52527DFFA8FD26FFC3BDFD43FFA8FD0552A8FD08FF277DFF27A8%FFA8FD26FFC3BCFFA8FD4FFFA8FFFF27A8FD29FFC3C37DA8FD43FFA85252%A8FFFFA87DA87DA8FFA8277DFFFFA8FD28FFC369FD44FF7DA8A87DFFFFA8%7D7D7DA8A827A8FFFFA8FD2AFF9AB6CAFD41FF7D52A8A852FD07FF277DA8%A8A8FFA8FD29FF52A8BCBDCAFFFFFFA8A8FD3BFF7D7D52FD08FFA87D7D7D%FD2CFFA8FFFFC3BDC3FD42FFA8FD3CFFC3BCCAAFFD3BFFA8527D7D52A8FD%0BFFA8FD31FFBCBC7DFD3AFFA87DFFFFA8FD0CFFA8A8FD31FFA193C3FD06%FFA8A8FD30FFA8FFFFFF7DFD0DFFA8FD33FF52C4BCFD05FF7DFD30FFA852%52FF527D7DFD0DFFA8FD31FFA87DFFCABCC3CAFFFFA8A8FD2FFFA8FD047D%FFA8FD0CFFA8FD37FFC3BCC3FFA8FD30FFA8525252277D7DFD45FFCABDBC%7683FD07FFA8FD28FF7D7DA8A852FD0DFFA8FD3AFFCA93C3FD30FF7D2752%A8FD0FFFA8FD3AFF7D76BDBDFD2DFFA852FF7D52FD0EFFA8FD3BFF7DAFFF%CABCC3CAFD2AFF7D7DFFFF52FD0EFFA8A8FD3AFFA8A8FFFFFFC3BCBDCA52%FD28FF525227A8FD0EFFA8FD42FFCABC93CAFD28FF7DA8A8FD0FFFA8FD43%FF45BCC3FD23FFA827FD0552FD0EFFA8FD43FFAF2ECAC3BCCAFFFFFFA87D%FD1CFF7DFD05A87DFD09FF7D52527DFFFFA8FD43FF7DFFFFCABCBDCAFF7D%7DFD2CFF52A8FF27FD4BFFC4BDC3A87DFD2CFFA8FF5252FD4DFFC4939AFD%27FFA87D7DA8A8FFA87D27FFA8FD4CFF7D69C3FD26FFA87D7D7DA852FFFF%277DFFA8FD4BFF527DC3BCCAFD29FF52527D52FFA8FD4DFFA8FFCABDC3FF%FFFF52FD25FFA87DFFFFA8A8FD50FFC3BCFFFF7DA8FD28FFA8FD52FFCABC%CA59FD2AFFA8FD53FFBC93A8FD07FFA8FD20FFA8FD55FF76BCC3FD7DFF84%A8C3BCCAFD04FFA8FD20FFA8FD55FF52FFFFFFBCC3FFFFA8A8FD20FFA8A8%FD59FFC3BCC3A87DFD20FFA8FD5CFFC393A1FD20FFA8A8FD5CFFA16FC3C3%FD1EFFA8FD5DFF7D7DCAC3BCCAFD1DFFA8FD5DFFA8FFFFCABCBDC3FF59A8%FD17FFA8FD63FFCAC3BC76A8FD7DFFCA6FFD18FFA8FD66FFA8A8FD17FFA8%A8FD65FF7DA8FD14FF7D7DFFA8FD7BFFA8F87DFFFFA8FD7AFF527D7DFFA8%FD75FFA8527D7DA852A87D52FFFFA8FFA8FFFFFFA8FFFFFFA8FFA8FFA8FF%FFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFF%A8FFFFFFA8FFFFFFA8FFA8A8A8FFFFFFA8FFFFFFA8FFFFFFA8FFA8FFA8FF%FFFFA8FFFFFFA8FFFFFFA8FFA8FFA8FFFFFFA8FFFFFFA8FFFFFFA8FD0EFF%FD05A87D7D5227FFFFFFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF%A8FD05FFA8FFFFFFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF%A8FFFFFFA8FFFFFFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF%A8FFFFFFA8FFFFFFA8FFA8FFA8FFA8FFA8FFA8FD16FF7D7DFF7D7DFD16FF%A87DA8FFFF7D7DA8FD18FFA8FFFFA87DA8FD17FFA87D7DFFFFA87DFD23FF%527D7D7DFD14FFA827A827A87D527D52FD17FFA8F8FFA8527D52A8FD15FF%A852A852A8A8527D52FD22FF27FFA827A8FD13FF7DA8FF7D5252A8FF27A8%FD16FF5227A87D52FF5252FD15FF7D52A87DFF27A8FF277DFD20FFA852FF%FF27FD16FFA827A827FFFF527DFD15FF7DA852FF527DFFA852FD15FF5252%A8527D52FFFF27A8FD20FFA827FFA827A8FD14FF7D27A8FF27A8FF27A8FD%14FF7D277D277D7D52FF7D52FD15FF527DFF7D5227FFFF527DFD21FF52A8%A852FD14FF7D27FFFFFF527DA852FD16FF7DA827A87D52FF527DFD15FF7D%52FF527D527DFF27FD22FF7D5252FD15FFFD04527DFF52527DFD18FF7DA8%FF52527DFD17FF525252FFA85252A8FDFCFFFD3DFFA8A8FFFFA8FD63FF7D%27A8FF5252FFFFFF52FFA8277DFF7D527DFD05FFFD057D27A8FD09FF527D%A8FFA852A8FD15FF7DA8FD1AFFA8FD20FF5252FFA87DFFFFFF7D7DFFFF27%27FFFF7DFD06FF7D7DFFA87D7DFD09FF7D7DFD04FF52FD0CFFA8A8FD09FF%A8FD1AFFA8A8FD1FFF527D7D7DFD04FF7DA8FFA8A827A8A8A8FD06FF7D7D%7DA852FD06FFA8527DFF5227FD04FF52A87D7DFF7D7DA87D527DA8FF2752%A8FFFFFFA87D7DFF7DA8FFA87DA87DFF7D7DA87D7D7DA8A852FFA8A8A87D%7DFFA87D7DA82752A8FF527DA8A8527DA8A87D7DFD13FF277D27A8FD04FF%52FFFFA8A87D52A8A8FD07FF7DA87DA87DA8FFFFFFA827FF527D7D52FD04%FF52A852FF52A8527D5252FF52A87D52FD04FF527D7D52A852FF52A827FF%27A8527D5252A852FF27A87D7D52A8527D52A87DA8527DFF527DA852A827%7DA852A87DFD12FFA827A87D52FFFFFF7D7DFFFF7DFFA82752FD09FFFD05%7DFFFFFF5252FF7D27A852FD04FF52F8A8FF277D7DA87D7DFF527D527DFD%04FF277D7DA8A852A8527D52A8277D7DA87D7DFF27FF52527DA8F8A87D7D%27FFFFFF52A8A827A8FF27A852FFFF7D277DFD12FF7D27FFA827A8FFFF7D%A8FFA87DFFFF5252FFFFA8A8FD05FF52FF7D7DA8A8FFFFA827FF527D7D52%FD04FF52A827A827A8FFFF7D7DFF52A87D52A8FFFFFF527DFFA8A852FF52%7DA8FF27A8FFFF7D7DA852FFFFF8A8FF27A8FF7D52FFFFA8527DA852A8A8%52A852A8FF7DFF27FD12FF5252FFA8277DFFFF52FFFF7D52FFFFA8A8FFFF%A852FD04FF7D7DFF7D7D7DFD04FF7D527DA87D52FFFFFFA8527D7D52A852%7DA87D277D7DFFA852A8FFFFFFA85252A87D527D525252A8A8527DA87D52%A827A8FF7DA8FF7D527DFF7D7D7DFF7D52A8FF52527DFF27A8A87D7D7DFD%19FF7DA8FD0AFFA8A8FD04FFA8FFFFFFA8FD17FF5252FD0FFF7D52FF7D7D%FD3CFF7DA8FD0AFFA8A8FD1FFFA87D7DFD10FF7D7D7DA8FD22FFFF%%EndData
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
                        
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 73 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		clonedict
		begin
			/Intent Intent def
			currentdict
		end
		setcolorrendering
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: (Page 1) 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="Ôªø" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.1-c036 46.277092, Fri Feb 23 2007 14:16:18        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xap="http://ns.adobe.com/xap/1.0/"
            xmlns:xapGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xap:CreatorTool>Adobe Illustrator CS3</xap:CreatorTool>
         <xap:CreateDate>2011-02-21T23:05:15+01:00</xap:CreateDate>
         <xap:ModifyDate>2011-02-21T23:05:15+01:00</xap:ModifyDate>
         <xap:MetadataDate>2011-02-21T23:05:15+01:00</xap:MetadataDate>
         <xap:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xapGImg:width>256</xapGImg:width>
                  <xapGImg:height>212</xapGImg:height>
                  <xapGImg:format>JPEG</xapGImg:format>
                  <xapGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgA1AEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q7FXYq7FXis3nrzxd&#xA;eQNW/NCx1Ux6fY3VzJYeXPQt2tZtOsrlrd/VlMZuhNKsbOGWUKDT4aYq9ksruK8s4LuGphuI0ljr&#xA;seLqGFfoOKq2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV&#xA;2KuxV2KuxV4q3kXzxbeQNT/K210vnp15dXENl5lE9uLaLTL26a4k9WIyC6NxGkjIFWIqTT4qYq9G&#xA;k8sh9X5WeqX+n/VLC2treK2mBgVVeb4vq8qywM5FAXKVoAMjKN9acjT5xj5wjMf0r++JB+1eLfz1&#xA;Zf3V3Y6vGOiXMb2Ux+c0Prxn/kSMrrIOoP2OZx6LJzjPEf6JEx/pZcJ/2ZSq+82eZLPzHph1HSLm&#xA;w0IW92NUuEQXsXq1hNswe25yIopJyLxr1HvR8WvqBH2pHZscn9zkhM/zT6Jf7Kon3CRZbp+qabqV&#xA;uLnT7qK7tzsJYHWRa+FVJ3yyMgdwXAz6fJilw5ImMu4im7y5eBrcIIz60wib1JPTIBUmqfC3Nvh+&#xA;zt89sk0ojFXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FU&#xA;LH/x1bj/AIwQf8TmxVFYqx7VBZnzxoHqJeG7FpqJgeGQLaKlbYSfWUqC7H4fT2NPi+eKonUfKWhX&#xA;1wbswG01A/8ASws3a2uP9lJEVLjf7L1HtlcsUTv1c/B2lmxx4L4ofzZDij8jy94osI/MHTvPdlJ5&#xA;YexvbnWbS2121nmhhiWK8aGOOYvHNJE0MLxMu3xIvxca1yNTj/SH2t8ZaTOaIOCZ6i5Q+IPqHvBl&#xA;7noOj63p2sWf1qxl5oGKSxsCksUi/ajljajI691YVyyExIWHC1WkyYJ8Mx7u4jvB5EeYR2ScZ2Ku&#xA;xV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KoJJVGszRkNya3hIIV&#xA;iuzzdWA4j6TiqNxVRe1ie7iuiXEkKOiKHYIRIVLckB4sfgFCRtvTriqtiqV655c07Wn0x7znXSb2&#xA;PUbX024/v4kdF57Gq0lO2KofWPLX1i7/AErpU/6N1xVC/WlXlHOi9IrqKoEqeBqGX9lhlU8dmxtL&#xA;8c3Y6XX8MfCyjxMPd1j5wP8ACfsPUFjHnbzhfx+T9Xspll0bzRDAHiihnhh9VRIgaWzup+MTpQ71&#xA;o69CoNKsMlmjtL8cl1Wg4Y+LiPiYe/rHymP4T9h6EvQ8tdc7FXYq7FXYq7FXYq7FXYq7FXYq7FXY&#xA;q7FXYq7FXYq7FXYq7FXYq7FXYq7FXYqhY/8Ajq3H/GCD/ic2KorFXYq7FXYq7FWJfmrotlrHkbUr&#xA;W5ktregR4by8k9CKF1kWjmYJIU/lqF3rTvkMkBIU5mh1ktPlExy/iHSUesT5FOvLOrPq2iW15Mgi&#xA;u6NFewj/AHXcwsY5033+GRGA9scc+KNrr9MMOaUAbjzie+J3ifkQmeTcN2KuxV2KuxV2KuxV2Kux&#xA;V2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxVhtz+ZdnH+YWl+S4tNvTNqCXbyajPBPa2ym0QOVge&#xA;aNVua1FTG3EAjc1pirKI/wDjq3H/ABgg/wCJzYqisVdirsVdirsVQOt2moXmlXNtp10LK9lWkN0y&#xA;s4Q1BrxV4ydv8rFUqs/9xXnG6sjtZ65H9dtRvQXcAWO5Qdvjj9NwPEOcpHpnX87f4u2y/vtJGf8A&#xA;FhPCf6st4n4HiHxiGR5c6l2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxVhd1Z/mHrN&#xA;bmXWU8n2BakFpbQW93elSwVDPcXHrWys3++44mpWnqNirUXlX8xdPpNY+dH1R03NnrFjaNC4/l9S&#xA;yS0ljJ/mq9P5T0xVkkE2t3miep6Mek6xIjL6dwPrkMUqkrUiKSAyxmnJfiQlaV4moCqUwaf+Zizx&#xA;tca/oskAZTLHHo12jslfiCudUcKSOhKmngcVSLzl/wCTl/Ln/mH17/qHt8VZuiMdZmcSMFW3hrGO&#xA;PFqvN1qOW3scVRuKuxV2KuxV2KuxVI/ONndS6SL6xQyalpMq39nGv2naEESRD/jNCzx/7LKswNWO&#xA;Y3dl2XliMvBM1jyjgl5Xyl/myqXwTayvLa+s4L21cS21zGs0Eg6MjqGUj5g5YDYsODlxSxzMJCpR&#xA;NH3hWwtbsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVYP+cNpNd+UYoYbyxsJTqNgY7zU&#xA;1ElvG4uU4N6TMiyNypxVqg+HcKtaRo/5rReZNNuNd1qwv9Hi9f6xBYWslm3JoiI2k5zzCRQ37NNj&#xA;virOcVdirsVQsf8Ax1bj/jBB/wATmxVFYq7FXYq7FXYq7FXYqxny5MmkTatoUm0WmMb2xBIFbK5L&#xA;SKoLECkUqyR9dlC165Ti2Jj3cvc7btH97CGo/njhl/XhQP8Apo8MveSn9hdreWNvdopRLiJJVQlW&#xA;IDqGALIXQ9eqsR4HLnUq+KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KsB80zad59guPLO&#xA;h6reWF9puoRfXNUtbWZVt5bOUPJHHdSxeh6u1PgYkd9uqqTeX9PvbH8wdJs9Y8y63fXkS3bWdjq9&#xA;rbrBMqRcHlguLOIRllDg0eStD9muKvV8VdirsVQSSqNZmjIbk1vCQQrFdnm6sBxH0nFUbirsVdir&#xA;sVdirsVdirFfPP1rTha+Y7Jlinsg9pcyOpZBb3nFObqvxMsM6xSH/JDeOU5fSRLu5+4u27O/ewnp&#xA;/wCeOKP9eFn/AGUeKPvIT3Q5L2TRdPkv3WW+e2ha6kSN4VaUxguyxyBXQFq/CwqOhy51KNxV2Kux&#xA;V2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV4Br/AJx11tG8w+W9O8o+Z5Z4tW1U2ev6GZYInke+&#xA;mfmJYJIXbhzKFTyFV+5Vknlnzreaz5v8taXJ5S13QbezF5JHe64HYufq7D0xNJJNI7HlX4m6DFXr&#xA;eKuxV2KoWP8A46tx/wAYIP8Aic2KorFXYq7FXYq7FXYq7FUp83rZt5T1pb71BZGwuRcmGnqiL0W5&#xA;8Khhy49NuuCQBFFsw5ZY5icTUokEe8MY/LjX5bXy55dsdRXhp+oWFq/l6/IoHieBXjtbjstwibA9&#xA;JKVG9RlMZGJ4ZfA/jq7TU4Meoic2AURvOH83+lHvh9seu1FnuXundirsVdirsVdirsVdirsVdirs&#xA;VdirsVdirsVdirsVYXLqXn3y8WgfQ/8AE+nBmeK+06W2tr2jMWPr2s5t4GfepeKT4z+wuKrP8Wed&#xA;tTlSPTPJFzZyA0W+125s7eKIkULBLSW+mfbsqivTkOuKss0q31C30+GLUbsX16ATPdLGsKszMWok&#xA;ak8UWvFQSTQCrMakqovFXlmt+f8A8xNP8t6z50ews7DQdIuJgmh39tcR6jc2ltL6TT/WTMkcTS0L&#xA;xIbdgRT4jWuKvQ7C5jurprmMMI57S2kQOOLAOZWFR2O+KphirsVdirsVdirsVdiq2SNJI2jcVRwV&#xA;YdKgih6YqhLrRtMutKOk3ECyaeY1i9A12VAONDXkCtAVYGoO/XIyiJCi3YM88UxOBqQSbTr++0G6&#xA;h0bW7hrmznYR6TrUv2nbtbXTdBN/I/ST/W61RkYHhly6H9B/G7ss+GGpicuEcMhvPGOn9KH9HvH8&#xA;P9XkZeWpbGTS2ayuPrUH1q8Uy8GT94t3KsqcW3/dyBkr3pXL3TppirsVdirsVdirsVdirsVdirsV&#xA;dirsVdirsVdirsVePea9Tr5m1FPMWqebdIME4/RMGhWtxJZS2yonBlktbe5EjuxYuJWFD8NKAVVZ&#xA;75VTW77yZDHfXl9a38wnSG/nht4r9YfXcW0skLxvCsxg4Fg0XX7Sg1AVWQeUfMEU8cj+dtanRGVm&#xA;hkh0YI4BqVYppyPRuh4sD4HFXmwvYPNuuXGpfmBa68NIsb2QaL5Qj0PV3s/TgkKw3V68NrItzJJx&#xA;5qnMoo7E1xV7BbvJLqjzRtxge2gYo8bLJ8TSkfaKlPcMtcVTDFXYq7FXYq7FXYq7FXYq7FUPqOnW&#xA;OpWM1jfQrcWlwpSaFxVWU4JRBFFtwZ54picDwyjyLzv8vH80eXvLPGSzfU9HS/1QenEsq6hCBqNw&#xA;ObR3BDXAf+8NKPv8IYUyn1Q/pR+39rtD+X1e9jDmP/KuX/EH/Yf1Q9A0rV9M1a0F3p1wlzBUqWXq&#xA;rr9pHU0ZGHdWAIy2MxIWHW6jS5MMuHIOE/jcd48xsrwzSySTo8DxLFIEikYoRKpRX5pxZiFDMU+M&#xA;A1U7UoTJoVcVdirsVdirsVdirsVdirsVdirsVdirsVUri6tbZVe5mSFHdIkaRggaSRgiICSKszEB&#xA;R3OKsT1BPPcVzqN3ceYtN0fSY7gLYmey9UGB0TiZJWuoQG9R2SlN6e+Kp55Ys9as9HS31q7F9qKz&#xA;XDS3arwV1e4keIhOT8AI2UBeR49MVTXFXYqhY/8Ajq3H/GCD/ic2KorFXYq7FXYq7FXYq7FXYq7F&#xA;XYq7FUl1XytaXd2dRspn0zWaBf0hbUDOF6JPGapMns4qP2SOuVSxAmxsXYaftGUI+HMDJi/my6ec&#xA;Tzifd8QWN+XfOuoWeseYbHzXKAlnqUVrb6lFFwsIuen2k3olyWeMsZvVrL8NX4BzxweIY/X8+n7G&#xA;6XZ8Mw4tMTLvgfrHu6TH9XfviGeqysoZSGVhUEbgg5c6oikMmo2z6nNpoP8ApMEEVy4qv2JnkRdq&#xA;8usLdRT8cUIrFXYq7FXYq7FXYq7FXYq7FXYq7FWIfmpY3l35UP1S2vbpra6t7iVNKdY9SWKOQGRr&#xA;JmKgS8KjqCVLAGpGKvLVF3a6hoL+ZtC1/UPJmm3F+YW1m3GoXEUV7axRWyXEUbzyysJkuFUlCUR0&#xA;DUrir2jyXa3dp5Q0W1vEaK5hsoI5IZDV4ysYHpuamrIPhY9ziqc4q7FUEk0K6zNEzqJXt4SiEjkQ&#xA;HmrQdcVRuKuxV2KuxV2KuxV2KuxV2KuxV2KuxVCwaXp8El9JFAobUpRPfV3Esghjt+TA1H91Ci/I&#xA;YpBINjmkZ8tajozGbytMsdt1fQrlm+qN3/0dwGe2PsoKf5HfKfDMfp+X45O2/P49RtqRcv8AVI/X&#xA;/nDlP41L+l0QGh+cUvvzBvdIudNOm3aaXay1uaLO8n1i4EkSUdkljReLK8dR8Rqa7CUMoOx2Pc0a&#xA;ns7Jjj4kani/nx5fHrE+UqLNcsdepSTulxFCIZHWUMWmXjwTjSgerBvirtQH3piqrirsVdirsVdi&#xA;rsVdirsVdirDvzXkmj8os5lu7fSxc2/6cuNO5i6j0/1B9YZDH+8C8f7wp8QTkRirAvy3k/LZPPNh&#xA;H+VV7dXWnvBO3miFZr24sliMYNtJI14zBLj1qKgTfjzqNsVe3Yq7FXYqhY/+Orcf8YIP+JzYqisV&#xA;dirsVdirsVdirsVdirsVdirsVdirsVdirFr3yNp+pecL7WdTtoLu0udMtLCKOT4nV7e4uZmYfACn&#xA;+9C8WWStewpUxlASFFv0+qyYZcWORifL8bjyVRpXmbRwTpF5+lbJfs6ZqTn1VHhFegO/0TK9f5hl&#xA;fDKPI2O4/rc/8zp8/wDex8Of8+A2+MNh/pTH+qUGn5iwN5p0by9PYzWF5qa3Xqw3iSI6PborqI3R&#xA;JLeVXBb4hL27nbJRygmjsWnUdm5IR44kZMX86O4/zusf84BmGWOvdirsVdirsVdirsVdirsVYFce&#xA;VPzXuL28nTz0lhby3M7WllHpdtcCK3Mreghlk9NmYR8eVR17nqVVTQPJ3n/TtfsrvUfNq6tpUXrG&#xA;509bGGwDPJGVR6wE+pRv2W279RirOcVdirzC8/Oe6g0S682xaEs3kezvjYy6p9b43rKlx9Ue5isj&#xA;BwaIT7Cs4cjfjir0WP8A46tx/wAYIP8Aic2KorFXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXY&#xA;qwzzf5Ki8w+c/LF/doJtO0uHUluoGUlXNysAjPIEcWVo+S96io6ZGUBIUW/T6nJhlxY5GMvL8cvJ&#xA;G/VPM+g72LvrulL1srhwL+Jf+KZ3os/+rKQ3+X2yupR5eofa7DxNNqfrAw5P5wHoP9aI+n3xsf0U&#xA;v13zwksej/oS8SG4l1mysdTs7kLDcRxTFvUieKYB1cgfDQVP7JycMglycPVaLLgrjHpPKQ3jL3Eb&#xA;H8WzbJuI7FXYq7FXYq7FXYq7FXYqoXyXz2cyWE0UF4ykW808TTxK/YvEkkDOPYOvzxVj8Gn/AJmL&#xA;PG1xr+iyQBlMscejXaOyV+IK51RwpI6EqaeBxV5R+YfmrQPNvk6eW69fSvzJ025MGmeT1u5bmRr6&#xA;1uW+rt+jmCw3UcmziY25FP2vhxV7Vpr6i12pu441naztjecWPwy1l5BBRgRy/wArFU0xV2KuxV2K&#xA;uxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KsD/NTyVe+Yj5cm0tBFf2Gs2dxc38axCeKzQsZSjyg&#xA;/Zbi4FDuBschPGJe9zdJr8mG4ipQPOMt4n4d/mKI6FN4vMGo6NItr5oCCBmCW+vQrxtnrsBcqSfq&#xA;7nxJ4HswPw5WMhjtP5/jk5UtFj1A4tNz64z9Q/q/zx/sh3dU117X9K0HRbrWtVn9DTbKP1bicKz0&#xA;WoFQqBmO57DL3UJhirsVdirsVdirsVdirsVdirsVQsf/AB1bj/jBB/xObFUVirsVdirsVdirsVdi&#xA;rsVdirsVdirsVdirsVdirsVdirsVdiq2WKKWNopUWSJwVdGAZWB2IIPUYkWmMjE2NiHm/wCYeja3&#xA;5f8AJmrP5ZuZl05ouLaYkS3MlsHdQZbJXV/hWtWhYFeNeBQjejgMPp3Hd+p2/wCaxarbUenJ/qgH&#xA;P/hgHP8ArD1d4kzjRvMWlauJUtZCt1bkC6splMVxCx7SRNRh7N9k9icshkEuTharQ5cFGQ9MuUhv&#xA;GXuI+7mOoTF24ozVpQE1oT09h1ybiKGnTtPp9tO0izNLEjmVI2hVyyg8ljcs6A9eLEkdCcVRGKux&#xA;V2KuxV2KuxV2KoWP/jq3H/GCD/ic2KorFXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq&#xA;7FXYqlnmXQotf0G90ea5uLOK9j9J7mzkMM6CoPwOK0rSh8RtirtZ8uaZqxjluFaK9gr9V1C3YxXM&#xA;NevCVd6Hupqp7g5CeMS97maXXZMFiO8Jc4neJ94/TzHQpLfax5k8vWM/6WiOp2CROU1m0XjLHRSQ&#xA;bq3UMQB3kiBHcooyvilD6tx3/rDmflsGp3wnw8n8yR2P9SZ/3Mv9NJG/l9qQ1LyNoF4ZRNLLp9qb&#xA;hufNhN6KeortQHmrVDVANe2XRkCLDrM2CeKRjMGMh0OzIMLU7FXYq7FXYq7FXYqgkhhbWZpWRTKl&#xA;vCEcgcgC81aHriqNxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KqN9ape&#xA;WVxaOzIlxG8TOhowDqVJU9iK7YqxfSvy20nSNH0+z0m5n0+/0+0gsxqdsVR5xbRLGr3EJDQTFuG/&#xA;NCfAjKpYhdjYuyw9p5IxEMgGXGP4Zb1/VP1R/wA0geSJ/TPmPR1prll+kLRdjqmmIzMFH7U1mS0q&#xA;+/pGT5DBxyj9QvzH6m38rp8/9zLgl/MyH/cz2H+m4feUR5K8wTeYNCbU5FQBr7UbeAxhlVoLS/nt&#xA;oHoxJq8UKs3ueg6ZbGQIsOsy4pY5GMhUgnuFrdirsVdirHPNPn3QPLWpaHpuoNI9/wCYLxLGwt4F&#xA;Vmq7BTLJyZeMSMyhm61IoDiqcx/8dW4/4wQf8TmxVFYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7F&#xA;XYq7FXYq7FXYq7FXYq7FXYq7FXYqlPljSZtK02a1mSJHkv8AUbsCBndeN5fz3SEmT4uZWYFx0DVC&#xA;/DTFU2xV2KqF898lnM9hDFPeKpNvDPK0ETP2DypHOyD3CN8sVY/BqH5mNPGtxoGixwFlEskes3bu&#xA;qV+Iqh0tAxA6AsK+IxV5F5ql81x3uj655g8qakmuX3mjTDG3r6XJDHaW8sn1WwtSt8Wq3IuzOqK0&#xA;jEsQAuKvc/WvEvvXFhO6XEEQPFoKxshdij1lG/xj7NR74qr/AF25/wCWCf8A4KD/AKq4q767c/8A&#xA;LBP/AMFB/wBVcVWC9vvVYHT5vS4rwPKDlyqeVf3vSlKYqv8Artz/AMsE/wDwUH/VXFXfXbn/AJYJ&#xA;/wDgoP8Aqrirvrtz/wAsE/8AwUH/AFVxVYl7fcpOenzBQ37ohoKleI6/vevKuKr/AK7c/wDLBP8A&#xA;8FB/1VxV3125/wCWCf8A4KD/AKq4q767c/8ALBP/AMFB/wBVcVWQ3t8YUM2nzCUqPUCtBQNTen73&#xA;pXFV/wBduf8Algn/AOCg/wCquKu+u3P/ACwT/wDBQf8AVXFVkt7fBR6WnzFuS1DNBTjyHL/dvXjW&#xA;mKr/AK7c/wDLBP8A8FB/1VxV3125/wCWCf8A4KD/AKq4q767c/8ALBP/AMFB/wBVcVWG9vvWUDT5&#xA;vS4tzPKCvKo40/e9KVxVf9duf+WCf/goP+quKu+u3P8AywT/APBQf9VcVd9duf8Algn/AOCg/wCq&#xA;uKrBe33rMDp83pcV4HlBXlU8q/velKYqv+u3P/LBP/wUH/VXFXfXbn/lgn/4KD/qrirvrtz/AMsE&#xA;/wDwUH/VXFVW1knkh5Tx+lIWb92SCQoYha8SwqVoeuKquKuxV2KuxVBaxb6e9mbi9tI7wWB+uQJK&#xA;iuUmgBZJI+QPF1/ZYbjFXz+9pDZ/kLafmjFGB589WDWJNcA/0qR7i/VXtmkNWaAwyekIfsUptir6&#xA;NxV2KuxV2KuxV4d+ZHl7yhpdt5gg1Ovmf8xfM8lzN5XighLanaBl4WcdswZ2toLZl5NLyRW+Ikds&#xA;VRvlzQj5w8+6xpPny3i1c+VtF0e1FrcKJIBfX8Dy3l0iGqiVmQKJBuANjirI/wAi9Uv77yEsF7M9&#xA;y+lX99pkNzKxeSSC0uXjhLO27EIAtfbFXoOKuxV2KuxVKvNHmOz8vaLPqdyrSlOMdtaR7y3FxKwS&#xA;GCICtXlkIUfedsVePaJd+ZPLWt/mvrmpT/WPMUGgWGqzIvxwwziC+lS3hBr+6g4rGP5qcjuTirp9&#xA;EsfKnlD8ufNWlRhPMl7qOjxa1qaV+saimqgJdpcyfan5tJzTnXgQONMVe7Yq7FXYq7FXYq8b88T3&#xA;3mD85rfyqdCt/MWn6boo1FdN1Kf6vpqzz3DxNcXA9G7MrKiKkS+k1CzHbriqQaZcaZqj+UPIMEN3&#xA;a6NceYdYt/MGh3ky3CQnSoGuf0ckiBRLZ85EaNW6pSuKs28iRQ6D+a/mzynpcS23l8WVhqlrYRDj&#xA;BbTzGSKZYUHwxrJ6atwUUr0xV6birsVdirsVdirsVdiriARQ7g9Rirza1/J+4h0218sSa36vkWzv&#xA;RewaL9V43JWOf6zFaPeCbi1vHNQ8fQ50FOeKvScVdirsVdirsVed6R+XXnHRte13WtO13SXvtdu3&#xA;uZ7u90e4nuVhNBDaiZNSgHpQooVQFHj1xVH3/kTXxr58yaJrcGm67e2MVhrbyWLXFpc+hUxzxW/1&#xA;mJ4pEZ248pXHE0IbqVU88neVrDyr5cs9CsneWK1DF7iUgyzSyuZZpZCKDlJI7Mfniqc4q7FXYq7F&#xA;UDrOhaHrdn9S1rTrbU7PkJPq15DHcRc1rRuEgZaivWmKsQ0j8l/JWmeZ9c1iDTNPjtdYs4bGLT4L&#xA;KGAWyKksdyY5E/5aVmAfiq/Z3r2VU9J/K3UIB5fsNV139J+XvK0qT6LYfVfRnMkCGO1N3c+rIJvq&#xA;6N8HCKOpoWrTFXoOKuxV2KuxV2KsT1/yVfXPmm2816DqUel65FaNp1ybm2+uWtxaGT1VSWJZbWQN&#xA;HJ8SMko6kGo2xVKB+T8EOl2jWmqyR+aLTVZteGvvCriS/ugUuPVtlaMGCSJvT9NXWigfFtuqnvlP&#xA;yfPpGpavrep3y6nr+tvD9du44fq0KQ2yFIIIITJOyInJj8UjEsxJOKsmxV2KuxV2KuxV2KuxVIvP&#xA;mr3Wi+S9b1i1uI7afTbOa8SaWP1k/cIZCpj5x8uQXiPi6nFWJ6F5q88Xnk6xhM9peee9YsoL6K3j&#xA;tmjtdPS5jVla8/eseCnkB8XJyDwU0OKstk1G98u+UrrU/Md5HfT6bbTXV7c20JtkdYlMhCRGSYjY&#xA;UHxmuKpDrd/5+038t7CeC5tz5ymNnFKLmHnC11eSrGYQsbxcUjeX7W9EUkg9cVSzTvzA8w+Zvyw0&#xA;bXtFmttO8w3l1baff29xbvMkd2bgWt3H6XqxOvpsWlFWJ4r71xV6PZx3UdpCl3MtxdKiiedE9JXc&#xA;D4mEZZ+IJ7cjirGfzI1rVdL03SU06VrZtU1jT9Nub1AjNBBczBZHX1FdAzU9MFlNC3jTFWMap5j/&#xA;ADAWM6Lo2rWdxqeo6lc6dpNzPaF544Ld6XN1IY5UhcWq8lLGNQZAqFSTuq9Pt4nit4onlad40VWn&#xA;fiHcgULNwCrVupoAMVQWoeZPLum3lvY6jqlnZXt3taWtxPFFLKTUfu0dgz9OwxVhfnDz5qEfn6w8&#xA;m6Lqum6bfSWEt+735WQS3Anhht7IoHRl9YTM3w/GQPhxVOfzV1rXtB8g6xruhzww32lW8l4BcRGa&#xA;ORIlLNHQPHxLfzb/ACxVkR1bShffUDewC+6/VDKnrU48/wC7ry+zv06Yqg4PN3lS4tLm8g1qwltL&#xA;Ogu7hLmFo4Sx4j1HDcUqdvixVVsvMfl6+lmhsdUtLqa3QSzxwzxSNGhFQ7hWJVd+pxVK/KP5g+Wv&#xA;NNxqFvpd9azzWFzNAIobiOWSSOAqjThF+IR834g7j33xVPr6/sbC0kvL64itLSEcprid1jjQVpVn&#xA;YhR9OKpNqfmm0Nlpl5o+qaVJb315FALi5ulEUsJeky2zxlhJPT7C9K9cVTG98waDY3ItL3UrW1uj&#xA;GZhBNPHHJ6S1rJxZgeIoanpiqjP5s8q28VnNcazYww6gA1hJJcwqtwrUoYSWpIDUfZriq6780+WL&#xA;KS4ivNXsraS04/WkmuIo2i9T7HqBmHHl2r1xVWbXNEWaCBtQtlmulR7WIzRhpVlNI2jWtWDn7JHX&#xA;FVKbzL5cggnuJtVs4re2YJczPcRKkbsSFV2LUUkigBxVdN5h0CDSl1efU7SLSXAZNReeNbcq2ykT&#xA;FuFD23xVJde/Mzyho7aJ6uq2Txa5cejazfWolj9IRyO04apVo1MXGtaciBWuKpxqHmfy1ptvbXOo&#xA;6tZ2VteU+qT3FxFEk3IAj02dlD1DDpird55j8vWMixXuqWlrK8RuESaeKNjCKkygMwqgp9rpiq27&#xA;80eWbOVIbvV7K3mljE0cctxEjNG32XUMwJU02OKpnirsVdirsVeU/wDOROr27eTE8qrLIlx5hvLK&#xA;0uXhR5GgsXuFa4uG4K/FAkbKSfHFUrf9Eflz+cOlyWHrtoPm7TRbarRZ7gx3dq/+iXk7hX/vldoq&#xA;np1NBirPPPP+5LUdA8rqajUrwX1+v/LjpbJcPX2e4NvE3iHOKqfmHXdLuPPXlzy+0zC4t5ptQmXh&#xA;IU5JbNFDEzheHJjc+ooJ/YxVi+i+UNb0n86dRtoYT/g6+Y+aoJAD6ceqPE9hcQdKEyet6/tQYq9F&#xA;l8yadF5mt/LjrMNQubWS9ik9F/q5jjcIy+tTh6lWrwrWm/hVVV8wjQv0JetryQPo0cLS34ulV4RF&#xA;GObM6sCKLxrirye+stQtLDRfME0T6LDr+r2OmyW8DG1bTdAZpHgtw8fFoHuZxEbgqVbk/CvwjFXp&#xA;Pke7a60HmJ3uraO6vILK6kkaVpbaG6kjhYyMWaT4FADkkuByqa1xV5Xfvp+m3H5n6d5uspLrV9fm&#xA;lbQlNtJcNfWL2iR2dtalI35NDKCCin4W+IgD4sVVvKCTad+Y/k618yfFrNv5OWxv5pEMlNRa4tHS&#xA;N5gCpl4Rtvy7YqzT88J44/yo8zxHk013YT21tEis7yTSoQiKqgkknFXlWvSape6V568tRL+lfO+v&#xA;2a3mjeY7W1kiF9YtGGkslajiBooopEWLmOYI6uzEqp/d2vl/VdJ1nW7HULrUpI/KWoWMsP1SG1tr&#xA;aFUWSK3uU9OJ1mR1PpJSqjl0BFVUFoq6Rq+l/lNaeTbRU1TSZ7a51l4IGg+q2RsmXUEuTxUKbl3W&#xA;gb+9PxCo3xVlX5TXEena15h0E2Pp3767rd5OxX03htZLpZLVqcfijnSUGMhqbGlaGiqt+dVrqpl8&#xA;o6nE8qaLpOrrc6zLBD9ZaFTC6Q3LQcJOaxSsCfhPGvLtUKsP84W+g2fly7u7S8udT/SnmjStRW7a&#xA;BBbvJDNbNdz2awJ9gRR1lk+yzVoa1xVB+cdQ8vP5t856Zdaitla3WraPfX+sC1vL6a2jsYLacJHL&#xA;awzQw8pIitJpEMfxHiwYUVTO/wBLtYvPvnO31q/OmeXfMum2MOgSwWiXFvc2C2rpPawMY5VR1lZn&#xA;WJSC5fkqnsqmOiHyvYfmjZyXyyi407ylb2r3F/FynE0bM8wuJI1MRuRB9viehYDY4qxzQLZ0/JXy&#xA;P5tsLKW513yDNFJe2noN9aa13ivrZFkVST9Xm9Re1VFMVTXzD5c1Ty/rPkbXLmumacJtTvPMl7bW&#xA;6TJZ6nqaeok0ycZB6aF3gWVh8AO5FcVWWuk2eh+b/LOttNd3vkuLUtauJ9SuokS0hv76ONo7tEjV&#xA;RHbF/WSOUrxDFmB4uGKqZeZrHy1aXHk/VrDT2tvLtr5lup76/nUtGwu7a6LXJZi7CCS5lortRelP&#xA;hKkqrbXVrSw/MS78yedbNrLStZ8v2C6EJoHnitvhd76wqsZ/es7r8HFTINgppQKsa8saVZ2S/lfY&#xA;+a7Mxy21xqtxDaXcLO9vYXAn/R8VxVWCAEpxRz8JAG3GgVTTzbYvpepeaYPLsyWtlCLSzm8lXtkX&#xA;s9YEdhAI002aL05YpBGyxcYiwR1DMFBrir3bFXYq7FXYq7FXYqxOy4f8rQ1X63X6x+ibP9F1+z9X&#xA;9ef61w/y/V9P1Pb08VZZirsVSWf9H/4xtPX9f6/9Qn+oV4/VuHqxfWeNPi9X+6+1+z9j9vFU2uPq&#xA;/oSfWOHocT6vqU4ce/Ku1MVW3v1L6nN9e9P6nwP1j1+PpcKfFz5fDx8a4qut/q/1eL6tw+r8F9H0&#xA;6cOFPh48duNOlMVVMVdirsVdirHPzH9D/Amu/WPrv1T6nL9c/Rn1X639X4/v/S+ufuK+lyry3pXj&#xA;8VMVd+XHof4E0L6v9d+qfU4vqf6T+q/W/q/H9x6v1P8AcV9LjTjvSnL4q4qyPFXYq7FXlScPrXmX&#xA;/CX6c/RX6Quv03+jv0Xx+v0H1v6p9c/0jny/vP2f9974qz3yd+gf8JaL/h7/AI4P1G2/RX2q/VfS&#xA;X0a8/irwpXlv474qnGKuxV2KuxV2KuxV2KuxV//Z</xapGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xap:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapMM="http://ns.adobe.com/xap/1.0/mm/">
         <xapMM:DocumentID>uuid:F3AA0D79A03FE0119EBFD69DAEB955AC</xapMM:DocumentID>
         <xapMM:InstanceID>uuid:F4AA0D79A03FE0119EBFD69DAEB955AC</xapMM:InstanceID>
         <xapMM:DerivedFrom rdf:parseType="Resource"/>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:stFnt="http://ns.adobe.com/xap/1.0/sType/Font#"
            xmlns:xapG="http://ns.adobe.com/xap/1.0/g/">
         <xapTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>9.900000</stDim:w>
            <stDim:h>20.999999</stDim:h>
            <stDim:unit>Centimeters</stDim:unit>
         </xapTPg:MaxPageSize>
         <xapTPg:NPages>1</xapTPg:NPages>
         <xapTPg:HasVisibleTransparency>False</xapTPg:HasVisibleTransparency>
         <xapTPg:HasVisibleOverprint>False</xapTPg:HasVisibleOverprint>
         <xapTPg:Fonts>
            <rdf:Bag>
               <rdf:li rdf:parseType="Resource">
                  <stFnt:fontName>Helvetica</stFnt:fontName>
                  <stFnt:fontFamily>Helvetica</stFnt:fontFamily>
                  <stFnt:fontFace>Regular</stFnt:fontFace>
                  <stFnt:fontType>TrueType</stFnt:fontType>
                  <stFnt:versionString>6.1d18e1</stFnt:versionString>
                  <stFnt:composite>False</stFnt:composite>
                  <stFnt:fontFileName>Helvetica.dfont</stFnt:fontFileName>
               </rdf:li>
            </rdf:Bag>
         </xapTPg:Fonts>
         <xapTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xapTPg:PlateNames>
         <xapTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xapG:groupName>Default Swatch Group</xapG:groupName>
                  <xapG:groupType>0</xapG:groupType>
               </rdf:li>
            </rdf:Seq>
         </xapTPg:SwatchGroups>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -455.15 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 455.15 li
549.907 455.15 li
549.907 0 li
cp
clp
[1 0 0 1 0 0 ]ct
93.6177 372.664 mo
93.6177 20.4976 li
535.95 20.4976 li
535.95 372.664 li
93.6177 372.664 li
cp
false sop
/0 
[/DeviceRGB] /CSA add_res
1 1 1 rgb
ef
0.5 lw
0 lc
1 lj
10 ml
[] 0 dsh
true sadj
93.6177 372.664 mo
93.6177 20.4976 li
535.95 20.4976 li
535.95 372.664 li
93.6177 372.664 li
@
145.618 372.664 mo
145.618 368.164 li
93.6177 372.664 mo
93.6177 20.4976 li
93.6177 372.664 mo
535.95 372.664 li
0 0 0 rgb
@
210.701 372.664 mo
210.701 368.164 li
@
275.701 372.664 mo
275.701 368.164 li
@
340.784 372.664 mo
340.784 368.164 li
@
405.784 372.664 mo
405.784 368.164 li
@
470.868 372.664 mo
470.868 368.164 li
@
535.95 372.664 mo
535.95 368.164 li
@
93.6177 372.664 mo
98.0342 372.664 li
@
93.6177 328.581 mo
98.0342 328.581 li
@
93.6177 284.581 mo
98.0342 284.581 li
@
93.6177 240.581 mo
98.0342 240.581 li
@
93.6177 196.581 mo
98.0342 196.581 li
@
93.6177 152.498 mo
98.0342 152.498 li
@
93.6177 108.498 mo
98.0342 108.498 li
@
93.6177 64.4976 mo
98.0342 64.4976 li
@
93.6177 20.4976 mo
98.0342 20.4976 li
@
536.925 339.561 mo
536.925 340.113 536.476 340.561 535.925 340.561 cv
535.372 340.561 534.925 340.113 534.925 339.561 cv
534.925 339.009 535.372 338.561 535.925 338.561 cv
536.476 338.561 536.925 339.009 536.925 339.561 cv
f
499.964 323.241 mo
499.964 323.793 499.517 324.241 498.964 324.241 cv
498.413 324.241 497.964 323.793 497.964 323.241 cv
497.964 322.688 498.413 322.241 498.964 322.241 cv
499.517 322.241 499.964 322.688 499.964 323.241 cv
f
463.245 288.681 mo
463.245 289.233 462.796 289.681 462.245 289.681 cv
461.692 289.681 461.245 289.233 461.245 288.681 cv
461.245 288.129 461.692 287.681 462.245 287.681 cv
462.796 287.681 463.245 288.129 463.245 288.681 cv
f
426.403 272.841 mo
426.403 273.393 425.956 273.841 425.403 273.841 cv
424.853 273.841 424.403 273.393 424.403 272.841 cv
424.403 272.289 424.853 271.841 425.403 271.841 cv
425.956 271.841 426.403 272.289 426.403 272.841 cv
f
389.444 265.281 mo
389.444 265.833 388.997 266.281 388.444 266.281 cv
387.892 266.281 387.444 265.833 387.444 265.281 cv
387.444 264.729 387.892 264.281 388.444 264.281 cv
388.997 264.281 389.444 264.729 389.444 265.281 cv
f
352.604 239.241 mo
352.604 239.793 352.155 240.241 351.604 240.241 cv
351.052 240.241 350.604 239.793 350.604 239.241 cv
350.604 238.688 351.052 238.241 351.604 238.241 cv
352.155 238.241 352.604 238.688 352.604 239.241 cv
f
315.644 212.601 mo
315.644 213.153 315.196 213.601 314.644 213.601 cv
314.093 213.601 313.644 213.153 313.644 212.601 cv
313.644 212.049 314.093 211.601 314.644 211.601 cv
315.196 211.601 315.644 212.049 315.644 212.601 cv
f
278.924 178.281 mo
278.924 178.833 278.476 179.281 277.924 179.281 cv
277.372 179.281 276.924 178.833 276.924 178.281 cv
276.924 177.729 277.372 177.281 277.924 177.281 cv
278.476 177.281 278.924 177.729 278.924 178.281 cv
f
241.964 151.641 mo
241.964 152.193 241.516 152.641 240.964 152.641 cv
240.412 152.641 239.964 152.193 239.964 151.641 cv
239.964 151.089 240.412 150.641 240.964 150.641 cv
241.516 150.641 241.964 151.089 241.964 151.641 cv
f
205.244 67.8809 mo
205.244 68.4331 204.796 68.8809 204.244 68.8809 cv
203.692 68.8809 203.244 68.4331 203.244 67.8809 cv
203.244 67.3291 203.692 66.8809 204.244 66.8809 cv
204.796 66.8809 205.244 67.3291 205.244 67.8809 cv
f
168.284 53.9609 mo
168.284 54.5127 167.836 54.9609 167.284 54.9609 cv
166.732 54.9609 166.284 54.5127 166.284 53.9609 cv
166.284 53.4092 166.732 52.9609 167.284 52.9609 cv
167.836 52.9609 168.284 53.4092 168.284 53.9609 cv
f
131.444 38.3608 mo
131.444 38.9131 130.996 39.3608 130.444 39.3608 cv
129.892 39.3608 129.444 38.9131 129.444 38.3608 cv
129.444 37.8091 129.892 37.3608 130.444 37.3608 cv
130.996 37.3608 131.444 37.8091 131.444 38.3608 cv
f
94.604 20.481 mo
94.604 21.0327 94.1563 21.481 93.604 21.481 cv
93.0522 21.481 92.604 21.0327 92.604 20.481 cv
92.604 19.9287 93.0522 19.481 93.604 19.481 cv
94.1563 19.481 94.604 19.9287 94.604 20.481 cv
f
536.925 334.041 mo
536.925 334.593 536.476 335.041 535.925 335.041 cv
535.372 335.041 534.925 334.593 534.925 334.041 cv
534.925 333.489 535.372 333.041 535.925 333.041 cv
536.476 333.041 536.925 333.489 536.925 334.041 cv
f
499.964 324.441 mo
499.964 324.993 499.517 325.441 498.964 325.441 cv
498.413 325.441 497.964 324.993 497.964 324.441 cv
497.964 323.889 498.413 323.441 498.964 323.441 cv
499.517 323.441 499.964 323.889 499.964 324.441 cv
f
463.245 303.321 mo
463.245 303.873 462.796 304.321 462.245 304.321 cv
461.692 304.321 461.245 303.873 461.245 303.321 cv
461.245 302.769 461.692 302.321 462.245 302.321 cv
462.796 302.321 463.245 302.769 463.245 303.321 cv
f
426.403 282.201 mo
426.403 282.753 425.956 283.201 425.403 283.201 cv
424.853 283.201 424.403 282.753 424.403 282.201 cv
424.403 281.649 424.853 281.201 425.403 281.201 cv
425.956 281.201 426.403 281.649 426.403 282.201 cv
f
389.444 260.841 mo
389.444 261.393 388.997 261.841 388.444 261.841 cv
387.892 261.841 387.444 261.393 387.444 260.841 cv
387.444 260.289 387.892 259.841 388.444 259.841 cv
388.997 259.841 389.444 260.289 389.444 260.841 cv
f
352.604 241.521 mo
352.604 242.073 352.155 242.521 351.604 242.521 cv
351.052 242.521 350.604 242.073 350.604 241.521 cv
350.604 240.969 351.052 240.521 351.604 240.521 cv
352.155 240.521 352.604 240.969 352.604 241.521 cv
f
315.644 216.441 mo
315.644 216.993 315.196 217.441 314.644 217.441 cv
314.093 217.441 313.644 216.993 313.644 216.441 cv
313.644 215.889 314.093 215.441 314.644 215.441 cv
315.196 215.441 315.644 215.889 315.644 216.441 cv
f
278.924 203.601 mo
278.924 204.153 278.476 204.601 277.924 204.601 cv
277.372 204.601 276.924 204.153 276.924 203.601 cv
276.924 203.049 277.372 202.601 277.924 202.601 cv
278.476 202.601 278.924 203.049 278.924 203.601 cv
f
241.964 169.641 mo
241.964 170.193 241.516 170.641 240.964 170.641 cv
240.412 170.641 239.964 170.193 239.964 169.641 cv
239.964 169.089 240.412 168.641 240.964 168.641 cv
241.516 168.641 241.964 169.089 241.964 169.641 cv
f
205.244 78.4409 mo
205.244 78.9932 204.796 79.4409 204.244 79.4409 cv
203.692 79.4409 203.244 78.9932 203.244 78.4409 cv
203.244 77.8892 203.692 77.4409 204.244 77.4409 cv
204.796 77.4409 205.244 77.8892 205.244 78.4409 cv
f
168.284 43.041 mo
168.284 43.5928 167.836 44.041 167.284 44.041 cv
166.732 44.041 166.284 43.5928 166.284 43.041 cv
166.284 42.4888 166.732 42.041 167.284 42.041 cv
167.836 42.041 168.284 42.4888 168.284 43.041 cv
f
131.444 36.4409 mo
131.444 36.9932 130.996 37.4409 130.444 37.4409 cv
129.892 37.4409 129.444 36.9932 129.444 36.4409 cv
129.444 35.8892 129.892 35.4409 130.444 35.4409 cv
130.996 35.4409 131.444 35.8892 131.444 36.4409 cv
f
536.925 338.601 mo
536.925 339.153 536.476 339.601 535.925 339.601 cv
535.372 339.601 534.925 339.153 534.925 338.601 cv
534.925 338.049 535.372 337.601 535.925 337.601 cv
536.476 337.601 536.925 338.049 536.925 338.601 cv
f
499.964 314.361 mo
499.964 314.913 499.517 315.361 498.964 315.361 cv
498.413 315.361 497.964 314.913 497.964 314.361 cv
497.964 313.809 498.413 313.361 498.964 313.361 cv
499.517 313.361 499.964 313.809 499.964 314.361 cv
f
463.245 304.521 mo
463.245 305.073 462.796 305.521 462.245 305.521 cv
461.692 305.521 461.245 305.073 461.245 304.521 cv
461.245 303.969 461.692 303.521 462.245 303.521 cv
462.796 303.521 463.245 303.969 463.245 304.521 cv
f
426.403 264.921 mo
426.403 265.473 425.956 265.921 425.403 265.921 cv
424.853 265.921 424.403 265.473 424.403 264.921 cv
424.403 264.369 424.853 263.921 425.403 263.921 cv
425.956 263.921 426.403 264.369 426.403 264.921 cv
f
389.444 261.441 mo
389.444 261.993 388.997 262.441 388.444 262.441 cv
387.892 262.441 387.444 261.993 387.444 261.441 cv
387.444 260.889 387.892 260.441 388.444 260.441 cv
388.997 260.441 389.444 260.889 389.444 261.441 cv
f
352.604 244.521 mo
352.604 245.073 352.155 245.521 351.604 245.521 cv
351.052 245.521 350.604 245.073 350.604 244.521 cv
350.604 243.969 351.052 243.521 351.604 243.521 cv
352.155 243.521 352.604 243.969 352.604 244.521 cv
f
315.644 211.881 mo
315.644 212.433 315.196 212.881 314.644 212.881 cv
314.093 212.881 313.644 212.433 313.644 211.881 cv
313.644 211.329 314.093 210.881 314.644 210.881 cv
315.196 210.881 315.644 211.329 315.644 211.881 cv
f
278.924 195.921 mo
278.924 196.473 278.476 196.921 277.924 196.921 cv
277.372 196.921 276.924 196.473 276.924 195.921 cv
276.924 195.369 277.372 194.921 277.924 194.921 cv
278.476 194.921 278.924 195.369 278.924 195.921 cv
f
241.964 168.441 mo
241.964 168.993 241.516 169.441 240.964 169.441 cv
240.412 169.441 239.964 168.993 239.964 168.441 cv
239.964 167.889 240.412 167.441 240.964 167.441 cv
241.516 167.441 241.964 167.889 241.964 168.441 cv
f
205.244 64.041 mo
205.244 64.5928 204.796 65.041 204.244 65.041 cv
203.692 65.041 203.244 64.5928 203.244 64.041 cv
203.244 63.4888 203.692 63.041 204.244 63.041 cv
204.796 63.041 205.244 63.4888 205.244 64.041 cv
f
168.284 43.7607 mo
168.284 44.313 167.836 44.7607 167.284 44.7607 cv
166.732 44.7607 166.284 44.313 166.284 43.7607 cv
166.284 43.209 166.732 42.7607 167.284 42.7607 cv
167.836 42.7607 168.284 43.209 168.284 43.7607 cv
f
131.444 38.001 mo
131.444 38.5527 130.996 39.001 130.444 39.001 cv
129.892 39.001 129.444 38.5527 129.444 38.001 cv
129.444 37.4487 129.892 37.001 130.444 37.001 cv
130.996 37.001 131.444 37.4487 131.444 38.001 cv
f
536.925 345.681 mo
536.925 346.233 536.476 346.681 535.925 346.681 cv
535.372 346.681 534.925 346.233 534.925 345.681 cv
534.925 345.129 535.372 344.681 535.925 344.681 cv
536.476 344.681 536.925 345.129 536.925 345.681 cv
f
499.964 329.601 mo
499.964 330.153 499.517 330.601 498.964 330.601 cv
498.413 330.601 497.964 330.153 497.964 329.601 cv
497.964 329.049 498.413 328.601 498.964 328.601 cv
499.517 328.601 499.964 329.049 499.964 329.601 cv
f
463.245 298.401 mo
463.245 298.953 462.796 299.401 462.245 299.401 cv
461.692 299.401 461.245 298.953 461.245 298.401 cv
461.245 297.849 461.692 297.401 462.245 297.401 cv
462.796 297.401 463.245 297.849 463.245 298.401 cv
f
426.403 282.801 mo
426.403 283.353 425.956 283.801 425.403 283.801 cv
424.853 283.801 424.403 283.353 424.403 282.801 cv
424.403 282.249 424.853 281.801 425.403 281.801 cv
425.956 281.801 426.403 282.249 426.403 282.801 cv
f
389.444 256.041 mo
389.444 256.593 388.997 257.041 388.444 257.041 cv
387.892 257.041 387.444 256.593 387.444 256.041 cv
387.444 255.489 387.892 255.041 388.444 255.041 cv
388.997 255.041 389.444 255.489 389.444 256.041 cv
f
352.604 225.321 mo
352.604 225.873 352.155 226.321 351.604 226.321 cv
351.052 226.321 350.604 225.873 350.604 225.321 cv
350.604 224.769 351.052 224.321 351.604 224.321 cv
352.155 224.321 352.604 224.769 352.604 225.321 cv
f
315.644 215.241 mo
315.644 215.793 315.196 216.241 314.644 216.241 cv
314.093 216.241 313.644 215.793 313.644 215.241 cv
313.644 214.688 314.093 214.241 314.644 214.241 cv
315.196 214.241 315.644 214.688 315.644 215.241 cv
f
278.924 191.601 mo
278.924 192.153 278.476 192.601 277.924 192.601 cv
277.372 192.601 276.924 192.153 276.924 191.601 cv
276.924 191.049 277.372 190.601 277.924 190.601 cv
278.476 190.601 278.924 191.049 278.924 191.601 cv
f
241.964 168.921 mo
241.964 169.473 241.516 169.921 240.964 169.921 cv
240.412 169.921 239.964 169.473 239.964 168.921 cv
239.964 168.369 240.412 167.921 240.964 167.921 cv
241.516 167.921 241.964 168.369 241.964 168.921 cv
f
205.244 72.2012 mo
205.244 72.7529 204.796 73.2012 204.244 73.2012 cv
203.692 73.2012 203.244 72.7529 203.244 72.2012 cv
203.244 71.6489 203.692 71.2012 204.244 71.2012 cv
204.796 71.2012 205.244 71.6489 205.244 72.2012 cv
f
168.284 38.001 mo
168.284 38.5527 167.836 39.001 167.284 39.001 cv
166.732 39.001 166.284 38.5527 166.284 38.001 cv
166.284 37.4487 166.732 37.001 167.284 37.001 cv
167.836 37.001 168.284 37.4487 168.284 38.001 cv
f
131.444 55.041 mo
131.444 55.5928 130.996 56.041 130.444 56.041 cv
129.892 56.041 129.444 55.5928 129.444 55.041 cv
129.444 54.4888 129.892 54.041 130.444 54.041 cv
130.996 54.041 131.444 54.4888 131.444 55.041 cv
f
536.925 336.201 mo
536.925 336.753 536.476 337.201 535.925 337.201 cv
535.372 337.201 534.925 336.753 534.925 336.201 cv
534.925 335.649 535.372 335.201 535.925 335.201 cv
536.476 335.201 536.925 335.649 536.925 336.201 cv
f
499.964 299.721 mo
499.964 300.272 499.517 300.721 498.964 300.721 cv
498.413 300.721 497.964 300.272 497.964 299.721 cv
497.964 299.169 498.413 298.721 498.964 298.721 cv
499.517 298.721 499.964 299.169 499.964 299.721 cv
f
463.245 311.601 mo
463.245 312.153 462.796 312.601 462.245 312.601 cv
461.692 312.601 461.245 312.153 461.245 311.601 cv
461.245 311.049 461.692 310.601 462.245 310.601 cv
462.796 310.601 463.245 311.049 463.245 311.601 cv
f
426.403 281.721 mo
426.403 282.272 425.956 282.721 425.403 282.721 cv
424.853 282.721 424.403 282.272 424.403 281.721 cv
424.403 281.169 424.853 280.721 425.403 280.721 cv
425.956 280.721 426.403 281.169 426.403 281.721 cv
f
389.444 254.721 mo
389.444 255.273 388.997 255.721 388.444 255.721 cv
387.892 255.721 387.444 255.273 387.444 254.721 cv
387.444 254.169 387.892 253.721 388.444 253.721 cv
388.997 253.721 389.444 254.169 389.444 254.721 cv
f
352.604 247.281 mo
352.604 247.833 352.155 248.281 351.604 248.281 cv
351.052 248.281 350.604 247.833 350.604 247.281 cv
350.604 246.729 351.052 246.281 351.604 246.281 cv
352.155 246.281 352.604 246.729 352.604 247.281 cv
f
315.644 211.161 mo
315.644 211.713 315.196 212.161 314.644 212.161 cv
314.093 212.161 313.644 211.713 313.644 211.161 cv
313.644 210.609 314.093 210.161 314.644 210.161 cv
315.196 210.161 315.644 210.609 315.644 211.161 cv
f
278.924 194.961 mo
278.924 195.513 278.476 195.961 277.924 195.961 cv
277.372 195.961 276.924 195.513 276.924 194.961 cv
276.924 194.409 277.372 193.961 277.924 193.961 cv
278.476 193.961 278.924 194.409 278.924 194.961 cv
f
241.964 158.961 mo
241.964 159.513 241.516 159.961 240.964 159.961 cv
240.412 159.961 239.964 159.513 239.964 158.961 cv
239.964 158.409 240.412 157.961 240.964 157.961 cv
241.516 157.961 241.964 158.409 241.964 158.961 cv
f
205.244 71.6011 mo
205.244 72.1528 204.796 72.6011 204.244 72.6011 cv
203.692 72.6011 203.244 72.1528 203.244 71.6011 cv
203.244 71.0488 203.692 70.6011 204.244 70.6011 cv
204.796 70.6011 205.244 71.0488 205.244 71.6011 cv
f
168.284 41.7207 mo
168.284 42.2729 167.836 42.7207 167.284 42.7207 cv
166.732 42.7207 166.284 42.2729 166.284 41.7207 cv
166.284 41.1689 166.732 40.7207 167.284 40.7207 cv
167.836 40.7207 168.284 41.1689 168.284 41.7207 cv
f
131.444 24.8008 mo
131.444 25.353 130.996 25.8008 130.444 25.8008 cv
129.892 25.8008 129.444 25.353 129.444 24.8008 cv
129.444 24.249 129.892 23.8008 130.444 23.8008 cv
130.996 23.8008 131.444 24.249 131.444 24.8008 cv
f
94.604 20.481 mo
94.604 21.0327 94.1563 21.481 93.604 21.481 cv
93.0522 21.481 92.604 21.0327 92.604 20.481 cv
92.604 19.9287 93.0522 19.481 93.604 19.481 cv
94.1563 19.481 94.604 19.9287 94.604 20.481 cv
f
536.925 350.361 mo
536.925 350.913 536.476 351.361 535.925 351.361 cv
535.372 351.361 534.925 350.913 534.925 350.361 cv
534.925 349.809 535.372 349.361 535.925 349.361 cv
536.476 349.361 536.925 349.809 536.925 350.361 cv
f
499.964 332.601 mo
499.964 333.153 499.517 333.601 498.964 333.601 cv
498.413 333.601 497.964 333.153 497.964 332.601 cv
497.964 332.049 498.413 331.601 498.964 331.601 cv
499.517 331.601 499.964 332.049 499.964 332.601 cv
f
463.245 297.681 mo
463.245 298.233 462.796 298.681 462.245 298.681 cv
461.692 298.681 461.245 298.233 461.245 297.681 cv
461.245 297.129 461.692 296.681 462.245 296.681 cv
462.796 296.681 463.245 297.129 463.245 297.681 cv
f
426.403 278.961 mo
426.403 279.513 425.956 279.961 425.403 279.961 cv
424.853 279.961 424.403 279.513 424.403 278.961 cv
424.403 278.409 424.853 277.961 425.403 277.961 cv
425.956 277.961 426.403 278.409 426.403 278.961 cv
f
389.444 253.401 mo
389.444 253.953 388.997 254.401 388.444 254.401 cv
387.892 254.401 387.444 253.953 387.444 253.401 cv
387.444 252.849 387.892 252.401 388.444 252.401 cv
388.997 252.401 389.444 252.849 389.444 253.401 cv
f
352.604 222.201 mo
352.604 222.753 352.155 223.201 351.604 223.201 cv
351.052 223.201 350.604 222.753 350.604 222.201 cv
350.604 221.648 351.052 221.201 351.604 221.201 cv
352.155 221.201 352.604 221.648 352.604 222.201 cv
f
315.644 221.961 mo
315.644 222.513 315.196 222.961 314.644 222.961 cv
314.093 222.961 313.644 222.513 313.644 221.961 cv
313.644 221.409 314.093 220.961 314.644 220.961 cv
315.196 220.961 315.644 221.409 315.644 221.961 cv
f
278.924 192.321 mo
278.924 192.873 278.476 193.321 277.924 193.321 cv
277.372 193.321 276.924 192.873 276.924 192.321 cv
276.924 191.769 277.372 191.321 277.924 191.321 cv
278.476 191.321 278.924 191.769 278.924 192.321 cv
f
241.964 171.081 mo
241.964 171.633 241.516 172.081 240.964 172.081 cv
240.412 172.081 239.964 171.633 239.964 171.081 cv
239.964 170.529 240.412 170.081 240.964 170.081 cv
241.516 170.081 241.964 170.529 241.964 171.081 cv
f
205.244 73.041 mo
205.244 73.5928 204.796 74.041 204.244 74.041 cv
203.692 74.041 203.244 73.5928 203.244 73.041 cv
203.244 72.4888 203.692 72.041 204.244 72.041 cv
204.796 72.041 205.244 72.4888 205.244 73.041 cv
f
168.284 41.8408 mo
168.284 42.3931 167.836 42.8408 167.284 42.8408 cv
166.732 42.8408 166.284 42.3931 166.284 41.8408 cv
166.284 41.2891 166.732 40.8408 167.284 40.8408 cv
167.836 40.8408 168.284 41.2891 168.284 41.8408 cv
f
131.444 46.7607 mo
131.444 47.313 130.996 47.7607 130.444 47.7607 cv
129.892 47.7607 129.444 47.313 129.444 46.7607 cv
129.444 46.209 129.892 45.7607 130.444 45.7607 cv
130.996 45.7607 131.444 46.209 131.444 46.7607 cv
f
536.925 352.641 mo
536.925 353.193 536.476 353.641 535.925 353.641 cv
535.372 353.641 534.925 353.193 534.925 352.641 cv
534.925 352.089 535.372 351.641 535.925 351.641 cv
536.476 351.641 536.925 352.089 536.925 352.641 cv
f
499.964 325.161 mo
499.964 325.713 499.517 326.161 498.964 326.161 cv
498.413 326.161 497.964 325.713 497.964 325.161 cv
497.964 324.609 498.413 324.161 498.964 324.161 cv
499.517 324.161 499.964 324.609 499.964 325.161 cv
f
463.245 290.601 mo
463.245 291.153 462.796 291.601 462.245 291.601 cv
461.692 291.601 461.245 291.153 461.245 290.601 cv
461.245 290.049 461.692 289.601 462.245 289.601 cv
462.796 289.601 463.245 290.049 463.245 290.601 cv
f
426.403 277.641 mo
426.403 278.193 425.956 278.641 425.403 278.641 cv
424.853 278.641 424.403 278.193 424.403 277.641 cv
424.403 277.089 424.853 276.641 425.403 276.641 cv
425.956 276.641 426.403 277.089 426.403 277.641 cv
f
389.444 264.921 mo
389.444 265.473 388.997 265.921 388.444 265.921 cv
387.892 265.921 387.444 265.473 387.444 264.921 cv
387.444 264.369 387.892 263.921 388.444 263.921 cv
388.997 263.921 389.444 264.369 389.444 264.921 cv
f
352.604 246.081 mo
352.604 246.633 352.155 247.081 351.604 247.081 cv
351.052 247.081 350.604 246.633 350.604 246.081 cv
350.604 245.529 351.052 245.081 351.604 245.081 cv
352.155 245.081 352.604 245.529 352.604 246.081 cv
f
315.644 216.201 mo
315.644 216.753 315.196 217.201 314.644 217.201 cv
314.093 217.201 313.644 216.753 313.644 216.201 cv
313.644 215.648 314.093 215.201 314.644 215.201 cv
315.196 215.201 315.644 215.648 315.644 216.201 cv
f
278.924 198.921 mo
278.924 199.473 278.476 199.921 277.924 199.921 cv
277.372 199.921 276.924 199.473 276.924 198.921 cv
276.924 198.369 277.372 197.921 277.924 197.921 cv
278.476 197.921 278.924 198.369 278.924 198.921 cv
f
241.964 173.961 mo
241.964 174.513 241.516 174.961 240.964 174.961 cv
240.412 174.961 239.964 174.513 239.964 173.961 cv
239.964 173.409 240.412 172.961 240.964 172.961 cv
241.516 172.961 241.964 173.409 241.964 173.961 cv
f
205.244 58.041 mo
205.244 58.5928 204.796 59.041 204.244 59.041 cv
203.692 59.041 203.244 58.5928 203.244 58.041 cv
203.244 57.4888 203.692 57.041 204.244 57.041 cv
204.796 57.041 205.244 57.4888 205.244 58.041 cv
f
168.284 53.001 mo
168.284 53.5527 167.836 54.001 167.284 54.001 cv
166.732 54.001 166.284 53.5527 166.284 53.001 cv
166.284 52.4487 166.732 52.001 167.284 52.001 cv
167.836 52.001 168.284 52.4487 168.284 53.001 cv
f
536.925 336.561 mo
536.925 337.113 536.476 337.561 535.925 337.561 cv
535.372 337.561 534.925 337.113 534.925 336.561 cv
534.925 336.009 535.372 335.561 535.925 335.561 cv
536.476 335.561 536.925 336.009 536.925 336.561 cv
f
499.964 328.881 mo
499.964 329.433 499.517 329.881 498.964 329.881 cv
498.413 329.881 497.964 329.433 497.964 328.881 cv
497.964 328.329 498.413 327.881 498.964 327.881 cv
499.517 327.881 499.964 328.329 499.964 328.881 cv
f
463.245 312.441 mo
463.245 312.993 462.796 313.441 462.245 313.441 cv
461.692 313.441 461.245 312.993 461.245 312.441 cv
461.245 311.889 461.692 311.441 462.245 311.441 cv
462.796 311.441 463.245 311.889 463.245 312.441 cv
f
426.403 279.441 mo
426.403 279.993 425.956 280.441 425.403 280.441 cv
424.853 280.441 424.403 279.993 424.403 279.441 cv
424.403 278.889 424.853 278.441 425.403 278.441 cv
425.956 278.441 426.403 278.889 426.403 279.441 cv
f
389.444 263.601 mo
389.444 264.153 388.997 264.601 388.444 264.601 cv
387.892 264.601 387.444 264.153 387.444 263.601 cv
387.444 263.049 387.892 262.601 388.444 262.601 cv
388.997 262.601 389.444 263.049 389.444 263.601 cv
f
352.604 241.161 mo
352.604 241.713 352.155 242.161 351.604 242.161 cv
351.052 242.161 350.604 241.713 350.604 241.161 cv
350.604 240.609 351.052 240.161 351.604 240.161 cv
352.155 240.161 352.604 240.609 352.604 241.161 cv
f
315.644 218.361 mo
315.644 218.913 315.196 219.361 314.644 219.361 cv
314.093 219.361 313.644 218.913 313.644 218.361 cv
313.644 217.809 314.093 217.361 314.644 217.361 cv
315.196 217.361 315.644 217.809 315.644 218.361 cv
f
278.924 199.881 mo
278.924 200.433 278.476 200.881 277.924 200.881 cv
277.372 200.881 276.924 200.433 276.924 199.881 cv
276.924 199.329 277.372 198.881 277.924 198.881 cv
278.476 198.881 278.924 199.329 278.924 199.881 cv
f
241.964 156.681 mo
241.964 157.233 241.516 157.681 240.964 157.681 cv
240.412 157.681 239.964 157.233 239.964 156.681 cv
239.964 156.129 240.412 155.681 240.964 155.681 cv
241.516 155.681 241.964 156.129 241.964 156.681 cv
f
205.244 56.7207 mo
205.244 57.2729 204.796 57.7207 204.244 57.7207 cv
203.692 57.7207 203.244 57.2729 203.244 56.7207 cv
203.244 56.1689 203.692 55.7207 204.244 55.7207 cv
204.796 55.7207 205.244 56.1689 205.244 56.7207 cv
f
168.284 47.7207 mo
168.284 48.2729 167.836 48.7207 167.284 48.7207 cv
166.732 48.7207 166.284 48.2729 166.284 47.7207 cv
166.284 47.1689 166.732 46.7207 167.284 46.7207 cv
167.836 46.7207 168.284 47.1689 168.284 47.7207 cv
f
131.444 48.2012 mo
131.444 48.7529 130.996 49.2012 130.444 49.2012 cv
129.892 49.2012 129.444 48.7529 129.444 48.2012 cv
129.444 47.6489 129.892 47.2012 130.444 47.2012 cv
130.996 47.2012 131.444 47.6489 131.444 48.2012 cv
f
94.604 20.481 mo
94.604 21.0327 94.1563 21.481 93.604 21.481 cv
93.0522 21.481 92.604 21.0327 92.604 20.481 cv
92.604 19.9287 93.0522 19.481 93.604 19.481 cv
94.1563 19.481 94.604 19.9287 94.604 20.481 cv
f
536.925 336.441 mo
536.925 336.993 536.476 337.441 535.925 337.441 cv
535.372 337.441 534.925 336.993 534.925 336.441 cv
534.925 335.889 535.372 335.441 535.925 335.441 cv
536.476 335.441 536.925 335.889 536.925 336.441 cv
f
499.964 326.601 mo
499.964 327.153 499.517 327.601 498.964 327.601 cv
498.413 327.601 497.964 327.153 497.964 326.601 cv
497.964 326.049 498.413 325.601 498.964 325.601 cv
499.517 325.601 499.964 326.049 499.964 326.601 cv
f
463.245 304.521 mo
463.245 305.073 462.796 305.521 462.245 305.521 cv
461.692 305.521 461.245 305.073 461.245 304.521 cv
461.245 303.969 461.692 303.521 462.245 303.521 cv
462.796 303.521 463.245 303.969 463.245 304.521 cv
f
426.403 287.241 mo
426.403 287.793 425.956 288.241 425.403 288.241 cv
424.853 288.241 424.403 287.793 424.403 287.241 cv
424.403 286.688 424.853 286.241 425.403 286.241 cv
425.956 286.241 426.403 286.688 426.403 287.241 cv
f
389.444 249.561 mo
389.444 250.113 388.997 250.561 388.444 250.561 cv
387.892 250.561 387.444 250.113 387.444 249.561 cv
387.444 249.009 387.892 248.561 388.444 248.561 cv
388.997 248.561 389.444 249.009 389.444 249.561 cv
f
352.604 235.761 mo
352.604 236.313 352.155 236.761 351.604 236.761 cv
351.052 236.761 350.604 236.313 350.604 235.761 cv
350.604 235.209 351.052 234.761 351.604 234.761 cv
352.155 234.761 352.604 235.209 352.604 235.761 cv
f
315.644 220.641 mo
315.644 221.193 315.196 221.641 314.644 221.641 cv
314.093 221.641 313.644 221.193 313.644 220.641 cv
313.644 220.089 314.093 219.641 314.644 219.641 cv
315.196 219.641 315.644 220.089 315.644 220.641 cv
f
278.924 188.241 mo
278.924 188.793 278.476 189.241 277.924 189.241 cv
277.372 189.241 276.924 188.793 276.924 188.241 cv
276.924 187.689 277.372 187.241 277.924 187.241 cv
278.476 187.241 278.924 187.689 278.924 188.241 cv
f
241.964 167.241 mo
241.964 167.793 241.516 168.241 240.964 168.241 cv
240.412 168.241 239.964 167.793 239.964 167.241 cv
239.964 166.689 240.412 166.241 240.964 166.241 cv
241.516 166.241 241.964 166.689 241.964 167.241 cv
f
205.244 55.4009 mo
205.244 55.9531 204.796 56.4009 204.244 56.4009 cv
203.692 56.4009 203.244 55.9531 203.244 55.4009 cv
203.244 54.8491 203.692 54.4009 204.244 54.4009 cv
204.796 54.4009 205.244 54.8491 205.244 55.4009 cv
f
168.284 38.8408 mo
168.284 39.3931 167.836 39.8408 167.284 39.8408 cv
166.732 39.8408 166.284 39.3931 166.284 38.8408 cv
166.284 38.2891 166.732 37.8408 167.284 37.8408 cv
167.836 37.8408 168.284 38.2891 168.284 38.8408 cv
f
536.925 353.001 mo
536.925 353.553 536.476 354.001 535.925 354.001 cv
535.372 354.001 534.925 353.553 534.925 353.001 cv
534.925 352.449 535.372 352.001 535.925 352.001 cv
536.476 352.001 536.925 352.449 536.925 353.001 cv
f
499.964 331.401 mo
499.964 331.953 499.517 332.401 498.964 332.401 cv
498.413 332.401 497.964 331.953 497.964 331.401 cv
497.964 330.849 498.413 330.401 498.964 330.401 cv
499.517 330.401 499.964 330.849 499.964 331.401 cv
f
463.245 290.721 mo
463.245 291.272 462.796 291.721 462.245 291.721 cv
461.692 291.721 461.245 291.272 461.245 290.721 cv
461.245 290.169 461.692 289.721 462.245 289.721 cv
462.796 289.721 463.245 290.169 463.245 290.721 cv
f
426.403 266.48 mo
426.403 267.033 425.956 267.48 425.403 267.48 cv
424.853 267.48 424.403 267.033 424.403 266.48 cv
424.403 265.929 424.853 265.48 425.403 265.48 cv
425.956 265.48 426.403 265.929 426.403 266.48 cv
f
389.444 270.441 mo
389.444 270.993 388.997 271.441 388.444 271.441 cv
387.892 271.441 387.444 270.993 387.444 270.441 cv
387.444 269.889 387.892 269.441 388.444 269.441 cv
388.997 269.441 389.444 269.889 389.444 270.441 cv
f
352.604 241.881 mo
352.604 242.433 352.155 242.881 351.604 242.881 cv
351.052 242.881 350.604 242.433 350.604 241.881 cv
350.604 241.329 351.052 240.881 351.604 240.881 cv
352.155 240.881 352.604 241.329 352.604 241.881 cv
f
315.644 224.48 mo
315.644 225.033 315.196 225.48 314.644 225.48 cv
314.093 225.48 313.644 225.033 313.644 224.48 cv
313.644 223.929 314.093 223.48 314.644 223.48 cv
315.196 223.48 315.644 223.929 315.644 224.48 cv
f
278.924 192.201 mo
278.924 192.753 278.476 193.201 277.924 193.201 cv
277.372 193.201 276.924 192.753 276.924 192.201 cv
276.924 191.649 277.372 191.201 277.924 191.201 cv
278.476 191.201 278.924 191.649 278.924 192.201 cv
f
241.964 135.801 mo
241.964 136.353 241.516 136.801 240.964 136.801 cv
240.412 136.801 239.964 136.353 239.964 135.801 cv
239.964 135.249 240.412 134.801 240.964 134.801 cv
241.516 134.801 241.964 135.249 241.964 135.801 cv
f
205.244 62.3608 mo
205.244 62.9131 204.796 63.3608 204.244 63.3608 cv
203.692 63.3608 203.244 62.9131 203.244 62.3608 cv
203.244 61.8091 203.692 61.3608 204.244 61.3608 cv
204.796 61.3608 205.244 61.8091 205.244 62.3608 cv
f
168.284 46.6411 mo
168.284 47.1929 167.836 47.6411 167.284 47.6411 cv
166.732 47.6411 166.284 47.1929 166.284 46.6411 cv
166.284 46.0889 166.732 45.6411 167.284 45.6411 cv
167.836 45.6411 168.284 46.0889 168.284 46.6411 cv
f
131.444 37.041 mo
131.444 37.5928 130.996 38.041 130.444 38.041 cv
129.892 38.041 129.444 37.5928 129.444 37.041 cv
129.444 36.4888 129.892 36.041 130.444 36.041 cv
130.996 36.041 131.444 36.4888 131.444 37.041 cv
f
94.604 20.481 mo
94.604 21.0327 94.1563 21.481 93.604 21.481 cv
93.0522 21.481 92.604 21.0327 92.604 20.481 cv
92.604 19.9287 93.0522 19.481 93.604 19.481 cv
94.1563 19.481 94.604 19.9287 94.604 20.481 cv
f
536.925 345.561 mo
536.925 346.113 536.476 346.561 535.925 346.561 cv
535.372 346.561 534.925 346.113 534.925 345.561 cv
534.925 345.009 535.372 344.561 535.925 344.561 cv
536.476 344.561 536.925 345.009 536.925 345.561 cv
f
499.964 323.961 mo
499.964 324.513 499.517 324.961 498.964 324.961 cv
498.413 324.961 497.964 324.513 497.964 323.961 cv
497.964 323.409 498.413 322.961 498.964 322.961 cv
499.517 322.961 499.964 323.409 499.964 323.961 cv
f
463.245 289.281 mo
463.245 289.833 462.796 290.281 462.245 290.281 cv
461.692 290.281 461.245 289.833 461.245 289.281 cv
461.245 288.729 461.692 288.281 462.245 288.281 cv
462.796 288.281 463.245 288.729 463.245 289.281 cv
f
426.403 275.001 mo
426.403 275.553 425.956 276.001 425.403 276.001 cv
424.853 276.001 424.403 275.553 424.403 275.001 cv
424.403 274.449 424.853 274.001 425.403 274.001 cv
425.956 274.001 426.403 274.449 426.403 275.001 cv
f
389.444 266.841 mo
389.444 267.393 388.997 267.841 388.444 267.841 cv
387.892 267.841 387.444 267.393 387.444 266.841 cv
387.444 266.289 387.892 265.841 388.444 265.841 cv
388.997 265.841 389.444 266.289 389.444 266.841 cv
f
352.604 235.761 mo
352.604 236.313 352.155 236.761 351.604 236.761 cv
351.052 236.761 350.604 236.313 350.604 235.761 cv
350.604 235.209 351.052 234.761 351.604 234.761 cv
352.155 234.761 352.604 235.209 352.604 235.761 cv
f
315.644 219.321 mo
315.644 219.873 315.196 220.321 314.644 220.321 cv
314.093 220.321 313.644 219.873 313.644 219.321 cv
313.644 218.769 314.093 218.321 314.644 218.321 cv
315.196 218.321 315.644 218.769 315.644 219.321 cv
f
278.924 189.081 mo
278.924 189.633 278.476 190.081 277.924 190.081 cv
277.372 190.081 276.924 189.633 276.924 189.081 cv
276.924 188.529 277.372 188.081 277.924 188.081 cv
278.476 188.081 278.924 188.529 278.924 189.081 cv
f
241.964 160.041 mo
241.964 160.593 241.516 161.041 240.964 161.041 cv
240.412 161.041 239.964 160.593 239.964 160.041 cv
239.964 159.489 240.412 159.041 240.964 159.041 cv
241.516 159.041 241.964 159.489 241.964 160.041 cv
f
205.244 78.2012 mo
205.244 78.7529 204.796 79.2012 204.244 79.2012 cv
203.692 79.2012 203.244 78.7529 203.244 78.2012 cv
203.244 77.6489 203.692 77.2007 204.244 77.2007 cv
204.796 77.2007 205.244 77.6489 205.244 78.2012 cv
f
168.284 43.7607 mo
168.284 44.313 167.836 44.7607 167.284 44.7607 cv
166.732 44.7607 166.284 44.313 166.284 43.7607 cv
166.284 43.209 166.732 42.7607 167.284 42.7607 cv
167.836 42.7607 168.284 43.209 168.284 43.7607 cv
f
131.444 29.481 mo
131.444 30.0327 130.996 30.481 130.444 30.481 cv
129.892 30.481 129.444 30.0327 129.444 29.481 cv
129.444 28.9287 129.892 28.481 130.444 28.481 cv
130.996 28.481 131.444 28.9287 131.444 29.481 cv
f
94.604 20.481 mo
94.604 21.0327 94.1563 21.481 93.604 21.481 cv
93.0522 21.481 92.604 21.0327 92.604 20.481 cv
92.604 19.9287 93.0522 19.481 93.604 19.481 cv
94.1563 19.481 94.604 19.9287 94.604 20.481 cv
f
536.925 346.761 mo
536.925 347.313 536.476 347.761 535.925 347.761 cv
535.372 347.761 534.925 347.313 534.925 346.761 cv
534.925 346.209 535.372 345.761 535.925 345.761 cv
536.476 345.761 536.925 346.209 536.925 346.761 cv
f
499.964 322.521 mo
499.964 323.073 499.517 323.521 498.964 323.521 cv
498.413 323.521 497.964 323.073 497.964 322.521 cv
497.964 321.969 498.413 321.521 498.964 321.521 cv
499.517 321.521 499.964 321.969 499.964 322.521 cv
f
463.245 304.281 mo
463.245 304.833 462.796 305.281 462.245 305.281 cv
461.692 305.281 461.245 304.833 461.245 304.281 cv
461.245 303.729 461.692 303.281 462.245 303.281 cv
462.796 303.281 463.245 303.729 463.245 304.281 cv
f
426.403 283.761 mo
426.403 284.313 425.956 284.761 425.403 284.761 cv
424.853 284.761 424.403 284.313 424.403 283.761 cv
424.403 283.209 424.853 282.761 425.403 282.761 cv
425.956 282.761 426.403 283.209 426.403 283.761 cv
f
389.444 258.681 mo
389.444 259.233 388.997 259.681 388.444 259.681 cv
387.892 259.681 387.444 259.233 387.444 258.681 cv
387.444 258.129 387.892 257.681 388.444 257.681 cv
388.997 257.681 389.444 258.129 389.444 258.681 cv
f
352.604 236.48 mo
352.604 237.033 352.155 237.48 351.604 237.48 cv
351.052 237.48 350.604 237.033 350.604 236.48 cv
350.604 235.929 351.052 235.48 351.604 235.48 cv
352.155 235.48 352.604 235.929 352.604 236.48 cv
f
315.644 225.801 mo
315.644 226.353 315.196 226.801 314.644 226.801 cv
314.093 226.801 313.644 226.353 313.644 225.801 cv
313.644 225.249 314.093 224.801 314.644 224.801 cv
315.196 224.801 315.644 225.249 315.644 225.801 cv
f
278.924 197.481 mo
278.924 198.033 278.476 198.481 277.924 198.481 cv
277.372 198.481 276.924 198.033 276.924 197.481 cv
276.924 196.929 277.372 196.481 277.924 196.481 cv
278.476 196.481 278.924 196.929 278.924 197.481 cv
f
241.964 131.961 mo
241.964 132.513 241.516 132.961 240.964 132.961 cv
240.412 132.961 239.964 132.513 239.964 131.961 cv
239.964 131.409 240.412 130.961 240.964 130.961 cv
241.516 130.961 241.964 131.409 241.964 131.961 cv
f
205.244 84.4409 mo
205.244 84.9932 204.796 85.4409 204.244 85.4409 cv
203.692 85.4409 203.244 84.9932 203.244 84.4409 cv
203.244 83.8892 203.692 83.4409 204.244 83.4409 cv
204.796 83.4409 205.244 83.8892 205.244 84.4409 cv
f
168.284 38.3608 mo
168.284 38.9131 167.836 39.3608 167.284 39.3608 cv
166.732 39.3608 166.284 38.9131 166.284 38.3608 cv
166.284 37.8091 166.732 37.3608 167.284 37.3608 cv
167.836 37.3608 168.284 37.8091 168.284 38.3608 cv
f
131.444 38.3608 mo
131.444 38.9131 130.996 39.3608 130.444 39.3608 cv
129.892 39.3608 129.444 38.9131 129.444 38.3608 cv
129.444 37.8091 129.892 37.3608 130.444 37.3608 cv
130.996 37.3608 131.444 37.8091 131.444 38.3608 cv
f
94.604 20.6011 mo
94.604 21.1528 94.1563 21.6011 93.604 21.6011 cv
93.0522 21.6011 92.604 21.1528 92.604 20.6011 cv
92.604 20.0488 93.0522 19.6011 93.604 19.6011 cv
94.1563 19.6011 94.604 20.0488 94.604 20.6011 cv
f
536.925 344.841 mo
536.925 345.393 536.476 345.841 535.925 345.841 cv
535.372 345.841 534.925 345.393 534.925 344.841 cv
534.925 344.289 535.372 343.841 535.925 343.841 cv
536.476 343.841 536.925 344.289 536.925 344.841 cv
f
499.964 330.561 mo
499.964 331.113 499.517 331.561 498.964 331.561 cv
498.413 331.561 497.964 331.113 497.964 330.561 cv
497.964 330.009 498.413 329.561 498.964 329.561 cv
499.517 329.561 499.964 330.009 499.964 330.561 cv
f
463.245 294.201 mo
463.245 294.753 462.796 295.201 462.245 295.201 cv
461.692 295.201 461.245 294.753 461.245 294.201 cv
461.245 293.649 461.692 293.201 462.245 293.201 cv
462.796 293.201 463.245 293.649 463.245 294.201 cv
f
426.403 277.881 mo
426.403 278.433 425.956 278.881 425.403 278.881 cv
424.853 278.881 424.403 278.433 424.403 277.881 cv
424.403 277.329 424.853 276.881 425.403 276.881 cv
425.956 276.881 426.403 277.329 426.403 277.881 cv
f
389.444 255.681 mo
389.444 256.233 388.997 256.681 388.444 256.681 cv
387.892 256.681 387.444 256.233 387.444 255.681 cv
387.444 255.129 387.892 254.681 388.444 254.681 cv
388.997 254.681 389.444 255.129 389.444 255.681 cv
f
352.604 245.48 mo
352.604 246.033 352.155 246.48 351.604 246.48 cv
351.052 246.48 350.604 246.033 350.604 245.48 cv
350.604 244.929 351.052 244.48 351.604 244.48 cv
352.155 244.48 352.604 244.929 352.604 245.48 cv
f
315.644 200.721 mo
315.644 201.273 315.196 201.721 314.644 201.721 cv
314.093 201.721 313.644 201.273 313.644 200.721 cv
313.644 200.169 314.093 199.721 314.644 199.721 cv
315.196 199.721 315.644 200.169 315.644 200.721 cv
f
278.924 194.481 mo
278.924 195.033 278.476 195.481 277.924 195.481 cv
277.372 195.481 276.924 195.033 276.924 194.481 cv
276.924 193.929 277.372 193.481 277.924 193.481 cv
278.476 193.481 278.924 193.929 278.924 194.481 cv
f
241.964 146.001 mo
241.964 146.553 241.516 147.001 240.964 147.001 cv
240.412 147.001 239.964 146.553 239.964 146.001 cv
239.964 145.449 240.412 145.001 240.964 145.001 cv
241.516 145.001 241.964 145.449 241.964 146.001 cv
f
205.244 57.3208 mo
205.244 57.873 204.796 58.3208 204.244 58.3208 cv
203.692 58.3208 203.244 57.873 203.244 57.3208 cv
203.244 56.769 203.692 56.3208 204.244 56.3208 cv
204.796 56.3208 205.244 56.769 205.244 57.3208 cv
f
168.284 34.2808 mo
168.284 34.833 167.836 35.2808 167.284 35.2808 cv
166.732 35.2808 166.284 34.833 166.284 34.2808 cv
166.284 33.729 166.732 33.2808 167.284 33.2808 cv
167.836 33.2808 168.284 33.729 168.284 34.2808 cv
f
536.925 346.041 mo
536.925 346.593 536.476 347.041 535.925 347.041 cv
535.372 347.041 534.925 346.593 534.925 346.041 cv
534.925 345.489 535.372 345.041 535.925 345.041 cv
536.476 345.041 536.925 345.489 536.925 346.041 cv
f
499.964 311.961 mo
499.964 312.513 499.517 312.961 498.964 312.961 cv
498.413 312.961 497.964 312.513 497.964 311.961 cv
497.964 311.409 498.413 310.961 498.964 310.961 cv
499.517 310.961 499.964 311.409 499.964 311.961 cv
f
463.245 314.121 mo
463.245 314.673 462.796 315.121 462.245 315.121 cv
461.692 315.121 461.245 314.673 461.245 314.121 cv
461.245 313.569 461.692 313.121 462.245 313.121 cv
462.796 313.121 463.245 313.569 463.245 314.121 cv
f
426.403 284.601 mo
426.403 285.153 425.956 285.601 425.403 285.601 cv
424.853 285.601 424.403 285.153 424.403 284.601 cv
424.403 284.049 424.853 283.601 425.403 283.601 cv
425.956 283.601 426.403 284.049 426.403 284.601 cv
f
389.444 263.241 mo
389.444 263.793 388.997 264.241 388.444 264.241 cv
387.892 264.241 387.444 263.793 387.444 263.241 cv
387.444 262.688 387.892 262.241 388.444 262.241 cv
388.997 262.241 389.444 262.688 389.444 263.241 cv
f
352.604 218.961 mo
352.604 219.513 352.155 219.961 351.604 219.961 cv
351.052 219.961 350.604 219.513 350.604 218.961 cv
350.604 218.409 351.052 217.961 351.604 217.961 cv
352.155 217.961 352.604 218.409 352.604 218.961 cv
f
315.644 211.521 mo
315.644 212.073 315.196 212.521 314.644 212.521 cv
314.093 212.521 313.644 212.073 313.644 211.521 cv
313.644 210.969 314.093 210.521 314.644 210.521 cv
315.196 210.521 315.644 210.969 315.644 211.521 cv
f
278.924 186.201 mo
278.924 186.753 278.476 187.201 277.924 187.201 cv
277.372 187.201 276.924 186.753 276.924 186.201 cv
276.924 185.649 277.372 185.201 277.924 185.201 cv
278.476 185.201 278.924 185.649 278.924 186.201 cv
f
241.964 157.761 mo
241.964 158.313 241.516 158.761 240.964 158.761 cv
240.412 158.761 239.964 158.313 239.964 157.761 cv
239.964 157.209 240.412 156.761 240.964 156.761 cv
241.516 156.761 241.964 157.209 241.964 157.761 cv
f
205.244 71.6011 mo
205.244 72.1528 204.796 72.6011 204.244 72.6011 cv
203.692 72.6011 203.244 72.1528 203.244 71.6011 cv
203.244 71.0488 203.692 70.6011 204.244 70.6011 cv
204.796 70.6011 205.244 71.0488 205.244 71.6011 cv
f
168.284 54.4409 mo
168.284 54.9932 167.836 55.4409 167.284 55.4409 cv
166.732 55.4409 166.284 54.9932 166.284 54.4409 cv
166.284 53.8892 166.732 53.4409 167.284 53.4409 cv
167.836 53.4409 168.284 53.8892 168.284 54.4409 cv
f
131.444 25.8809 mo
131.444 26.4331 130.996 26.8809 130.444 26.8809 cv
129.892 26.8809 129.444 26.4331 129.444 25.8809 cv
129.444 25.3291 129.892 24.8809 130.444 24.8809 cv
130.996 24.8809 131.444 25.3291 131.444 25.8809 cv
f
94.604 20.481 mo
94.604 21.0327 94.1563 21.481 93.604 21.481 cv
93.0522 21.481 92.604 21.0327 92.604 20.481 cv
92.604 19.9287 93.0522 19.481 93.604 19.481 cv
94.1563 19.481 94.604 19.9287 94.604 20.481 cv
f
536.925 335.241 mo
536.925 335.793 536.476 336.241 535.925 336.241 cv
535.372 336.241 534.925 335.793 534.925 335.241 cv
534.925 334.688 535.372 334.241 535.925 334.241 cv
536.476 334.241 536.925 334.688 536.925 335.241 cv
f
499.964 332.121 mo
499.964 332.673 499.517 333.121 498.964 333.121 cv
498.413 333.121 497.964 332.673 497.964 332.121 cv
497.964 331.569 498.413 331.121 498.964 331.121 cv
499.517 331.121 499.964 331.569 499.964 332.121 cv
f
463.245 315.081 mo
463.245 315.633 462.796 316.081 462.245 316.081 cv
461.692 316.081 461.245 315.633 461.245 315.081 cv
461.245 314.529 461.692 314.081 462.245 314.081 cv
462.796 314.081 463.245 314.529 463.245 315.081 cv
f
426.403 268.761 mo
426.403 269.313 425.956 269.761 425.403 269.761 cv
424.853 269.761 424.403 269.313 424.403 268.761 cv
424.403 268.209 424.853 267.761 425.403 267.761 cv
425.956 267.761 426.403 268.209 426.403 268.761 cv
f
389.444 256.521 mo
389.444 257.073 388.997 257.521 388.444 257.521 cv
387.892 257.521 387.444 257.073 387.444 256.521 cv
387.444 255.969 387.892 255.521 388.444 255.521 cv
388.997 255.521 389.444 255.969 389.444 256.521 cv
f
352.604 238.761 mo
352.604 239.313 352.155 239.761 351.604 239.761 cv
351.052 239.761 350.604 239.313 350.604 238.761 cv
350.604 238.209 351.052 237.761 351.604 237.761 cv
352.155 237.761 352.604 238.209 352.604 238.761 cv
f
315.644 212.241 mo
315.644 212.793 315.196 213.241 314.644 213.241 cv
314.093 213.241 313.644 212.793 313.644 212.241 cv
313.644 211.689 314.093 211.241 314.644 211.241 cv
315.196 211.241 315.644 211.689 315.644 212.241 cv
f
278.924 203.721 mo
278.924 204.273 278.476 204.721 277.924 204.721 cv
277.372 204.721 276.924 204.273 276.924 203.721 cv
276.924 203.169 277.372 202.721 277.924 202.721 cv
278.476 202.721 278.924 203.169 278.924 203.721 cv
f
241.964 158.481 mo
241.964 159.033 241.516 159.481 240.964 159.481 cv
240.412 159.481 239.964 159.033 239.964 158.481 cv
239.964 157.929 240.412 157.481 240.964 157.481 cv
241.516 157.481 241.964 157.929 241.964 158.481 cv
f
205.244 63.561 mo
205.244 64.1128 204.796 64.561 204.244 64.561 cv
203.692 64.561 203.244 64.1128 203.244 63.561 cv
203.244 63.0088 203.692 62.561 204.244 62.561 cv
204.796 62.561 205.244 63.0088 205.244 63.561 cv
f
168.284 27.3208 mo
168.284 27.873 167.836 28.3208 167.284 28.3208 cv
166.732 28.3208 166.284 27.873 166.284 27.3208 cv
166.284 26.769 166.732 26.3208 167.284 26.3208 cv
167.836 26.3208 168.284 26.769 168.284 27.3208 cv
f
536.925 352.761 mo
536.925 353.313 536.476 353.761 535.925 353.761 cv
535.372 353.761 534.925 353.313 534.925 352.761 cv
534.925 352.209 535.372 351.761 535.925 351.761 cv
536.476 351.761 536.925 352.209 536.925 352.761 cv
f
499.964 318.681 mo
499.964 319.233 499.517 319.681 498.964 319.681 cv
498.413 319.681 497.964 319.233 497.964 318.681 cv
497.964 318.129 498.413 317.681 498.964 317.681 cv
499.517 317.681 499.964 318.129 499.964 318.681 cv
f
463.245 299.361 mo
463.245 299.913 462.796 300.361 462.245 300.361 cv
461.692 300.361 461.245 299.913 461.245 299.361 cv
461.245 298.809 461.692 298.361 462.245 298.361 cv
462.796 298.361 463.245 298.809 463.245 299.361 cv
f
426.403 280.281 mo
426.403 280.833 425.956 281.281 425.403 281.281 cv
424.853 281.281 424.403 280.833 424.403 280.281 cv
424.403 279.729 424.853 279.281 425.403 279.281 cv
425.956 279.281 426.403 279.729 426.403 280.281 cv
f
389.444 254.361 mo
389.444 254.913 388.997 255.361 388.444 255.361 cv
387.892 255.361 387.444 254.913 387.444 254.361 cv
387.444 253.809 387.892 253.361 388.444 253.361 cv
388.997 253.361 389.444 253.809 389.444 254.361 cv
f
352.604 240.081 mo
352.604 240.633 352.155 241.081 351.604 241.081 cv
351.052 241.081 350.604 240.633 350.604 240.081 cv
350.604 239.529 351.052 239.081 351.604 239.081 cv
352.155 239.081 352.604 239.529 352.604 240.081 cv
f
315.644 216.441 mo
315.644 216.993 315.196 217.441 314.644 217.441 cv
314.093 217.441 313.644 216.993 313.644 216.441 cv
313.644 215.889 314.093 215.441 314.644 215.441 cv
315.196 215.441 315.644 215.889 315.644 216.441 cv
f
278.924 202.641 mo
278.924 203.193 278.476 203.641 277.924 203.641 cv
277.372 203.641 276.924 203.193 276.924 202.641 cv
276.924 202.089 277.372 201.641 277.924 201.641 cv
278.476 201.641 278.924 202.089 278.924 202.641 cv
f
241.964 146.241 mo
241.964 146.793 241.516 147.241 240.964 147.241 cv
240.412 147.241 239.964 146.793 239.964 146.241 cv
239.964 145.689 240.412 145.241 240.964 145.241 cv
241.516 145.241 241.964 145.689 241.964 146.241 cv
f
205.244 70.041 mo
205.244 70.5928 204.796 71.041 204.244 71.041 cv
203.692 71.041 203.244 70.5928 203.244 70.041 cv
203.244 69.4888 203.692 69.041 204.244 69.041 cv
204.796 69.041 205.244 69.4888 205.244 70.041 cv
f
168.284 47.2407 mo
168.284 47.793 167.836 48.2407 167.284 48.2407 cv
166.732 48.2407 166.284 47.793 166.284 47.2407 cv
166.284 46.689 166.732 46.2407 167.284 46.2407 cv
167.836 46.2407 168.284 46.689 168.284 47.2407 cv
f
131.444 38.3608 mo
131.444 38.9131 130.996 39.3608 130.444 39.3608 cv
129.892 39.3608 129.444 38.9131 129.444 38.3608 cv
129.444 37.8091 129.892 37.3608 130.444 37.3608 cv
130.996 37.3608 131.444 37.8091 131.444 38.3608 cv
f
536.925 341.001 mo
536.925 341.553 536.476 342.001 535.925 342.001 cv
535.372 342.001 534.925 341.553 534.925 341.001 cv
534.925 340.449 535.372 340.001 535.925 340.001 cv
536.476 340.001 536.925 340.449 536.925 341.001 cv
f
499.964 328.041 mo
499.964 328.593 499.517 329.041 498.964 329.041 cv
498.413 329.041 497.964 328.593 497.964 328.041 cv
497.964 327.489 498.413 327.041 498.964 327.041 cv
499.517 327.041 499.964 327.489 499.964 328.041 cv
f
463.245 290.361 mo
463.245 290.913 462.796 291.361 462.245 291.361 cv
461.692 291.361 461.245 290.913 461.245 290.361 cv
461.245 289.809 461.692 289.361 462.245 289.361 cv
462.796 289.361 463.245 289.809 463.245 290.361 cv
f
426.403 275.241 mo
426.403 275.793 425.956 276.241 425.403 276.241 cv
424.853 276.241 424.403 275.793 424.403 275.241 cv
424.403 274.688 424.853 274.241 425.403 274.241 cv
425.956 274.241 426.403 274.688 426.403 275.241 cv
f
389.444 250.281 mo
389.444 250.833 388.997 251.281 388.444 251.281 cv
387.892 251.281 387.444 250.833 387.444 250.281 cv
387.444 249.729 387.892 249.281 388.444 249.281 cv
388.997 249.281 389.444 249.729 389.444 250.281 cv
f
352.604 234.561 mo
352.604 235.113 352.155 235.561 351.604 235.561 cv
351.052 235.561 350.604 235.113 350.604 234.561 cv
350.604 234.009 351.052 233.561 351.604 233.561 cv
352.155 233.561 352.604 234.009 352.604 234.561 cv
f
315.644 220.401 mo
315.644 220.953 315.196 221.401 314.644 221.401 cv
314.093 221.401 313.644 220.953 313.644 220.401 cv
313.644 219.849 314.093 219.401 314.644 219.401 cv
315.196 219.401 315.644 219.849 315.644 220.401 cv
f
278.924 195.801 mo
278.924 196.353 278.476 196.801 277.924 196.801 cv
277.372 196.801 276.924 196.353 276.924 195.801 cv
276.924 195.249 277.372 194.801 277.924 194.801 cv
278.476 194.801 278.924 195.249 278.924 195.801 cv
f
241.964 158.961 mo
241.964 159.513 241.516 159.961 240.964 159.961 cv
240.412 159.961 239.964 159.513 239.964 158.961 cv
239.964 158.409 240.412 157.961 240.964 157.961 cv
241.516 157.961 241.964 158.409 241.964 158.961 cv
f
205.244 63.9209 mo
205.244 64.4731 204.796 64.9209 204.244 64.9209 cv
203.692 64.9209 203.244 64.4731 203.244 63.9209 cv
203.244 63.3691 203.692 62.9209 204.244 62.9209 cv
204.796 62.9209 205.244 63.3691 205.244 63.9209 cv
f
168.284 38.1211 mo
168.284 38.6729 167.836 39.1211 167.284 39.1211 cv
166.732 39.1211 166.284 38.6729 166.284 38.1211 cv
166.284 37.5688 166.732 37.1211 167.284 37.1211 cv
167.836 37.1211 168.284 37.5688 168.284 38.1211 cv
f
131.444 22.041 mo
131.444 22.5928 130.996 23.041 130.444 23.041 cv
129.892 23.041 129.444 22.5928 129.444 22.041 cv
129.444 21.4888 129.892 21.041 130.444 21.041 cv
130.996 21.041 131.444 21.4888 131.444 22.041 cv
f
536.925 337.881 mo
536.925 338.433 536.476 338.881 535.925 338.881 cv
535.372 338.881 534.925 338.433 534.925 337.881 cv
534.925 337.329 535.372 336.881 535.925 336.881 cv
536.476 336.881 536.925 337.329 536.925 337.881 cv
f
499.964 325.041 mo
499.964 325.593 499.517 326.041 498.964 326.041 cv
498.413 326.041 497.964 325.593 497.964 325.041 cv
497.964 324.489 498.413 324.041 498.964 324.041 cv
499.517 324.041 499.964 324.489 499.964 325.041 cv
f
463.245 297.321 mo
463.245 297.873 462.796 298.321 462.245 298.321 cv
461.692 298.321 461.245 297.873 461.245 297.321 cv
461.245 296.769 461.692 296.321 462.245 296.321 cv
462.796 296.321 463.245 296.769 463.245 297.321 cv
f
426.403 270.441 mo
426.403 270.993 425.956 271.441 425.403 271.441 cv
424.853 271.441 424.403 270.993 424.403 270.441 cv
424.403 269.889 424.853 269.441 425.403 269.441 cv
425.956 269.441 426.403 269.889 426.403 270.441 cv
f
389.444 260.121 mo
389.444 260.673 388.997 261.121 388.444 261.121 cv
387.892 261.121 387.444 260.673 387.444 260.121 cv
387.444 259.569 387.892 259.121 388.444 259.121 cv
388.997 259.121 389.444 259.569 389.444 260.121 cv
f
352.604 243.441 mo
352.604 243.993 352.155 244.441 351.604 244.441 cv
351.052 244.441 350.604 243.993 350.604 243.441 cv
350.604 242.889 351.052 242.441 351.604 242.441 cv
352.155 242.441 352.604 242.889 352.604 243.441 cv
f
315.644 213.561 mo
315.644 214.113 315.196 214.561 314.644 214.561 cv
314.093 214.561 313.644 214.113 313.644 213.561 cv
313.644 213.009 314.093 212.561 314.644 212.561 cv
315.196 212.561 315.644 213.009 315.644 213.561 cv
f
278.924 191.001 mo
278.924 191.553 278.476 192.001 277.924 192.001 cv
277.372 192.001 276.924 191.553 276.924 191.001 cv
276.924 190.449 277.372 190.001 277.924 190.001 cv
278.476 190.001 278.924 190.449 278.924 191.001 cv
f
241.964 159.561 mo
241.964 160.113 241.516 160.561 240.964 160.561 cv
240.412 160.561 239.964 160.113 239.964 159.561 cv
239.964 159.009 240.412 158.561 240.964 158.561 cv
241.516 158.561 241.964 159.009 241.964 159.561 cv
f
205.244 75.561 mo
205.244 76.1128 204.796 76.561 204.244 76.561 cv
203.692 76.561 203.244 76.1128 203.244 75.561 cv
203.244 75.0088 203.692 74.561 204.244 74.561 cv
204.796 74.561 205.244 75.0088 205.244 75.561 cv
f
168.284 39.3208 mo
168.284 39.873 167.836 40.3208 167.284 40.3208 cv
166.732 40.3208 166.284 39.873 166.284 39.3208 cv
166.284 38.769 166.732 38.3208 167.284 38.3208 cv
167.836 38.3208 168.284 38.769 168.284 39.3208 cv
f
131.444 50.9609 mo
131.444 51.5127 130.996 51.9609 130.444 51.9609 cv
129.892 51.9609 129.444 51.5127 129.444 50.9609 cv
129.444 50.4092 129.892 49.9609 130.444 49.9609 cv
130.996 49.9609 131.444 50.4092 131.444 50.9609 cv
f
536.925 334.641 mo
536.925 335.193 536.476 335.641 535.925 335.641 cv
535.372 335.641 534.925 335.193 534.925 334.641 cv
534.925 334.089 535.372 333.641 535.925 333.641 cv
536.476 333.641 536.925 334.089 536.925 334.641 cv
f
499.964 318.081 mo
499.964 318.633 499.517 319.081 498.964 319.081 cv
498.413 319.081 497.964 318.633 497.964 318.081 cv
497.964 317.529 498.413 317.081 498.964 317.081 cv
499.517 317.081 499.964 317.529 499.964 318.081 cv
f
463.245 312.201 mo
463.245 312.753 462.796 313.201 462.245 313.201 cv
461.692 313.201 461.245 312.753 461.245 312.201 cv
461.245 311.649 461.692 311.201 462.245 311.201 cv
462.796 311.201 463.245 311.649 463.245 312.201 cv
f
426.403 267.561 mo
426.403 268.113 425.956 268.561 425.403 268.561 cv
424.853 268.561 424.403 268.113 424.403 267.561 cv
424.403 267.009 424.853 266.561 425.403 266.561 cv
425.956 266.561 426.403 267.009 426.403 267.561 cv
f
389.444 253.881 mo
389.444 254.433 388.997 254.881 388.444 254.881 cv
387.892 254.881 387.444 254.433 387.444 253.881 cv
387.444 253.329 387.892 252.881 388.444 252.881 cv
388.997 252.881 389.444 253.329 389.444 253.881 cv
f
352.604 250.281 mo
352.604 250.833 352.155 251.281 351.604 251.281 cv
351.052 251.281 350.604 250.833 350.604 250.281 cv
350.604 249.729 351.052 249.281 351.604 249.281 cv
352.155 249.281 352.604 249.729 352.604 250.281 cv
f
315.644 213.561 mo
315.644 214.113 315.196 214.561 314.644 214.561 cv
314.093 214.561 313.644 214.113 313.644 213.561 cv
313.644 213.009 314.093 212.561 314.644 212.561 cv
315.196 212.561 315.644 213.009 315.644 213.561 cv
f
278.924 173.961 mo
278.924 174.513 278.476 174.961 277.924 174.961 cv
277.372 174.961 276.924 174.513 276.924 173.961 cv
276.924 173.409 277.372 172.961 277.924 172.961 cv
278.476 172.961 278.924 173.409 278.924 173.961 cv
f
241.964 170.841 mo
241.964 171.393 241.516 171.841 240.964 171.841 cv
240.412 171.841 239.964 171.393 239.964 170.841 cv
239.964 170.289 240.412 169.841 240.964 169.841 cv
241.516 169.841 241.964 170.289 241.964 170.841 cv
f
205.244 60.6812 mo
205.244 61.2329 204.796 61.6812 204.244 61.6812 cv
203.692 61.6812 203.244 61.2329 203.244 60.6812 cv
203.244 60.1289 203.692 59.6812 204.244 59.6812 cv
204.796 59.6812 205.244 60.1289 205.244 60.6812 cv
f
168.284 44.6011 mo
168.284 45.1528 167.836 45.6011 167.284 45.6011 cv
166.732 45.6011 166.284 45.1528 166.284 44.6011 cv
166.284 44.0488 166.732 43.6011 167.284 43.6011 cv
167.836 43.6011 168.284 44.0488 168.284 44.6011 cv
f
131.444 29.9609 mo
131.444 30.5127 130.996 30.9609 130.444 30.9609 cv
129.892 30.9609 129.444 30.5127 129.444 29.9609 cv
129.444 29.4092 129.892 28.9609 130.444 28.9609 cv
130.996 28.9609 131.444 29.4092 131.444 29.9609 cv
f
94.604 20.6011 mo
94.604 21.1528 94.1563 21.6011 93.604 21.6011 cv
93.0522 21.6011 92.604 21.1528 92.604 20.6011 cv
92.604 20.0488 93.0522 19.6011 93.604 19.6011 cv
94.1563 19.6011 94.604 20.0488 94.604 20.6011 cv
f
536.925 346.161 mo
536.925 346.713 536.476 347.161 535.925 347.161 cv
535.372 347.161 534.925 346.713 534.925 346.161 cv
534.925 345.609 535.372 345.161 535.925 345.161 cv
536.476 345.161 536.925 345.609 536.925 346.161 cv
f
499.964 326.001 mo
499.964 326.553 499.517 327.001 498.964 327.001 cv
498.413 327.001 497.964 326.553 497.964 326.001 cv
497.964 325.449 498.413 325.001 498.964 325.001 cv
499.517 325.001 499.964 325.449 499.964 326.001 cv
f
463.245 305.001 mo
463.245 305.553 462.796 306.001 462.245 306.001 cv
461.692 306.001 461.245 305.553 461.245 305.001 cv
461.245 304.449 461.692 304.001 462.245 304.001 cv
462.796 304.001 463.245 304.449 463.245 305.001 cv
f
426.403 280.281 mo
426.403 280.833 425.956 281.281 425.403 281.281 cv
424.853 281.281 424.403 280.833 424.403 280.281 cv
424.403 279.729 424.853 279.281 425.403 279.281 cv
425.956 279.281 426.403 279.729 426.403 280.281 cv
f
389.444 256.641 mo
389.444 257.193 388.997 257.641 388.444 257.641 cv
387.892 257.641 387.444 257.193 387.444 256.641 cv
387.444 256.089 387.892 255.641 388.444 255.641 cv
388.997 255.641 389.444 256.089 389.444 256.641 cv
f
352.604 236.841 mo
352.604 237.393 352.155 237.841 351.604 237.841 cv
351.052 237.841 350.604 237.393 350.604 236.841 cv
350.604 236.289 351.052 235.841 351.604 235.841 cv
352.155 235.841 352.604 236.289 352.604 236.841 cv
f
315.644 215.241 mo
315.644 215.793 315.196 216.241 314.644 216.241 cv
314.093 216.241 313.644 215.793 313.644 215.241 cv
313.644 214.688 314.093 214.241 314.644 214.241 cv
315.196 214.241 315.644 214.688 315.644 215.241 cv
f
278.924 191.361 mo
278.924 191.913 278.476 192.361 277.924 192.361 cv
277.372 192.361 276.924 191.913 276.924 191.361 cv
276.924 190.809 277.372 190.361 277.924 190.361 cv
278.476 190.361 278.924 190.809 278.924 191.361 cv
f
241.964 143.961 mo
241.964 144.513 241.516 144.961 240.964 144.961 cv
240.412 144.961 239.964 144.513 239.964 143.961 cv
239.964 143.409 240.412 142.961 240.964 142.961 cv
241.516 142.961 241.964 143.409 241.964 143.961 cv
f
205.244 90.3208 mo
205.244 90.873 204.796 91.3208 204.244 91.3208 cv
203.692 91.3208 203.244 90.873 203.244 90.3208 cv
203.244 89.769 203.692 89.3208 204.244 89.3208 cv
204.796 89.3208 205.244 89.769 205.244 90.3208 cv
f
168.284 51.9209 mo
168.284 52.4731 167.836 52.9209 167.284 52.9209 cv
166.732 52.9209 166.284 52.4731 166.284 51.9209 cv
166.284 51.3691 166.732 50.9209 167.284 50.9209 cv
167.836 50.9209 168.284 51.3691 168.284 51.9209 cv
f
131.444 28.2808 mo
131.444 28.833 130.996 29.2808 130.444 29.2808 cv
129.892 29.2808 129.444 28.833 129.444 28.2808 cv
129.444 27.729 129.892 27.2808 130.444 27.2808 cv
130.996 27.2808 131.444 27.729 131.444 28.2808 cv
f
94.604 20.481 mo
94.604 21.0327 94.1563 21.481 93.604 21.481 cv
93.0522 21.481 92.604 21.0327 92.604 20.481 cv
92.604 19.9287 93.0522 19.481 93.604 19.481 cv
94.1563 19.481 94.604 19.9287 94.604 20.481 cv
f
536.925 346.641 mo
536.925 347.193 536.476 347.641 535.925 347.641 cv
535.372 347.641 534.925 347.193 534.925 346.641 cv
534.925 346.089 535.372 345.641 535.925 345.641 cv
536.476 345.641 536.925 346.089 536.925 346.641 cv
f
499.964 329.961 mo
499.964 330.513 499.517 330.961 498.964 330.961 cv
498.413 330.961 497.964 330.513 497.964 329.961 cv
497.964 329.409 498.413 328.961 498.964 328.961 cv
499.517 328.961 499.964 329.409 499.964 329.961 cv
f
463.245 303.321 mo
463.245 303.873 462.796 304.321 462.245 304.321 cv
461.692 304.321 461.245 303.873 461.245 303.321 cv
461.245 302.769 461.692 302.321 462.245 302.321 cv
462.796 302.321 463.245 302.769 463.245 303.321 cv
f
426.403 275.48 mo
426.403 276.033 425.956 276.48 425.403 276.48 cv
424.853 276.48 424.403 276.033 424.403 275.48 cv
424.403 274.929 424.853 274.48 425.403 274.48 cv
425.956 274.48 426.403 274.929 426.403 275.48 cv
f
389.444 256.041 mo
389.444 256.593 388.997 257.041 388.444 257.041 cv
387.892 257.041 387.444 256.593 387.444 256.041 cv
387.444 255.489 387.892 255.041 388.444 255.041 cv
388.997 255.041 389.444 255.489 389.444 256.041 cv
f
352.604 233.241 mo
352.604 233.793 352.155 234.241 351.604 234.241 cv
351.052 234.241 350.604 233.793 350.604 233.241 cv
350.604 232.688 351.052 232.241 351.604 232.241 cv
352.155 232.241 352.604 232.688 352.604 233.241 cv
f
315.644 212.121 mo
315.644 212.673 315.196 213.121 314.644 213.121 cv
314.093 213.121 313.644 212.673 313.644 212.121 cv
313.644 211.569 314.093 211.121 314.644 211.121 cv
315.196 211.121 315.644 211.569 315.644 212.121 cv
f
278.924 199.041 mo
278.924 199.593 278.476 200.041 277.924 200.041 cv
277.372 200.041 276.924 199.593 276.924 199.041 cv
276.924 198.489 277.372 198.041 277.924 198.041 cv
278.476 198.041 278.924 198.489 278.924 199.041 cv
f
241.964 168.681 mo
241.964 169.233 241.516 169.681 240.964 169.681 cv
240.412 169.681 239.964 169.233 239.964 168.681 cv
239.964 168.129 240.412 167.681 240.964 167.681 cv
241.516 167.681 241.964 168.129 241.964 168.681 cv
f
205.244 84.4409 mo
205.244 84.9932 204.796 85.4409 204.244 85.4409 cv
203.692 85.4409 203.244 84.9932 203.244 84.4409 cv
203.244 83.8892 203.692 83.4409 204.244 83.4409 cv
204.796 83.4409 205.244 83.8892 205.244 84.4409 cv
f
168.284 46.521 mo
168.284 47.0728 167.836 47.521 167.284 47.521 cv
166.732 47.521 166.284 47.0728 166.284 46.521 cv
166.284 45.9688 166.732 45.521 167.284 45.521 cv
167.836 45.521 168.284 45.9688 168.284 46.521 cv
f
536.925 342.681 mo
536.925 343.233 536.476 343.681 535.925 343.681 cv
535.372 343.681 534.925 343.233 534.925 342.681 cv
534.925 342.129 535.372 341.681 535.925 341.681 cv
536.476 341.681 536.925 342.129 536.925 342.681 cv
f
499.964 306.801 mo
499.964 307.353 499.517 307.801 498.964 307.801 cv
498.413 307.801 497.964 307.353 497.964 306.801 cv
497.964 306.249 498.413 305.801 498.964 305.801 cv
499.517 305.801 499.964 306.249 499.964 306.801 cv
f
463.245 306.681 mo
463.245 307.233 462.796 307.681 462.245 307.681 cv
461.692 307.681 461.245 307.233 461.245 306.681 cv
461.245 306.129 461.692 305.681 462.245 305.681 cv
462.796 305.681 463.245 306.129 463.245 306.681 cv
f
426.403 263.48 mo
426.403 264.033 425.956 264.48 425.403 264.48 cv
424.853 264.48 424.403 264.033 424.403 263.48 cv
424.403 262.929 424.853 262.48 425.403 262.48 cv
425.956 262.48 426.403 262.929 426.403 263.48 cv
f
389.444 254.841 mo
389.444 255.393 388.997 255.841 388.444 255.841 cv
387.892 255.841 387.444 255.393 387.444 254.841 cv
387.444 254.289 387.892 253.841 388.444 253.841 cv
388.997 253.841 389.444 254.289 389.444 254.841 cv
f
352.604 231.441 mo
352.604 231.993 352.155 232.441 351.604 232.441 cv
351.052 232.441 350.604 231.993 350.604 231.441 cv
350.604 230.889 351.052 230.441 351.604 230.441 cv
352.155 230.441 352.604 230.889 352.604 231.441 cv
f
315.644 222.201 mo
315.644 222.753 315.196 223.201 314.644 223.201 cv
314.093 223.201 313.644 222.753 313.644 222.201 cv
313.644 221.648 314.093 221.201 314.644 221.201 cv
315.196 221.201 315.644 221.648 315.644 222.201 cv
f
278.924 193.641 mo
278.924 194.193 278.476 194.641 277.924 194.641 cv
277.372 194.641 276.924 194.193 276.924 193.641 cv
276.924 193.089 277.372 192.641 277.924 192.641 cv
278.476 192.641 278.924 193.089 278.924 193.641 cv
f
241.964 166.521 mo
241.964 167.073 241.516 167.521 240.964 167.521 cv
240.412 167.521 239.964 167.073 239.964 166.521 cv
239.964 165.969 240.412 165.521 240.964 165.521 cv
241.516 165.521 241.964 165.969 241.964 166.521 cv
f
205.244 93.2012 mo
205.244 93.7529 204.796 94.2012 204.244 94.2012 cv
203.692 94.2012 203.244 93.7529 203.244 93.2012 cv
203.244 92.6489 203.692 92.2012 204.244 92.2012 cv
204.796 92.2012 205.244 92.6489 205.244 93.2012 cv
f
168.284 56.3608 mo
168.284 56.9131 167.836 57.3608 167.284 57.3608 cv
166.732 57.3608 166.284 56.9131 166.284 56.3608 cv
166.284 55.8091 166.732 55.3608 167.284 55.3608 cv
167.836 55.3608 168.284 55.8091 168.284 56.3608 cv
f
131.444 24.8008 mo
131.444 25.353 130.996 25.8008 130.444 25.8008 cv
129.892 25.8008 129.444 25.353 129.444 24.8008 cv
129.444 24.249 129.892 23.8008 130.444 23.8008 cv
130.996 23.8008 131.444 24.249 131.444 24.8008 cv
f
536.925 341.001 mo
536.925 341.553 536.476 342.001 535.925 342.001 cv
535.372 342.001 534.925 341.553 534.925 341.001 cv
534.925 340.449 535.372 340.001 535.925 340.001 cv
536.476 340.001 536.925 340.449 536.925 341.001 cv
f
499.964 328.761 mo
499.964 329.313 499.517 329.761 498.964 329.761 cv
498.413 329.761 497.964 329.313 497.964 328.761 cv
497.964 328.209 498.413 327.761 498.964 327.761 cv
499.517 327.761 499.964 328.209 499.964 328.761 cv
f
463.245 306.921 mo
463.245 307.473 462.796 307.921 462.245 307.921 cv
461.692 307.921 461.245 307.473 461.245 306.921 cv
461.245 306.369 461.692 305.921 462.245 305.921 cv
462.796 305.921 463.245 306.369 463.245 306.921 cv
f
426.403 274.521 mo
426.403 275.073 425.956 275.521 425.403 275.521 cv
424.853 275.521 424.403 275.073 424.403 274.521 cv
424.403 273.969 424.853 273.521 425.403 273.521 cv
425.956 273.521 426.403 273.969 426.403 274.521 cv
f
389.444 262.041 mo
389.444 262.593 388.997 263.041 388.444 263.041 cv
387.892 263.041 387.444 262.593 387.444 262.041 cv
387.444 261.489 387.892 261.041 388.444 261.041 cv
388.997 261.041 389.444 261.489 389.444 262.041 cv
f
352.604 241.401 mo
352.604 241.953 352.155 242.401 351.604 242.401 cv
351.052 242.401 350.604 241.953 350.604 241.401 cv
350.604 240.849 351.052 240.401 351.604 240.401 cv
352.155 240.401 352.604 240.849 352.604 241.401 cv
f
315.644 217.881 mo
315.644 218.433 315.196 218.881 314.644 218.881 cv
314.093 218.881 313.644 218.433 313.644 217.881 cv
313.644 217.329 314.093 216.881 314.644 216.881 cv
315.196 216.881 315.644 217.329 315.644 217.881 cv
f
278.924 196.281 mo
278.924 196.833 278.476 197.281 277.924 197.281 cv
277.372 197.281 276.924 196.833 276.924 196.281 cv
276.924 195.729 277.372 195.281 277.924 195.281 cv
278.476 195.281 278.924 195.729 278.924 196.281 cv
f
241.964 156.081 mo
241.964 156.633 241.516 157.081 240.964 157.081 cv
240.412 157.081 239.964 156.633 239.964 156.081 cv
239.964 155.529 240.412 155.081 240.964 155.081 cv
241.516 155.081 241.964 155.529 241.964 156.081 cv
f
205.244 68.6011 mo
205.244 69.1528 204.796 69.6011 204.244 69.6011 cv
203.692 69.6011 203.244 69.1528 203.244 68.6011 cv
203.244 68.0488 203.692 67.6011 204.244 67.6011 cv
204.796 67.6011 205.244 68.0488 205.244 68.6011 cv
f
168.284 39.2012 mo
168.284 39.7529 167.836 40.2012 167.284 40.2012 cv
166.732 40.2012 166.284 39.7529 166.284 39.2012 cv
166.284 38.6489 166.732 38.2012 167.284 38.2012 cv
167.836 38.2012 168.284 38.6489 168.284 39.2012 cv
f
131.444 26.7207 mo
131.444 27.2729 130.996 27.7207 130.444 27.7207 cv
129.892 27.7207 129.444 27.2729 129.444 26.7207 cv
129.444 26.1689 129.892 25.7207 130.444 25.7207 cv
130.996 25.7207 131.444 26.1689 131.444 26.7207 cv
f
94.604 20.481 mo
94.604 21.0327 94.1563 21.481 93.604 21.481 cv
93.0522 21.481 92.604 21.0327 92.604 20.481 cv
92.604 19.9287 93.0522 19.481 93.604 19.481 cv
94.1563 19.481 94.604 19.9287 94.604 20.481 cv
f
536.925 338.361 mo
536.925 338.913 536.476 339.361 535.925 339.361 cv
535.372 339.361 534.925 338.913 534.925 338.361 cv
534.925 337.809 535.372 337.361 535.925 337.361 cv
536.476 337.361 536.925 337.809 536.925 338.361 cv
f
499.964 318.081 mo
499.964 318.633 499.517 319.081 498.964 319.081 cv
498.413 319.081 497.964 318.633 497.964 318.081 cv
497.964 317.529 498.413 317.081 498.964 317.081 cv
499.517 317.081 499.964 317.529 499.964 318.081 cv
f
463.245 297.801 mo
463.245 298.353 462.796 298.801 462.245 298.801 cv
461.692 298.801 461.245 298.353 461.245 297.801 cv
461.245 297.249 461.692 296.801 462.245 296.801 cv
462.796 296.801 463.245 297.249 463.245 297.801 cv
f
426.403 280.281 mo
426.403 280.833 425.956 281.281 425.403 281.281 cv
424.853 281.281 424.403 280.833 424.403 280.281 cv
424.403 279.729 424.853 279.281 425.403 279.281 cv
425.956 279.281 426.403 279.729 426.403 280.281 cv
f
389.444 235.761 mo
389.444 236.313 388.997 236.761 388.444 236.761 cv
387.892 236.761 387.444 236.313 387.444 235.761 cv
387.444 235.209 387.892 234.761 388.444 234.761 cv
388.997 234.761 389.444 235.209 389.444 235.761 cv
f
352.604 233.721 mo
352.604 234.272 352.155 234.721 351.604 234.721 cv
351.052 234.721 350.604 234.272 350.604 233.721 cv
350.604 233.169 351.052 232.721 351.604 232.721 cv
352.155 232.721 352.604 233.169 352.604 233.721 cv
f
315.644 224.241 mo
315.644 224.793 315.196 225.241 314.644 225.241 cv
314.093 225.241 313.644 224.793 313.644 224.241 cv
313.644 223.688 314.093 223.241 314.644 223.241 cv
315.196 223.241 315.644 223.688 315.644 224.241 cv
f
278.924 202.401 mo
278.924 202.953 278.476 203.401 277.924 203.401 cv
277.372 203.401 276.924 202.953 276.924 202.401 cv
276.924 201.849 277.372 201.401 277.924 201.401 cv
278.476 201.401 278.924 201.849 278.924 202.401 cv
f
241.964 163.641 mo
241.964 164.193 241.516 164.641 240.964 164.641 cv
240.412 164.641 239.964 164.193 239.964 163.641 cv
239.964 163.089 240.412 162.641 240.964 162.641 cv
241.516 162.641 241.964 163.089 241.964 163.641 cv
f
205.244 93.9209 mo
205.244 94.4731 204.796 94.9209 204.244 94.9209 cv
203.692 94.9209 203.244 94.4731 203.244 93.9209 cv
203.244 93.3691 203.692 92.9209 204.244 92.9209 cv
204.796 92.9209 205.244 93.3691 205.244 93.9209 cv
f
168.284 55.6411 mo
168.284 56.1929 167.836 56.6411 167.284 56.6411 cv
166.732 56.6411 166.284 56.1929 166.284 55.6411 cv
166.284 55.0889 166.732 54.6411 167.284 54.6411 cv
167.836 54.6411 168.284 55.0889 168.284 55.6411 cv
f
131.444 46.041 mo
131.444 46.5928 130.996 47.041 130.444 47.041 cv
129.892 47.041 129.444 46.5928 129.444 46.041 cv
129.444 45.4888 129.892 45.041 130.444 45.041 cv
130.996 45.041 131.444 45.4888 131.444 46.041 cv
f
536.925 343.521 mo
536.925 344.073 536.476 344.521 535.925 344.521 cv
535.372 344.521 534.925 344.073 534.925 343.521 cv
534.925 342.969 535.372 342.521 535.925 342.521 cv
536.476 342.521 536.925 342.969 536.925 343.521 cv
f
499.964 321.081 mo
499.964 321.633 499.517 322.081 498.964 322.081 cv
498.413 322.081 497.964 321.633 497.964 321.081 cv
497.964 320.529 498.413 320.081 498.964 320.081 cv
499.517 320.081 499.964 320.529 499.964 321.081 cv
f
463.245 312.921 mo
463.245 313.473 462.796 313.921 462.245 313.921 cv
461.692 313.921 461.245 313.473 461.245 312.921 cv
461.245 312.369 461.692 311.921 462.245 311.921 cv
462.796 311.921 463.245 312.369 463.245 312.921 cv
f
426.403 285.921 mo
426.403 286.473 425.956 286.921 425.403 286.921 cv
424.853 286.921 424.403 286.473 424.403 285.921 cv
424.403 285.369 424.853 284.921 425.403 284.921 cv
425.956 284.921 426.403 285.369 426.403 285.921 cv
f
389.444 259.281 mo
389.444 259.833 388.997 260.281 388.444 260.281 cv
387.892 260.281 387.444 259.833 387.444 259.281 cv
387.444 258.729 387.892 258.281 388.444 258.281 cv
388.997 258.281 389.444 258.729 389.444 259.281 cv
f
352.604 236.001 mo
352.604 236.553 352.155 237.001 351.604 237.001 cv
351.052 237.001 350.604 236.553 350.604 236.001 cv
350.604 235.449 351.052 235.001 351.604 235.001 cv
352.155 235.001 352.604 235.449 352.604 236.001 cv
f
315.644 219.801 mo
315.644 220.353 315.196 220.801 314.644 220.801 cv
314.093 220.801 313.644 220.353 313.644 219.801 cv
313.644 219.249 314.093 218.801 314.644 218.801 cv
315.196 218.801 315.644 219.249 315.644 219.801 cv
f
278.924 191.961 mo
278.924 192.513 278.476 192.961 277.924 192.961 cv
277.372 192.961 276.924 192.513 276.924 191.961 cv
276.924 191.409 277.372 190.961 277.924 190.961 cv
278.476 190.961 278.924 191.409 278.924 191.961 cv
f
241.964 144.921 mo
241.964 145.473 241.516 145.921 240.964 145.921 cv
240.412 145.921 239.964 145.473 239.964 144.921 cv
239.964 144.369 240.412 143.921 240.964 143.921 cv
241.516 143.921 241.964 144.369 241.964 144.921 cv
f
205.244 74.001 mo
205.244 74.5527 204.796 75.001 204.244 75.001 cv
203.692 75.001 203.244 74.5527 203.244 74.001 cv
203.244 73.4487 203.692 73.001 204.244 73.001 cv
204.796 73.001 205.244 73.4487 205.244 74.001 cv
f
168.284 41.2407 mo
168.284 41.793 167.836 42.2407 167.284 42.2407 cv
166.732 42.2407 166.284 41.793 166.284 41.2407 cv
166.284 40.689 166.732 40.2407 167.284 40.2407 cv
167.836 40.2407 168.284 40.689 168.284 41.2407 cv
f
131.444 46.041 mo
131.444 46.5928 130.996 47.041 130.444 47.041 cv
129.892 47.041 129.444 46.5928 129.444 46.041 cv
129.444 45.4888 129.892 45.041 130.444 45.041 cv
130.996 45.041 131.444 45.4888 131.444 46.041 cv
f
94.604 20.481 mo
94.604 21.0327 94.1563 21.481 93.604 21.481 cv
93.0522 21.481 92.604 21.0327 92.604 20.481 cv
92.604 19.9287 93.0522 19.481 93.604 19.481 cv
94.1563 19.481 94.604 19.9287 94.604 20.481 cv
f
gsave
93.6177 20.4976 mo
93.6177 372.748 li
536.034 372.748 li
536.034 20.4976 li
93.6177 20.4976 li
cp
clp
2 lw
535.95 342.748 mo
499.034 325.081 li
462.2 303.331 li
425.368 277.831 li
388.45 256.664 li
351.618 238.831 li
314.7 216.498 li
277.868 194.498 li
241.034 158.998 li
204.201 71.5811 li
167.284 43.7476 li
130.451 29.9141 li
93.6177 20.4976 li
1 0 0 rgb
@
grestore
%ADOBeginSubsetFont: Helvetica Initial
%ADOt1write: (1.0.24)%%Copyright: Copyright 2011 Adobe System Incorporated. All rights reserved.12 dict dup begin/FontType 1 def/FontName /Helvetica def/FontInfo 5 dict dup begin/ItalicAngle 0 def/FSType 0 defend def/PaintType 0 def/FontMatrix [0.001 0 0 0.001 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 48 /zero putdup 49 /one putdup 50 /two putdup 51 /three putdup 52 /four putdup 54 /six putdup 127 /minus putdef/FontBBox {-951 -481 1446 1122} defendsystemdict begindup /Private7 dict dup begin/|- {def} def/| {put} def/BlueValues [0 0] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings8 dict dup begin/.notdef <1C60D8A8C9B66F631635D26BA635582B3FDE9B3DD75794781396E648A7CA97DB1343CA> |-/zero <1C60D8A8C9B7EF322BB70D1045F9F84CF5A9E636DA48B0B84345CFB17CDCD64AA529BD23C358113A6F12A7F927F67801E7716DEDB8FBB50D28956279879C3943A67386E5304D963AB3E064E7022317006AA79A8777799C5D39502A7CB330EAEEC28837821C5437B109C741C1D7BCD8EEC785ED017624EE945A52A677F5B0E3B0C4781A3901> |-/one <1C60D8A8C9B7EF322B8DEEDAE6F72EF3709E16C7A593AF17F17D72A3907C7468090579C66DE0263BFE> |-/two <1C60D8A8C9B7EF327699F81B0CD59DC4BD38D48AF11B5B9C1D7787A22BDC09D7BCED9A76C2312055A28AC829584109043EE366AF8632D6D62E9BBD6A4357093750D4015EA59C9F538C44C55AD0DB14FEE0C7267845EB7EFBD514024AA1A03530A8941AD7B5F508335B2FDCA37E6B0627146A6F144DB9DD7DCA6BE86290FB46DD6A2918F4C2C2BDEECA159D78> |-/three <1C60D8A8C9B7EF322B8D6E3793F9C339FF2D01F55F75395A69A42725328E1B8E66EAFF6BAC335B6E345906CE7152DDCE6F991DD2E99A50D14EF5FE716864AD89B92005EB56184F6465E294CACBF73EC4E77A27D9ACFF3348FE551D23745FD8C1F5363E223D2FE146B2E36748D97805004E8C37168D3D6622BBF76ADD739801325A4BB7457A49C531154E36C58F381AB30F164CAE6510100AF5FE6405CBE42D3AEC01131A86CADB27645F055DEC901ADBC964660F336098380F7A314362D92502B680C534E053458ABD592A4A4D87F9589307764B161F9884> |-/four <1C60D8A8C9B7EF32298E3DD46F18108137336D1A5C627A90D059BB18158BA2A55FF5DE20CE460964DAF45C08A7D9820A784F4A44F7E1> |-/six <1C60D8A8C9B7EF322BACEC3D6ABEF2D493EDC493AA22ED42125C47DF2396DE843240A24151C3116F0DCEE068EC75B404A70B0E3A92C2307D093030C4F08B5CC0A75F4F4D7C70C5CD3B07E718D5DA84710CE02FF093BE8B5ED477F329DF9AC8554D46651B2A99890C549B5152AB0899BB31DC610CEE59FE1F4C3BE037BFF7F7AE7EDC6D596E9E9398287209A7C703150F7EA84F1C65DCD68CCC47A3B7F9EF77F610D53784F89B61AB4160F9D214F618A6C0032B66C3DB575FE49E073B7AB1C1C6CA> |-/minus <1C60D8A8C9B7F374C6243061E982D378A14DF0A305> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
/CKODBX+Helvetica /Helvetica findfont ct_VMDictPut/CKODBX+Helvetica*1 [48{/.notdef}rp /zero /one /two /three /four /.notdef /six 72{/.notdef}rp /minus 128{/.notdef}rp]CKODBX+Helvetica nfCKODBX+Helvetica*1 [36 0 0 -36 0 0 ]msf189.787 404.083 mo(20)[20.0215 0 ]xsh320.287 404.083 mo(40)[20.021 0 ]xsh451.864 403.083 mo(60)[20.0215 0 ]xsh47.123 380.582 mo(\1774)[21.0234 0 ]xsh47.123 291.161 mo(\1773)[21.0234 0 ]xsh47.123 204.747 mo(\1772)[21.0234 0 ]xsh47.123 119.333 mo(\1771)[21.0234 0 ]xsh68.1465 30.9111 mo(0)sh84.4507 403.911 mo(0)shgsave
39.0986 269.129 mo
39.0986 106.719 li
0 106.719 li
0 269.129 li
39.0986 269.129 li
cp
clp
2.55664 262.962 mo
2.98926 268.475 li
4.20996 268.475 li
4.20996 265.822 4.47852 265.52 6.3291 265.52 cv
25.9697 265.52 li
27.6699 265.52 27.6699 265.937 27.6699 268.475 cv
28.873 268.475 li
28.835 267.217 28.7588 265.2 28.7588 264.249 cv
28.7588 263.297 28.833 261.432 28.873 260.023 cv
27.6699 260.023 li
27.6699 262.55 27.6699 262.962 25.9639 262.962 cv
f
20.7734 241.158 mo
15.9092 241.158 11.8809 244.96 11.8809 249.561 cv
11.8809 254.312 16.0234 257.998 20.7734 257.998 cv
25.6758 257.998 29.3242 254.044 29.3242 249.598 cv
29.3242 244.997 25.5996 241.156 20.7734 241.156 cv
20.7734 241.158 li
cp
28.4189 249.561 mo
28.4189 251.193 27.623 252.865 25.877 253.891 cv
24.2061 254.841 21.8916 254.841 20.5244 254.841 cv
19.0449 254.841 16.9951 254.841 15.3262 253.928 cv
13.5801 252.902 12.7822 251.115 12.7822 249.598 cv
12.7822 247.925 13.6182 246.291 15.249 245.305 cv
16.8818 244.314 19.082 244.314 20.5244 244.314 cv
21.8916 244.314 23.9404 244.314 25.6113 245.152 cv
27.3193 245.988 28.4189 247.66 28.4189 249.561 cv
f
22.4072 231.684 mo
22.4072 234.989 18.6328 234.989 17.7637 234.989 cv
16.7441 234.989 15.5371 234.953 14.5947 234.383 cv
14.1426 234.079 13.083 233.203 13.083 231.684 cv
13.083 228.375 16.8584 228.375 17.7256 228.375 cv
18.7441 228.375 19.9521 228.415 20.8975 228.984 cv
21.3496 229.287 22.4072 230.164 22.4072 231.684 cv
cp
22.0518 235.423 mo
23.1865 233.944 23.3086 232.388 23.3086 231.667 cv
23.3086 228.139 20.6758 225.519 17.7373 225.519 cv
16.3242 225.519 14.9111 226.115 14.0352 227.047 cv
12.7363 225.676 12.5459 224.305 12.5459 223.62 cv
12.5459 223.543 12.5459 223.353 12.584 223.238 cv
12.7363 223.657 13.1553 223.848 13.6133 223.848 cv
14.2637 223.848 14.7207 223.353 14.7207 222.743 cv
14.7207 222.363 14.4531 221.64 13.5752 221.64 cv
12.9248 221.64 11.7031 222.102 11.7031 223.59 cv
11.7031 224.352 11.9629 226.027 13.543 227.629 cv
12.292 229.23 12.1787 230.833 12.1787 231.671 cv
12.1787 235.216 14.79 237.847 17.7021 237.847 cv
19.3672 237.847 20.8027 237.009 21.5996 236.056 cv
22.166 236.552 23.415 237.237 24.7393 237.237 cv
25.9111 237.237 27.3506 236.742 28.1055 235.562 cv
28.75 237.847 30.376 239.049 31.8877 239.049 cv
34.6104 239.049 36.6934 235.287 36.6934 230.648 cv
36.6934 226.165 34.7393 222.208 31.7539 222.208 cv
30.4141 222.208 28.46 222.741 27.3887 224.676 cv
26.3164 226.688 26.3164 228.891 26.3164 231.207 cv
26.3164 232.156 26.3164 233.789 26.3164 234.055 cv
26.166 235.269 25.0059 236.065 23.8096 236.065 cv
23.6611 236.065 22.8008 236.065 22.0518 235.421 cv
22.0518 235.423 li
cp
35.79 230.612 mo
35.79 234.465 33.8535 237.096 31.8389 237.096 cv
30.0918 237.096 28.6885 235.646 28.5723 233.97 cv
28.5723 231.72 li
28.5723 228.439 28.5723 224.166 31.8389 224.166 cv
33.8916 224.166 35.79 226.877 35.79 230.615 cv
f
21.1982 212.132 mo
20.4814 212.132 20.4512 212.185 20.4512 212.926 cv
22.0811 214.615 22.1055 217.019 22.1055 218.101 cv
23.0078 218.101 li
23.0078 217.463 23.0078 215.704 22.3398 214.24 cv
35.918 214.24 li
36.7959 214.24 37.1426 214.24 37.1426 216.902 cv
37.1426 217.915 li
38.0439 217.915 li
38.0176 217.435 37.9385 214.158 37.9385 213.172 cv
37.9385 212.347 38.0176 208.988 38.0439 208.402 cv
37.1426 208.402 li
37.1426 209.431 li
37.1426 212.135 36.7959 212.135 35.9189 212.135 cv
f
29.6309 192.134 mo
26.7041 192.134 24.6045 192.48 22.7422 193.702 cv
21.5166 194.526 20.4541 196.173 20.4541 198.299 cv
20.4541 204.465 27.7158 204.465 29.6318 204.465 cv
31.5479 204.465 38.6504 204.465 38.6504 198.299 cv
38.6504 192.134 31.5479 192.134 29.6318 192.134 cv
29.6309 192.134 li
cp
37.8965 198.299 mo
37.8965 199.525 37.1777 201.15 34.998 201.683 cv
33.4297 202.056 31.252 202.056 29.2842 202.056 cv
27.3447 202.056 25.3252 202.056 23.8643 201.655 cv
21.7637 201.097 21.2012 199.392 21.2012 198.298 cv
21.2012 196.859 22.084 195.472 23.624 194.993 cv
25.0596 194.565 26.9746 194.538 29.2842 194.538 cv
31.252 194.538 33.2168 194.538 34.8926 194.888 cv
37.3105 195.42 37.8965 197.231 37.8965 198.298 cv
f
37.9697 176.224 mo
37.8545 176.224 37.7803 176.224 37.1367 176.868 cv
32.3604 181.6 25.2002 182.812 19.4043 182.812 cv
12.8115 182.812 6.21777 181.373 1.48145 176.718 cv
1.02637 176.226 0.950195 176.226 0.836914 176.226 cv
0.571289 176.226 0.450195 176.379 0.450195 176.607 cv
0.450195 176.989 3.03418 180.418 7.84668 182.666 cv
12.0137 184.608 16.2197 185.066 19.4043 185.066 cv
22.3604 185.066 26.9434 184.646 31.2236 182.55 cv
35.8848 180.265 38.3477 176.986 38.3477 176.604 cv
38.3477 176.377 38.2334 176.224 37.9697 176.224 cv
f
19.0957 149.114 mo
19.0957 150.069 li
24.9141 151.021 27.6699 151.896 27.6699 158.441 cv
27.6699 163.503 li
27.6699 165.292 27.4043 165.366 26.1602 165.366 cv
16.0918 165.366 li
16.0918 161.949 li
16.0918 158.267 17.2979 157.848 20.498 157.848 cv
20.498 156.945 li
10.4541 156.945 li
10.4541 157.848 li
13.7129 157.848 14.8896 158.267 14.8896 161.949 cv
14.8896 165.366 li
5.73535 165.366 li
4.47852 165.366 4.20898 165.292 4.20898 163.503 cv
4.20898 158.595 li
4.20898 152.773 6.31445 151.745 11.6279 151.136 cv
11.6279 150.183 li
3.10156 151.249 li
3.10156 172.682 li
4.20898 172.682 li
4.20898 171.784 li
4.20898 168.901 4.62988 168.827 5.99805 168.827 cv
25.8857 168.827 li
27.2529 168.827 27.6699 168.901 27.6699 171.784 cv
27.6699 172.682 li
28.873 172.682 li
28.873 150.715 li
f
25.9082 141.457 mo
20.1338 141.457 li
16.4229 141.457 13.083 139.882 13.083 137.027 cv
13.083 136.764 13.083 136.689 13.083 136.613 cv
13.1201 136.735 13.5605 137.546 14.5195 137.546 cv
15.5488 137.546 16.1006 136.738 16.1006 135.892 cv
16.1006 135.198 15.6533 134.237 14.459 134.237 cv
13.2637 134.237 12.1797 135.416 12.1797 137.051 cv
12.1797 139.826 14.6836 141.192 16.29 141.725 cv
12.1797 141.725 li
12.6143 147.006 li
13.8359 147.006 li
13.8359 144.32 14.1025 144.015 15.9385 144.015 cv
25.9844 144.015 li
27.6719 144.015 27.6719 144.437 27.6719 147.006 cv
28.874 147.006 li
28.8359 145.521 28.7598 143.733 28.7598 142.667 cv
28.7598 141.144 28.7598 139.354 28.874 137.832 cv
27.6719 137.832 li
27.6719 138.617 li
27.6719 141.383 27.2588 141.457 25.9082 141.457 cv
f
25.9082 126.57 mo
20.1338 126.57 li
16.4229 126.57 13.083 124.994 13.083 122.14 cv
13.083 121.877 13.083 121.802 13.083 121.726 cv
13.1201 121.848 13.5605 122.659 14.5195 122.659 cv
15.5488 122.659 16.1006 121.851 16.1006 121.004 cv
16.1006 120.311 15.6533 119.35 14.459 119.35 cv
13.2637 119.35 12.1797 120.529 12.1797 122.164 cv
12.1797 124.938 14.6836 126.305 16.29 126.837 cv
12.1797 126.837 li
12.6143 132.119 li
13.8359 132.119 li
13.8359 129.433 14.1025 129.127 15.9385 129.127 cv
25.9844 129.127 li
27.6719 129.127 27.6719 129.549 27.6719 132.119 cv
28.874 132.119 li
28.8359 130.634 28.7598 128.845 28.7598 127.778 cv
28.7598 126.256 28.7598 124.466 28.874 122.943 cv
27.6719 122.943 li
27.6719 123.729 li
27.6719 126.495 27.2588 126.57 25.9082 126.57 cv
f
19.4023 107.317 mo
16.4473 107.317 11.8613 107.738 7.58008 109.826 cv
2.9209 112.104 0.450195 115.368 0.450195 115.748 cv
0.450195 115.975 0.609375 116.127 0.836914 116.127 cv
0.950195 116.127 1.02637 116.127 1.70703 115.411 cv
5.45996 111.72 11.4834 109.573 19.4043 109.573 cv
25.8828 109.573 32.5518 110.968 37.3262 115.638 cv
37.7803 116.127 37.8564 116.127 37.9707 116.127 cv
38.1982 116.127 38.3496 115.975 38.3496 115.748 cv
38.3496 115.368 35.7734 111.952 30.9619 109.713 cv
26.7949 107.775 22.5859 107.317 19.4053 107.317 cv
f
grestore
gsave
74.708 455.15 mo
549.907 455.15 li
549.907 416.051 li
74.708 416.051 li
74.708 455.15 li
cp
clp
93.4912 429.634 mo
93.4531 429.517 93.3018 429.205 93.3018 429.088 cv
93.3018 429.048 93.9824 428.503 94.3984 428.191 cv
101.012 422.93 li
104.564 420.239 106.038 420.085 107.172 419.964 cv
107.474 419.924 107.852 419.886 107.852 419.187 cv
107.852 419.03 107.738 418.761 107.435 418.761 cv
106.604 418.761 105.658 418.878 104.752 418.878 cv
103.391 418.878 101.918 418.761 100.558 418.761 cv
100.294 418.761 99.8398 418.761 99.8398 419.536 cv
99.8398 419.807 100.028 419.924 100.294 419.964 cv
101.126 420.045 101.466 420.239 101.466 420.783 cv
101.466 421.486 100.332 422.383 100.105 422.578 cv
85.3682 434.274 li
88.3906 421.758 li
88.7305 420.354 88.8066 419.96 91.5654 419.96 cv
92.5098 419.96 92.8496 419.96 92.8496 419.186 cv
92.8496 418.835 92.5469 418.758 92.3193 418.758 cv
91.2607 418.758 88.54 418.875 87.4824 418.875 cv
86.3867 418.875 83.7031 418.758 82.6074 418.758 cv
82.3428 418.758 81.8516 418.758 81.8516 419.495 cv
81.8516 419.959 82.1924 419.959 82.9482 419.959 cv
83.4404 419.959 84.1191 420.004 84.5742 420.042 cv
85.1787 420.121 85.4063 420.239 85.4063 420.668 cv
85.4063 420.823 85.3682 420.94 85.2559 421.409 cv
80.1904 442.341 li
79.8125 443.862 79.7363 444.174 76.751 444.174 cv
76.1094 444.174 75.6934 444.174 75.6934 444.908 cv
75.6934 445.374 76.1465 445.374 76.2598 445.374 cv
77.3184 445.374 80.001 445.257 81.0586 445.257 cv
81.8516 445.257 82.6826 445.296 83.4766 445.296 cv
84.3076 445.296 85.1396 445.374 85.9326 445.374 cv
86.1982 445.374 86.6885 445.374 86.6885 444.598 cv
86.6885 444.171 86.3486 444.171 85.6299 444.171 cv
84.2314 444.171 83.1719 444.171 83.1719 443.47 cv
83.1719 443.198 83.4004 442.341 83.5127 441.755 cv
84.042 439.729 84.5342 437.665 85.0244 435.64 cv
90.6543 431.116 li
91.6367 433.457 94.0938 439.261 95.0371 441.601 cv
95.4922 442.652 95.4922 442.729 95.4922 442.964 cv
95.4922 444.132 93.8682 444.171 93.5264 444.171 cv
93.1104 444.171 92.6943 444.171 92.6943 444.947 cv
92.6943 445.374 93.1484 445.374 93.2236 445.374 cv
94.7354 445.374 96.3232 445.257 97.835 445.257 cv
98.667 445.257 100.707 445.374 101.539 445.374 cv
101.727 445.374 102.218 445.374 102.218 444.598 cv
102.218 444.171 101.802 444.171 101.462 444.171 cv
99.9121 444.132 99.4209 443.781 98.8545 442.418 cv
f
123.395 417.687 mo
123.584 417.181 123.584 417.023 123.584 416.987 cv
123.584 416.559 123.245 416.204 122.832 416.204 cv
122.569 416.204 122.308 416.325 122.195 416.559 cv
109.181 453.671 li
108.992 454.178 108.992 454.331 108.992 454.371 cv
108.992 454.8 109.331 455.15 109.743 455.15 cv
110.23 455.15 110.343 454.879 110.568 454.217 cv
f
152.301 422.851 mo
152.678 421.292 153.359 420.082 156.382 419.96 cv
156.57 419.96 157.024 419.923 157.024 419.186 cv
157.024 419.146 157.024 418.758 156.532 418.758 cv
155.286 418.758 153.963 418.875 152.716 418.875 cv
151.432 418.875 150.107 418.758 148.861 418.758 cv
148.635 418.758 148.182 418.758 148.182 419.535 cv
148.182 419.96 148.56 419.96 148.861 419.96 cv
151.015 420.004 151.432 420.821 151.432 421.679 cv
151.432 421.797 151.355 422.382 151.318 422.499 cv
147.087 439.845 li
138.735 419.501 li
138.433 418.8 138.395 418.758 137.526 418.758 cv
132.462 418.758 li
131.706 418.758 131.366 418.758 131.366 419.535 cv
131.366 419.96 131.706 419.96 132.425 419.96 cv
132.614 419.96 134.995 419.96 134.995 420.316 cv
129.93 441.249 li
129.553 442.809 128.909 444.056 125.849 444.174 cv
125.621 444.174 125.207 444.212 125.207 444.948 cv
125.207 445.22 125.396 445.376 125.698 445.376 cv
126.907 445.376 128.231 445.259 129.478 445.259 cv
130.764 445.259 132.123 445.376 133.371 445.376 cv
133.56 445.376 134.05 445.376 134.05 444.601 cv
134.05 444.212 133.71 444.174 133.294 444.174 cv
131.103 444.095 130.799 443.237 130.799 442.459 cv
130.799 442.187 130.837 441.99 130.949 441.563 cv
135.938 420.99 li
136.089 421.224 136.089 421.301 136.277 421.69 cv
145.687 444.634 li
145.952 445.296 146.064 445.374 146.404 445.374 cv
146.82 445.374 146.82 445.257 147.009 444.556 cv
f
164.86 444.753 mo
164.898 444.753 164.934 444.795 164.934 445.376 cv
164.934 447.858 163.902 450.221 162.279 452.043 cv
162.059 452.274 162.022 452.314 162.022 452.468 cv
162.022 452.739 162.21 452.896 162.4 452.896 cv
162.853 452.896 165.836 449.834 165.836 445.376 cv
165.836 442.903 164.93 441.316 163.42 441.316 cv
162.098 441.316 161.418 442.353 161.418 443.348 cv
161.418 444.343 162.047 445.376 163.379 445.376 cv
163.972 445.376 164.415 445.142 164.787 444.83 cv
f
207.214 417.685 mo
207.44 417.335 207.516 417.218 207.516 416.983 cv
207.516 416.554 207.174 416.201 206.759 416.201 cv
206.38 416.201 206.192 416.473 205.965 416.742 cv
204.074 419.37 201.541 420.41 198.781 420.41 cv
196.135 420.41 193.79 419.444 191.711 417.438 cv
190.992 416.782 190.197 416.201 188.989 416.201 cv
186.115 416.201 183.431 419.465 183.431 424.003 cv
183.431 428.699 186.168 431.841 189.018 431.841 cv
191.791 431.841 193.958 428.38 193.958 424.022 cv
193.958 423.479 193.958 421.65 193.118 419.628 cv
195.573 421.113 197.464 421.313 198.825 421.313 cv
201.698 421.313 203.624 420.063 203.851 419.901 cv
203.889 419.944 li
186.921 446.067 li
186.581 446.573 186.581 446.771 186.581 446.848 cv
186.581 447.276 186.959 447.631 187.338 447.631 cv
187.715 447.631 187.791 447.474 188.093 447.045 cv
207.214 417.685 li
cp
189.104 430.94 mo
188.346 430.94 185.838 430.44 185.838 424.043 cv
185.838 417.608 188.308 417.104 189.104 417.104 cv
191.118 417.104 193.055 419.956 193.055 424.003 cv
193.055 428.163 191.079 430.939 189.104 430.939 cv
189.104 430.94 li
cp
205.798 446.726 mo
205.039 446.726 202.531 446.222 202.531 439.756 cv
202.531 433.252 205.001 432.743 205.798 432.743 cv
207.813 432.743 209.749 435.627 209.749 439.716 cv
209.749 443.923 207.772 446.726 205.798 446.726 cv
cp
210.651 439.757 mo
210.651 435.251 208.409 431.843 205.71 431.843 cv
202.823 431.843 200.124 435.134 200.124 439.718 cv
200.124 444.457 202.861 447.631 205.71 447.631 cv
208.486 447.631 210.651 444.146 210.651 439.757 cv
f
243.133 437.056 mo
243.133 432.064 239.363 427.932 234.804 427.932 cv
230.094 427.932 226.439 432.183 226.439 437.056 cv
226.439 442.083 230.357 445.825 234.768 445.825 cv
239.327 445.825 243.134 442.006 243.134 437.056 cv
243.133 437.056 li
cp
234.805 444.925 mo
233.194 444.925 231.546 444.105 230.536 442.31 cv
229.599 440.591 229.599 438.209 229.599 436.804 cv
229.599 435.281 229.599 433.172 230.498 431.455 cv
231.511 429.657 233.27 428.836 234.768 428.836 cv
236.416 428.836 238.026 429.698 239 431.377 cv
239.975 433.055 239.975 435.321 239.975 436.804 cv
239.975 438.211 239.975 440.318 239.151 442.036 cv
238.327 443.794 236.679 444.925 234.807 444.925 cv
f
250.952 429.736 mo
255.221 429.736 li
255.221 428.532 li
250.8 428.532 li
250.8 424.034 li
250.8 420.62 252.613 418.757 254.276 418.757 cv
254.389 418.757 254.955 418.757 255.522 419.058 cv
255.077 419.215 254.41 419.72 254.41 420.691 cv
254.41 421.587 255.019 422.365 256.045 422.365 cv
257.148 422.365 257.719 421.573 257.719 420.625 cv
257.719 419.161 256.31 417.855 254.293 417.855 cv
251.629 417.855 248.394 419.923 248.394 424.053 cv
248.394 428.532 li
245.431 428.532 li
245.431 429.736 li
248.394 429.736 li
248.394 442.413 li
248.394 444.174 247.981 444.174 245.469 444.174 cv
245.469 445.377 li
246.942 445.337 248.718 445.259 249.777 445.259 cv
251.288 445.259 253.064 445.259 254.575 445.377 cv
254.575 444.174 li
253.79 444.174 li
251.025 444.174 250.95 443.745 250.95 442.336 cv
f
279.22 435.104 mo
279.183 435.026 278.992 434.79 278.992 434.672 cv
278.992 434.518 281.683 432.171 282.061 431.857 cv
284.446 429.865 286.038 429.785 286.832 429.748 cv
286.832 428.532 li
285.735 428.651 285.242 428.651 284.182 428.651 cv
282.818 428.651 280.469 428.572 279.939 428.532 cv
279.939 429.75 li
280.661 429.788 281.038 430.22 281.038 430.729 cv
281.038 431.514 280.509 431.983 280.204 432.258 cv
274.862 437.039 li
274.862 418.308 li
269.453 418.74 li
269.453 419.959 li
272.013 419.959 272.306 420.237 272.306 422.146 cv
272.306 442.416 li
272.306 444.17 271.902 444.17 269.453 444.17 cv
269.453 445.372 li
270.7 445.334 272.479 445.255 273.573 445.255 cv
274.707 445.255 276.218 445.295 277.729 445.372 cv
277.729 444.17 li
275.196 444.17 274.782 444.17 274.782 442.416 cv
274.782 438.403 li
277.199 436.259 li
280.11 440.391 281.697 442.573 281.697 443.276 cv
281.697 444.015 281.055 444.171 280.338 444.171 cv
280.338 445.374 li
281.395 445.334 283.624 445.257 284.418 445.257 cv
285.515 445.257 286.609 445.296 287.705 445.374 cv
287.705 444.171 li
286.3 444.171 285.47 444.171 284.029 442.1 cv
f
302.043 436.353 mo
302.87 436.353 302.985 436.353 302.985 435.451 cv
302.985 431.653 300.95 427.932 296.239 427.932 cv
291.865 427.932 288.396 431.948 288.396 436.82 cv
288.396 442.043 292.356 445.825 296.691 445.825 cv
301.288 445.825 302.985 441.484 302.985 440.742 cv
302.985 440.351 302.683 440.271 302.495 440.271 cv
302.157 440.271 302.082 440.511 302.008 440.829 cv
300.69 444.924 297.308 444.924 296.932 444.924 cv
295.052 444.924 293.548 443.737 292.684 442.277 cv
291.555 440.382 291.555 437.775 291.555 436.353 cv
302.043 436.353 li
cp
291.555 435.451 mo
291.778 429.785 294.925 428.834 296.198 428.834 cv
300.054 428.834 300.427 433.968 300.427 435.451 cv
f
310.651 432.246 mo
311.746 430.264 313.596 429.134 315.52 429.134 cv
318.273 429.134 320.577 432.558 320.577 436.952 cv
320.577 441.659 317.935 444.925 315.143 444.925 cv
313.633 444.925 312.198 444.146 311.179 442.553 cv
310.651 441.736 310.651 441.696 310.651 440.921 cv
310.651 432.246 li
cp
310.651 443.077 mo
310.842 443.706 312.43 445.826 315.304 445.826 cv
319.803 445.826 323.737 442.022 323.737 437.011 cv
323.737 432.077 320.066 428.231 315.831 428.231 cv
312.883 428.231 311.296 429.897 310.539 430.729 cv
310.539 428.231 li
305.095 428.665 li
305.095 429.886 li
307.824 429.886 308.095 430.12 308.095 431.824 cv
308.095 449.951 li
308.095 451.694 307.671 451.694 305.095 451.694 cv
305.095 452.897 li
306.379 452.859 308.343 452.78 309.325 452.78 cv
310.347 452.78 312.272 452.859 313.598 452.897 cv
313.598 451.694 li
311.066 451.694 310.651 451.694 310.651 449.948 cv
310.651 443.429 li
f
331.556 429.736 mo
337.033 429.736 li
337.033 428.532 li
331.556 428.532 li
331.556 421.465 li
330.622 421.465 li
330.585 424.62 329.465 428.737 325.807 428.89 cv
325.807 429.733 li
328.997 429.733 li
328.997 440.541 li
328.997 445.357 332.494 445.825 333.848 445.825 cv
336.518 445.825 337.572 443.046 337.572 440.54 cv
337.572 438.308 li
336.671 438.308 li
336.671 440.487 li
336.671 443.419 335.526 444.924 334.112 444.924 cv
331.556 444.924 331.556 441.345 331.556 440.675 cv
f
367.009 436.353 mo
367.835 436.353 367.949 436.353 367.949 435.451 cv
367.949 431.653 365.915 427.932 361.202 427.932 cv
356.829 427.932 353.36 431.948 353.36 436.82 cv
353.36 442.043 357.318 445.825 361.655 445.825 cv
366.254 445.825 367.949 441.484 367.949 440.742 cv
367.949 440.351 367.647 440.271 367.46 440.271 cv
367.122 440.271 367.047 440.511 366.97 440.829 cv
365.655 444.924 362.271 444.924 361.896 444.924 cv
360.016 444.924 358.511 443.737 357.647 442.277 cv
356.521 440.382 356.521 437.775 356.521 436.353 cv
367.009 436.353 li
cp
356.521 435.451 mo
356.744 429.785 359.89 428.834 361.162 428.834 cv
365.018 428.834 365.392 433.968 365.392 435.451 cv
f
375.919 428.231 mo
370.551 428.665 li
370.551 429.886 li
373.021 429.886 373.363 430.12 373.363 432.018 cv
373.363 442.431 li
373.363 444.174 372.944 444.174 370.398 444.174 cv
370.398 445.377 li
371.608 445.337 373.649 445.259 374.556 445.259 cv
375.88 445.259 377.201 445.337 378.487 445.377 cv
378.487 444.174 li
376.068 444.174 375.921 443.98 375.921 442.468 cv
375.919 428.231 li
cp
376.07 421.24 mo
376.07 420.015 375.112 419.209 374.038 419.209 cv
372.852 419.209 372.009 420.243 372.009 421.24 cv
372.009 422.272 372.852 423.268 374.038 423.268 cv
375.109 423.268 376.07 422.465 376.07 421.24 cv
f
388.1 438.608 mo
384.792 438.608 384.792 434.772 384.792 433.892 cv
384.792 432.855 384.828 431.628 385.397 430.669 cv
385.701 430.21 386.577 429.134 388.099 429.134 cv
391.405 429.134 391.405 432.971 391.405 433.854 cv
391.405 434.889 391.368 436.116 390.798 437.075 cv
390.494 437.535 389.617 438.608 388.099 438.608 cv
388.1 438.608 li
cp
384.33 438.363 mo
385.814 439.399 387.376 439.51 388.099 439.51 cv
391.638 439.51 394.265 436.835 394.265 433.854 cv
394.265 432.419 393.632 430.985 392.641 430.095 cv
394.003 428.777 395.359 428.584 396.042 428.584 cv
396.118 428.584 396.308 428.584 396.419 428.624 cv
396.004 428.777 395.815 429.204 395.815 429.669 cv
395.815 430.329 396.308 430.793 396.911 430.793 cv
397.29 430.793 398.008 430.522 398.008 429.631 cv
398.008 428.972 397.554 427.729 396.079 427.729 cv
395.322 427.729 393.658 428.004 392.069 429.634 cv
390.482 428.349 388.894 428.231 388.06 428.231 cv
384.543 428.231 381.934 430.909 381.934 433.894 cv
381.934 435.598 382.765 437.069 383.71 437.886 cv
383.219 438.467 382.538 439.745 382.538 441.103 cv
382.538 442.304 383.03 443.775 384.198 444.551 cv
381.934 445.208 380.729 446.875 380.729 448.425 cv
380.729 451.214 384.461 453.347 389.055 453.347 cv
393.501 453.347 397.422 451.366 397.422 448.336 cv
397.422 446.977 396.894 444.996 394.973 443.91 cv
392.976 442.819 390.796 442.819 388.499 442.819 cv
387.56 442.819 385.94 442.819 385.677 442.819 cv
384.473 442.663 383.683 441.452 383.683 440.201 cv
383.683 440.044 383.683 439.146 384.327 438.363 cv
384.33 438.363 li
cp
389.097 452.443 mo
385.288 452.443 382.687 450.466 382.687 448.409 cv
382.687 446.628 384.12 445.192 385.778 445.073 cv
388.001 445.073 li
391.244 445.073 395.465 445.073 395.465 448.409 cv
395.465 450.505 392.788 452.443 389.094 452.443 cv
f
413.175 436.353 mo
414.002 436.353 414.116 436.353 414.116 435.451 cv
414.116 431.653 412.08 427.932 407.369 427.932 cv
402.995 427.932 399.528 431.948 399.528 436.82 cv
399.528 442.043 403.485 445.825 407.821 445.825 cv
412.42 445.825 414.116 441.484 414.116 440.742 cv
414.116 440.351 413.814 440.271 413.627 440.271 cv
413.288 440.271 413.212 440.511 413.137 440.829 cv
411.821 444.924 408.438 444.924 408.062 444.924 cv
406.182 444.924 404.679 443.737 403.813 442.277 cv
402.687 440.382 402.687 437.775 402.687 436.353 cv
413.175 436.353 li
cp
402.687 435.451 mo
402.91 429.785 406.057 428.834 407.327 428.834 cv
411.185 428.834 411.559 433.968 411.559 435.451 cv
f
419.526 432.057 mo
419.526 442.431 li
419.526 444.174 419.102 444.174 416.526 444.174 cv
416.526 445.377 li
417.848 445.337 419.776 445.259 420.796 445.259 cv
421.779 445.259 423.742 445.337 425.028 445.377 cv
425.028 444.174 li
422.498 444.174 422.082 444.174 422.082 442.435 cv
422.082 435.321 li
422.082 431.302 424.788 429.135 427.229 429.135 cv
429.632 429.135 430.052 431.224 430.052 433.428 cv
430.052 442.435 li
430.052 444.174 429.625 444.174 427.03 444.174 cv
427.03 445.377 li
428.353 445.337 430.281 445.259 431.3 445.259 cv
432.284 445.259 434.247 445.337 435.534 445.377 cv
435.534 444.174 li
433.585 444.174 432.646 444.174 432.608 443.01 cv
432.608 435.603 li
432.608 432.268 432.608 431.066 431.441 429.668 cv
430.915 429.01 429.675 428.231 427.493 428.231 cv
424.75 428.231 422.981 429.878 421.931 432.25 cv
421.931 428.231 li
416.523 428.665 li
416.523 429.886 li
419.216 429.886 419.523 430.16 419.523 432.057 cv
f
451.086 432.36 mo
451.427 431.461 452.069 429.776 454.566 429.736 cv
454.566 428.532 li
453.696 428.611 452.6 428.651 451.729 428.651 cv
450.822 428.651 449.081 428.572 448.438 428.532 cv
448.438 429.736 li
449.838 429.776 450.253 430.676 450.253 431.419 cv
450.253 431.771 450.178 431.928 450.025 432.358 cv
446.166 442.339 li
441.93 431.419 li
441.702 430.91 441.702 430.833 441.702 430.755 cv
441.702 429.736 443.178 429.736 443.857 429.736 cv
443.857 428.532 li
442.722 428.572 440.604 428.651 439.733 428.651 cv
438.712 428.651 437.198 428.611 436.063 428.532 cv
436.063 429.736 li
438.447 429.736 438.6 429.973 439.091 431.187 cv
444.538 445.082 li
444.766 445.629 444.843 445.826 445.335 445.826 cv
445.827 445.826 445.978 445.476 446.131 445.082 cv
f
468.815 436.353 mo
469.643 436.353 469.757 436.353 469.757 435.451 cv
469.757 431.653 467.721 427.932 463.01 427.932 cv
458.636 427.932 455.169 431.948 455.169 436.82 cv
455.169 442.043 459.126 445.825 463.462 445.825 cv
468.061 445.825 469.757 441.484 469.757 440.742 cv
469.757 440.351 469.455 440.271 469.267 440.271 cv
468.929 440.271 468.853 440.511 468.777 440.829 cv
467.462 444.924 464.078 444.924 463.702 444.924 cv
461.822 444.924 460.319 443.737 459.454 442.277 cv
458.325 440.382 458.325 437.775 458.325 436.353 cv
468.815 436.353 li
cp
458.325 435.451 mo
458.551 429.785 461.696 428.834 462.97 428.834 cv
466.824 428.834 467.199 433.968 467.199 435.451 cv
f
484.525 430.339 mo
482.921 430.457 482.686 431.632 482.686 432.144 cv
482.686 433.161 483.362 433.944 484.416 433.944 cv
485.393 433.944 486.145 433.282 486.145 432.11 cv
486.145 429.457 483.271 427.932 480.36 427.932 cv
475.636 427.932 472.157 432.144 472.157 436.978 cv
472.157 441.966 475.921 445.825 480.33 445.825 cv
485.421 445.825 486.64 441.132 486.64 440.742 cv
486.64 440.351 486.257 440.351 486.145 440.351 cv
485.804 440.351 485.728 440.508 485.652 440.748 cv
484.55 444.445 482.081 444.924 480.675 444.924 cv
478.661 444.924 475.319 443.231 475.319 436.898 cv
475.319 430.487 478.437 428.833 480.454 428.833 cv
480.796 428.833 483.191 428.874 484.525 430.336 cv
f
494.267 429.736 mo
499.742 429.736 li
499.742 428.532 li
494.267 428.532 li
494.267 421.465 li
493.333 421.465 li
493.296 424.62 492.175 428.737 488.518 428.89 cv
488.518 429.733 li
491.709 429.733 li
491.709 440.541 li
491.709 445.357 495.206 445.825 496.561 445.825 cv
499.228 445.825 500.284 443.046 500.284 440.54 cv
500.284 438.308 li
499.382 438.308 li
499.382 440.487 li
499.382 443.419 498.235 444.924 496.824 444.924 cv
494.267 444.924 494.267 441.345 494.267 440.675 cv
f
520.282 437.056 mo
520.282 432.064 516.513 427.932 511.953 427.932 cv
507.243 427.932 503.589 432.183 503.589 437.056 cv
503.589 442.083 507.508 445.825 511.918 445.825 cv
516.476 445.825 520.284 442.006 520.284 437.056 cv
520.282 437.056 li
cp
511.954 444.925 mo
510.345 444.925 508.696 444.105 507.687 442.31 cv
506.749 440.591 506.749 438.209 506.749 436.804 cv
506.749 435.281 506.749 433.172 507.648 431.455 cv
508.661 429.657 510.419 428.836 511.918 428.836 cv
513.565 428.836 515.177 429.698 516.149 431.377 cv
517.124 433.055 517.124 435.321 517.124 436.804 cv
517.124 438.211 517.124 440.318 516.302 442.036 cv
515.477 443.794 513.829 444.925 511.956 444.925 cv
f
527.802 442.356 mo
527.802 436.403 li
527.802 432.575 529.398 429.134 532.291 429.134 cv
532.557 429.134 532.633 429.134 532.71 429.134 cv
532.599 429.171 531.862 429.628 531.862 430.617 cv
531.862 431.679 532.671 432.25 533.516 432.25 cv
534.208 432.25 535.173 431.789 535.173 430.567 cv
535.173 429.343 533.992 428.231 532.358 428.231 cv
529.583 428.231 528.213 430.798 527.68 432.445 cv
527.68 428.231 li
522.395 428.665 li
522.395 429.886 li
524.954 429.886 525.245 430.16 525.245 432.057 cv
525.245 442.433 li
525.245 444.176 524.843 444.176 522.395 444.176 cv
522.395 445.378 li
523.867 445.341 525.644 445.261 526.703 445.261 cv
528.215 445.261 529.989 445.261 531.501 445.378 cv
531.501 444.176 li
530.699 444.176 li
527.878 444.176 527.802 443.749 527.802 442.359 cv
f
544.026 437.811 mo
544.855 437.968 547.952 438.589 547.952 441.387 cv
547.952 443.37 546.63 444.925 543.687 444.925 cv
540.518 444.925 539.159 442.711 538.443 439.415 cv
538.329 438.909 538.293 438.754 537.916 438.754 cv
537.425 438.754 537.425 439.03 537.425 439.732 cv
537.425 444.889 li
537.425 445.552 537.425 445.825 537.837 445.825 cv
538.027 445.825 538.065 445.786 538.78 445.035 cv
538.856 444.956 538.856 444.878 539.535 444.127 cv
541.194 445.784 542.892 445.825 543.684 445.825 cv
548.02 445.825 549.757 443.214 549.757 440.409 cv
549.757 438.346 548.621 437.178 548.17 436.71 cv
546.923 435.463 545.453 435.151 543.869 434.841 cv
541.755 434.412 539.229 433.905 539.229 431.646 cv
539.229 430.282 540.213 428.682 543.47 428.682 cv
547.638 428.682 547.827 432.175 547.901 433.378 cv
547.94 433.728 548.28 433.728 548.354 433.728 cv
548.85 433.728 548.85 433.533 548.85 432.792 cv
548.85 428.863 li
548.85 428.203 548.85 427.929 548.434 427.929 cv
548.243 427.929 548.17 427.929 547.678 428.397 cv
547.565 428.555 547.187 428.904 547.033 429.021 cv
545.597 427.929 544.044 427.929 543.476 427.929 cv
538.86 427.929 537.421 430.538 537.421 432.715 cv
537.421 434.077 538.022 435.164 539.043 436.021 cv
540.25 437.032 541.306 437.265 544.021 437.808 cv
f
grestore
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
/CKODBX+Helvetica*1 uf/CKODBX+Helvetica uf/Helvetica ufAdobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnduserdict /AI9_read_buffer 256 string putuserdict begin/ai9_skip_data{	mark	{		currentfile AI9_read_buffer { readline } stopped		{		}		{			not			{				exit			} if			(%AI9_PrivateDataEnd) eq			{				exit			} if		} ifelse	} loop	cleartomark} defenduserdict /ai9_skip_data get exec%AI9_PrivateDataBegin%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 13.0%%AI8_CreatorVersion: 13.0.0%%For: (Gabriel Peyr\616) ()%%Title: (twodiracs-rtm-error-log.eps)%%CreationDate: 2/21/11 11:05 PM%AI9_DataStream%Gb"-6B6tg_dkH+I!<3(9@iG[:7!IZbFO";7B'd?aD8mD0_VVp!L\J8"PsS-G%Q%VOH(K)JfkW<5V(0G^<N/S_-4?AQ]A@A=(HR%a%`7J!VO(Z_IU"Jn:Wl:.CKB?1/0>hI;br.B]Qr\(C6I8cee5/G2:$]BjU10roD>;Xp%k`1!>,0t.G$:GCIj9DGI7K.Epd:h,lMN#9%BN8i?!d(9f*[%D67dI7tTNS<&=kCQ/\(,<E]cd-glq=2.C/d7-YNd7%9.Q+$C+k9LZW04/I_@Xc)lScD,jR+n.^sh*Oc;@":6H.B%[FVS=\3Mode.9;jFrrK@(]=6C0c6SW,Jqg;X8RY&Y)TrCs''r`C:lM&K3i]Im'M8<#i_>n=1;0M1iV?OL6Bj%[@EYnXK3TDV!t<3%[%GTZg9e2$Hp),?Fm*5N0[mUJAE.8s:Req,OWqHE)h0^as+,'j2;<aYs+@]PU0/_sPj]'aS,Yndf5(VM==tE9k-A^Gb*jUUC=m:n%DVInL@9f?C6#bPW2d3`Y'MG9&L!Ch.<r"*D\>f2Y)Zqp83isQI`CAW`BGMMHPNkAl?Ct]M]ps9cm@2BAY4oN$U.49%W"SBd\>i_%%graAOc,;Hc`7-1i'bdB#!ZZ`ATgo!D]KjAXhJ9hagDdM/f#rNG=m&.dBlTVii4>h'iVsnpT2ZH2G;*^;Br054.\:ZCMNU0:-3S3M%cua&)S'Y:V_Ma_BNTsD,o:fNj%]Y>`W[MQSrZ*Zi1OppOTRXN_T;Dpe\K#u4M_%l[iNKCOY-(-pY*7X5"\OtVV?p(r$,9.ITM-#l%9X@W*3-.*1alNLLL]0U(>RmEI3Il^"n-Mq1,!Zm$:pO2VS73(<.M^%,<(mrt="9;=WK8m2`h^>E5(k-%Kp!uof4.DI"=RpsHib"h%M7&T/6&XY7@%]sX$12=f6-;N`i"LQ*Mr57&Oa\LATgeGWm=rB;$>fj5Uc/U.J:_s\-br\2ON,9FC/4VmoHNNGp`q.Wb=V(mh+?E.%Ff7;>,6gI5!>MmO4ol<76.0M27n*pd!Yi#&NA0T3;ARskTC<4l8&cW78^/C^4ol#E#G5N@aXeV69'?@G2@#o;D#UXn,P<:p%T&tY%=MKr`PM/CK8\GC8JshT7JRJKX#$T&Z-F=7TP?*lPBHMU''Udk*511gS/:7L-Zn@YT1RkKedW:'CRGDZhZamqb)q:D%'J^KW\mT#?%qOQ,roK&[=q@.2b7YJ1/e/b2!Fb60K-i)gFWB"+LA2]W+-[e?9<:E+-J,*h,AR\6>>5?<MrP[k_RGD]9oD&Wfq&EioSW>PlANgT#%,M&&TReI#e/#t=u9CS+-WiG!,n<\)_Q2]5hP/I<_Itg7<o=s?n/=FbG'`OHsZRk[:s!@\]S,B^37bag?np-D9s,qkc!r:+@P(0`I%WC0YZ?h1C*-GT@`nkX9)&Uk4"#G5O3a`$m2r'g#%N1uH:P]A/uDeHJZAsFhl$hZ.O<m`Jh$iR3S[$"E3^L:ZY>2IQZ`I'D$dVVP$%gFP3`.-^smKLMG._duh7a!q+,oUTMm&-`Q4b?JSTUt>ZI.@E3k$Q.hEUaT@SRu\j'V*_F`!kO7TU!",S_:o10TmTHqDkiO0_@<og%2<QfU!n>FFn^@1cbd`&GaQY5dVconJa>^/a<tPX9#I>P<[OBB-a`m#`!c8G+i5'8`g5t%JP`eU2WR,CYCS(/Yb/pq-iOh:;PfhWT%"uW,c6,-B>3\J\K;;YPh;.h=;%I/V\(Q*)i1r?15?);C9V>rcWOBr[kQ@Lm#4'Noh?*Qtn;j]\H1WhB"I$R]A-&j\<+YsaC$Q4;a%alW\nPI+QqQU@l0MA.:eLVEhKBqsQd8YT7;4ssoL%Zmq\Irc#[:]oFY?95,'Jg%Hp^]a68j\m'o'&_,/FA]qm_f\A1W<WA_\4UMh%_,>AgZ^G1Z0PFc/#^.F_Ad_44Bmtd.+R3E(gW6uUBm>pU8B?F0P'Ot1TE3s#/^lVNh1eAfPFf[A.AT>S-knBoMi8Gk'=pdQ<Yah=%35u,8?WK/R]F$/!e_FVLT?Jm\cS7>FV7<Es]HU/kd>3o\U!GTMe-`<!kcHE%/]FB4"cT7B0[DI[_nAgQ$6*ncM4C@*'j;6r:RJ-V%46D-jKt+LHb<[.j`l[`*`/pEVGV'eO!M5:86Q>XKP*R?!Oc19r#h4su?uu<5\-e0Y?_&+o$9?NuJAD+K7h"*;dKgqmA^EQ]jU3E,%\LQi>J72[on3^nF>-*/Q6TK7BXX)D#"k$VbXNflA=l3C[ki!-q"-)6fMi@\PXO[bqp5ka$nYZ4ca7HB/`$:JDUWlh9dA_gljr)NB%-qD;A$EF2uDfkV:b!:$h!+%r\RDD4^_ji*^&PB!\2W;oV(C1b8e]5Jm(@$Xs=gY#IQKZW.SCO:)/NSeuD^us@%'<H6R%lS(?"\7]%D(r^NmFC`a!02SBMmN*W#*h%X?:7/%3$fRq\k^?Ajg"11Zjb7lZ?jU[`&Rr<"4jBs17/Y=S(*b29B8;kk(#H^0\^E0nsUJ!-8`#=%rG+H^j((RbGTa\oQ0BpibX+):<6"I7PRljMDH!NR%-/5SLWj;;^9o/QiC$!f$CD?u3D6T]R7qiXlj-$*8*'4p;`0?*ZLn9o5q1es%R5s%TPHPJ)B0g7O;1L"CQF;gV3Cq9?<C:pR-3l9)#O__Q%m"beX)PdB\;Ec-EgD^jN-@0M`Ytc@YgRR'Mao6R&(ZP.`WrHX?32m8%>8@jFftP9K+:^\\i,"FU%,/b'2!,7G*\)pmWHm$q0Y'WKZQ`Tt1Y%m.GZSK;Pl$QiL,GTu]0C/)WACO$1>t/ph]QF.9O]kbZBS)7%R$hO!WZ#]Mi:;P:#s?AQ41q@UBNnWbm>,#`G$2t)R1*%,di>@-(F%"/[[5(F?1Ran["E,\E9T,19ii[K<KQerrD35met6iUdXeft%=m;)aZC*tf\n[DV9G\i3mEDX==g<?d0n)bsK22%O_Crtm,J,r5&%tO/31\/LRo<kt"<@PW__8I-'6m4rOt`.,8ug1D'uDQo[Ni9>%((b@YAglVeC6hF"9ZEds%UH1:$*sg1W+tm,'4-CI6<=]PB5&fbcD2N$pDaK2Tt:B0\O#pP<au=O9<oQ.5J]^6/'B@3Gt@3'nfkGt%d,s!&Qidak2bDiE?K#b\Z3/^e23%8\JHC9lEg_*RdQN`VJi(^rh[/bL,?(TB5;27pH`_6>B&T<%fqW5_8T1m-17=GA:3;iJOnt5d%:A$,MKSX6\qOc;mbYp,;BGT8)kmhNMN_!`[S0LlM<1\%S2om60>@is$ejB/U<t$uSR2ejm;ED%3;sDA6X+8Du7ZXZ'Z3!TnOSQa>%Cq]rg/HX*g$$$mERT+I/Yh^DjOV(u_9HM5!WfqQlqq[ogLC1l;A8lENi"A8*d4Ej!\?,tAerUci<XelETQh=a8SgOd%p"GGOZCZo%fc'$:b4[>&Dn^FhQ>(/8Eda(p%FRJf1M!RqmZCg#1R+t8;AWtpfSl`4SeorlkQV7;ANZ"&em1bOfQmT/8Q+58AMu-c3CqC$cQI(6%EZEQ!paT^80crWcZ:Jbu,Ue]lh?=?H"sRC%68f32cQTg?\</sf]T1C5rGD-G/ktgI,MG5cShSHcC4&`3SW`Ytd'=#59A!EYX+INM%6:nO"LpN,kS8i%ob;bTbj^^"7rJIBPD:UJn5+r/qen7\--QI`g&+'Q]`lf'O_bc3?O\lt),ru@e0o0G8(VSp1c7_ei_WlaK,aI\Z%j`VY>ouOUOk6hc.qs:uaU=X+%hFX=1*TpZd#/b?F.Al8`^PA@GUYfn&[i4e,R<e7$s(]?s@4#?"2L6dLT?6h(G,AAWe=3R@2,g[/%L4_tXCs["K)jtaO(<bJo-)q*DMQp`m[:ZU#r-E-9rm"J'$n5Q&aD230".+sX)Ph%6.,&Wt2@94,JS>HF9a@PTdDn!_!o"m&*<EV/%^ii7KL'2Th5_g=9Q5M`fp$2F$UR.sT$8rfj)X?cbJ'dDeTG@Dp%8NBKYJXDA1!"I;4m7Ib7g>7RWj_5s/_!EVHpj%"eMFU.pRbd`%rF:p,oW%T(=1.dj+a%bFV;%P,^%%E1QS[h'<jhr>F-=,:@K3C]*c`CspRao:o/2br@idW'\'qCm2%Zd"])gg(Wr:YU"[<hh'r=jo%^P@e41pZ!6:HR&#]@O!2iNHp<2/C_X.c?P;CN\"^HE6R"6pof*l3pjU[fQLtHD8f%27q6+I^`KrAFa7bnoV1b5NPQDk"*+EWg%4F%iBMQ2UFsPWfaiZJs5N8gZ/5DZ#nt8A1oJYAS8W>Z.N-Y)Yh-]K`@Jp,2u\NY`A2@+e6k=#&EQS%dHT.hK&Eorlg2%5D`AKM57m&:%UGM83.2'hbKdg1@^?<V^-p*\EPHHnkl%e8?4`l2a$.([53Z%:jG+TG(>68dpU:DRQFVq*,^R5[+PC`M/ep9%-HOU$WXl0FLQ8Dal%Z-:7mrEek#^KT1H!3O.6]CD;g<Dg<Z9c8:RA<1&7qSTMV7f3[+&s![LVTS:0#J>LDi\->(NSo'QPi9_%%R>D.DB9*.`;:C?pe>\Z%\G<&WLcq`78saL%[IammMT5*n[=s'sR:c=*/VV#*_?,AP@fXFh)c[_Op^pGA("O7+kC[BS<H#UbAPbJ&YkLkhg[!@E28fZe#ibp[%)+&9)1?W#(pM)gfk->l3k[D`SeXVo(G#<h*Be=@KVUT8gWc:`jkX7iIm(\PRHR#[2$37Q^e:"n,kNfP)HHD8`Y*N]l(VZOp]g1TY%Sg(GG0'(Y<(Tek'g@'0=h8Aqj-aoPKG?u6YMsB4F?>-$DePF.u)Yk6u,uEkuo</?i937V=<%,JM*d@_!a3S+B+i]<Fdff[;HIs2o%7O,LIJb)Mf?K_jq+7YgqVrcFSS`Nh7-KA'Us.;U;!Z,OB[n0AB.8^)5;SG*b+%HK##?*mUs-'](X([^54*.aj8&-M0Tg\Ik+BE2V%HOX:&s($U(9M<%(S,G!()hjLai&nDJj8'iC;1+AC<bf9iH='"JiRDoFY=>SA'e8IDTH,K\XkN)qTnZuB*4(Z+#[Yii)`qD4nCrn/%IoO#h>i!4d"[cTdR)Z7C]@r2'F9a+r+#JHZ5BF.VP3*n3!o"MohthXY:X"q@E).JOK=H=\F505_%K6ss5ZMQC&?3lVorA[3Me0&\%?\e`h>U=iZrdTt`7mnYPrt"sGKYI@N8cOVdn^I9^%jbOPWV9I2mN1cfU`Gr03+DT"kcYNA\>fKGZGrL[S,G-Rbs+SHqD2[L5=7@'%8'"lVT-:97)7%tg+o>o^PkA\!PkA\!PkA\!PkA\!PkA\!PkA\!Pl57)Pl57)Pl57)Pl6*&90JuulEE/@0nM(e@tF[JX!e!G86\PY%dGddPZtr*2nJ<Kej4Fo3c'_<qo9!gj#1OP!^dqqsipTDUqP)\Y+>"5XrSf\\D<2<Th!Fq<`]Tqf(U_ma_5RYa2i\H!K$]?Ai+XMB%Qpb.T'p;!b0gP@1ct%f#8dms[lcK:,L_9Y5_g\AK!Pb)UqH3.`6[mpbSt'rg%H#CSq"!<LXZ"=.8*YN+q)TKPqC+8[&88f0X8_!B%0a%=T<:-I6WqREK!i*^jLT"jU>kf06",\Dc/ha[107QuKrCsZMXp8?dFG'QmD%.@6V"XuLg1[#i0Ns[Sldu0bhEh(C&YW]<S_@_O%*i3KdjP$5Cf4u&?KrPa=L*jr`@rR/A0tMcWoSeNSb+;EsHQlAbS(6+k,KdqH3N@RRU">%t60IRk>3c-W\Cef.OW+OudAQQM2\.kD%<=j^hcU1>Vl?)sUf*/1ts.HCiIpnW9hu<43GW5W>bFma-f)E/MiiJ80ik:%rXr>hkE*N@kX:ILhN%bG5ZV9#mB%(Kq0h/S9UB)bB%;4>HHs(o<oN%K-4+Urbb%+)/'dWc^mHOHQ)c!0>V2NhDW11KnTNl5r:FE?(D-R0Q$:R&lso06^]a*d?e1[NX1pf<_G^Ajs6l;(L?%X"gR(OZ5174`XKPA%k_*%oK3f!/q:MSMocXiE)OV])lTJgNKoX8ht5Y6WK+-<Y"JO(oMSI1j\\M?DHBp`4=I\YUm#]`8;QM/cbVE%C;`2`20rQ4XO%id";L&.#N3uF+#Ns<KVP]XRb`4j!tsnVEH'LpZm4Su%sjdB[Zo^9'f$U=FKZ&.J*VSAC4f87r`X/=gU2d&J/W(V%)fMJMX:?0==7Ei<r\Kp,<af5VJ!c.d2YnNc.u_+9?Yi+D"sOc[B,di@W"&9@EmtSl]&H&*4reYV5WF)7Bl>UfkZ-C9DA>mig-5j]%ZQAQos%?R1B!ZeaJ?AMLYFTF3N]Ok-H:13h*(C)8%k^I<Wu7?H%''\J7tQbR[`>Hl,:i(FWigo_?uu,Jc-:LDhAfL%S#ti2+(s*U%2"I`<PA9uC=FG,+003AsFRo.$Rqs@^eTtMi$")6^Vc9RC[kj,=Wi[V=eJ9+bHFK<>dLo8?XmA'\+b(?T%gO+f`crkU0&E^Rd;nG0%^P8j?T1*L&%l34E2762_hPbdj)pb$s#-McBUtG*SIM$M,nLF#"Z-,`F#8:4+(.SglaK@45&XZ.P16X5NR94j:&5^eTR6/8%$6ihr%/Th-.&&*ZM&\pbhXF4eC\s>$!F95\S]VhD6So&MAd9WEbb88c-qg\YOGCgY)SFY*DOdCrR7DL*k(',Md[n*LGh)/[4/UR6,$l?H0%h=n,!1pLT)2-Xl07O[l/o/^Op=:$:UAQdhPT_6;DoV\?`0n/,a#qWC6C9Ki'XsY4=Mu`5hhUHAVFW@W9>,%Ri;=D02V89K!1@Usc%N==S%$<RFEU=<#J*XE8TqL*Ri,60g5NW:TZ3WcZjCVM$<CCekd<k%hS&]H'baS"#t(jk33*BM(91g9\tfX)6hY`(]+Is9ATT!WV/%1A-9IQQZIhC7R9BjTCi7(BR*[ZXAa*HEWr1!\ToDI$aR#3!Nm0>e_@S\b;;#6>GoRT?go^!ao[1dHH:+Gdg2r75.kpWKRuk3cA!B%GNL#-JLO^35Ub$'Z!;%V+`:2=^]"m"opU@rD*tiK.aN5Ahh>-qC(^q#<lDHl!=0()OZ4e!U@,U<&[m#M02t!6@_I*!dsFlG<h@2+%,q&us;#OS*eR5mV_Yk3IEt$Q8ec#lCTGXQWmY>p6Jf-CLNm86Xkkf=j4otq0f26lkO)[\).ME$K)A6DErpZ2\9(ut'Xi=_-<[_a1%D8NFs$IWh)UJ:6]Y]^+!D%H-hCC!U,"bp5m<V@MZ@(.6.3lL]En>@nt:7O7'ZBN3B?&E8+lU6>/-kG`fCRl%;rK*mdJGO4)qgh^/%HiXmm4`&^o0a%njD7>r0_o5pme0lr.GWMInbI?a%FSoA'(!46^NN^C;0402j^\FCXs.tG$#]C.m/fSR)U`d=KaiuMkcVYPI:9-h#%'j[QG#Ch6M@N,[*S(Ip&U,/J[L$)q[V+e?.4kFF=Y#MkO)*&QmVhG(*6^pU[DHn53M`QAnU'ogn$)A]iL$Z;P<g)TsG"s=Xoc%?4%,^ZElk35aq%I9"&o=[:RXp73SYclQ$)`1"oTJ1pa&Q\e4c,!I=K]<%\JVbQq_Y26-^MYDmiWVln0^oENJqn9$SK92C,<?/3Om^cu%kk+jI9h>@^fENMY$BQE-%9qBNBN]u)KuaLDYB:/`RuT31Ca430)@$Gtc[%#)l8KarS:aAp=c\-P=5R)2TK&b[R^YNM``!>K/L2RT%LN"%0l[Lh)BI:)RAcdKKi+oOR!5]n24$Wk^XUZ7u]m\CUKto(0YD%ENm?bD(e(\@"`Td(F"?OKQ&3>m6`A3N-VEcfsYD\0kG.,m#%-43jVGHsH8e_RjhN07=,?!6"^)!LH`1U\npF=6+sq1^[`p"c*'U%FZ*s#c[`g9-auP_U8,='OLp1-ZDp:Fcg0[F>#.=>I-b94&sq%Zq<'X]!mr$1><<g9IcM[VCmkBeiuS<.=E,Hk<F1_K!!eiU\XSm[JmM\Z+fHpS`_I-09'GE[o7/4\*e^Y(4Mi]k4<AZb%`J1r`5Q$%cQ)!fO7NV=DR"5gCY\Ai#$ZLTqWLR4pj#_YLn9ffi`7M-"^=ihLL0Lfs*Gr>rd8ckfd[rU=IW+_]q3fY-<;4TO.\*%^NU=6FX<S\%^YZXsXP<&5@dW4-9k(g*?pN2,`MOMg=7E>bY2m@\EAMcY#7J;B#5&WoQ:flZc<LZg`0))gSa"o+g@"mT1]"Z>;X0/N-*_'OrO^q\%Q@5iFN,(a_5\og9n+FB;j^hCbD$pf.&W.l]5Dgt<C&PskY3tX((AU4'U.4>2\fF32\bG.Gj#V_Sp<W*oQ*,^q`f^tfhR!$&&Oc8!%^@dq?oI%58Gj<W44^@aoN@"Jqjn@-J7e,`aYH=jp2.J.eW&[(lpNW"s-Ybb+.[>U2NesM',.2Qro#k?Ql^J]>7$Yo!m3%MSU1QNP%rJ71f6"K<(rdO=P^On&ODmeTLCD%@=3cauo=SgaE6najlUbUDHGF8t81mUO.o!Rg*eYh8bdN.c6P]p)d+3#FO]C&J%HZ8%91mZ'j%bqipP*g?7?>3e?+lFfF0Zgu9:Df^0g8$kM</Q=E$i+&@e*pdWYp!KD1Oa:-cCu(]Y&tQ(&Z[P:S'f)f0Q\Br"2Wp9,41cFso\i6<%FDc!oM=*$50:k!aDI^DUWpF*HG<r!MYdg8qP>P?'h`iWo75L:q0C>n7J`mFgMPq)l#;9G#X]f"ukfMf:%ncJ&I9C<aPte.urJ;GR%"m+h2dR$pgA1>pD\Y4HB:pYS,T!oUCJOGRJ^Un7o;4p7s5-6<d-bkH97$%$(P=fCFiCih*Y^%'Vo_R(Mq2+i<^U?=kPWRtek>1_\%IK$,CZEi^fo^7":0+l0&.+u5o`_/7Hkc+,iICBbQ[(Q6PcgDNrM*A)u4JPmoeCIuJ2^a:ZU>J],8+l&F5LHglk3#5)ClK*f,mCU#%chB)D6p$CajnBmlVom?V8]dT<j]7?ekO&SALOO+-p!2.O.FD3[,qYS9ge(]s7&tB]IJ6LCd2V@>"c0<iU8TXFg%4Umhp:E]4[aD(%-grl2SVK'poJ<s#&P]u&c+RP[>2_b1FL-`Q1m?*q:]!D#h9-/Of%Ees*6=mY0)nNWU:\V12&F[,a&7>Nng&WlUNd3ZR)fURX5!@$%'+iE5M42Psm>$;r7._lN&PZqmo++H8j"`3o1m\'ife.aeZFdRn-ghI6Hebfc%c6'@A0qRdK<Ks:d=)PG*A/]2qH'$OaI[c(Kbhp.%[c(TI8G1>?3,Jl\,3bi7F^?E*cF1qWbi?-PZDVIthojq"GEnAm>pCaVYFO+'c(J;e_^MF>Dg"s+=ZNZ+?3TH).+cGa5sXkeRW<g8%T:e@0PFklnp.gs,8nXFD`:('_/s>@D_h:I"rHRmaEd+#*-Md4!1Q\tepV+?\P^B-P>KGoYEmG;^De?NsP^fAhc<EMbEdoN&mN5L3%Ekbi$O'cg@XN/!L3T^'[;\(@kVnABM\U`J%SsitGc:YX[a/[<tm\b4H;#5<@/M'(eJo\'Fj3,!.JD=<5[H6aRCBikO;sM9(j$j"'%luW&9F)1:/T<%W<&kf4!1YQ>0QWZLkkN<NCK=r:qn)8]KTU".bNdgfe)QE2+>MAtNPfnD)oj`,[oBT#i0<VK`)1?ql&p(FNmW/8<%[F"01&am'5h+\6V=o!E>&?)%K1qp";OWq==.])f7HE96aPTJ"PBp>JoMM6/S==e!C=&Hg"/hQiSfn.rAKUtGS?=1S7-rG/*]<*H#%hp7hHm3SPqh@Hm&K:(uZQD8cPB:@SY.C90>b"14=\8X1ghOM$]IBh(^Sb#d2=Z]$V1nOYJ8T#h8S6_%@NJIC=U2uTG-BP0(\LCdp%p3j3J82*5GSlUK"rX9s]^Rc*pee].c0i9E[p\Gi0IAa3YeA90'a2oYQ]&.ONn(b3>e@8iC7!lhDC>-)a4(Lnf_e]]'MR5sN4+-cM%C-4WS&]HjMGOUs]f2gVA89Y=b$G&SfLhHl(FnU5b>L=LAGoo]ojH77G"aT/t+ptB6P.gLHlMSX?-',ggH+jk&DNhus[3#NcHp<I@%d7@OS35R8S'@Ug\!f]uX\s4Gee<cbaFS8e>$<[9Pb_>^@?h&L.g9%sKHp!7c5.(oDh6Q.geMa)1'$P5T(Q0<4*m!p(HQm5,njhAD%&q@]9IM2lu\![WSVF5Oe$3ju3Ncll+gV:Ee58TOUUO"T7gQIO+!C)k!nrNdacs3Kc5\6k;51WIjUj%X=ce'sj!LeR.<sLc56r`87%k+bdG_?ZNk]?2;#'!Wn-Q#_E99!R*7f>n3a:L^N<V"GA4I#((m-6CV"pk-!clf>eI]1@Ua0:$^KGniMp+D%1*)S_Wt$>Ua2LIh<P%bYKUO1WTTf'm]^8=8Dci]@a(-$:2*9@C!qJ9_[).rJ0h91Q0R0g(lfWPW*aQ@D\V&qH]PcmVs,NkEW!9_/6f'0d"u>FN;:F*nInT%!`&%`=:a-)!_/pnc.Eh/3)t.,T%"sUQ2Z4+YVqSDV5HME\)S"QGM)-Eds'pBGDRHN*OI;QioALp?1mu'_PWH$$lZT=+/,a#`^P2n%VjlE*qY0OZ`Ksr4a=bKqr$#j?5Au$(.ujPk\+(EuT#k[6\G$9bJ"H*N01rO]CR@^3WEYn+EkIEX$/VMD`o&aBB9"[0M14KCm'T%n%1,g[keR@3dg@_PZ=7,`alRll$<PSTW8CtTU=M>31OK<Z;k&@0YJ8%l_BKq6*j1sVqmJF9]`/*edaf'W*0'GX1<`l5!''lqD\F3KL%b$-V!'[Xqm90XjVE(J?+(r(pXg,1.JFt]B;7V+`]<VL&##jXnu7qUiB].\5*H!<V1$^u=)nZD8\eV0iP$)K$DgAfAC7Wm;UlZ.Y.%BnaU_;:&Y6e0g,EpR.K]X:cU9r"2S^*5TsT:r-U)_Y=_7]K]#aMnD7>qb!X[E\!jC1<eClIPpPfer-Vr0P'S\A[4eBR5c=9>P`b4%UE9#hl6bu)[uKLiRIurcdDfrI[;0bDb[BVCUpt/nqrdr8dP7fIqZ069!Qq'*T_738&)_Ql+C)R>E<4fq<^7,jS=@p+4Ff5Pj)GcE%?Y:/048QhVnVPaSNmnlMGK*JVKYA$E-.G"0l,[IiTXOVM"o!<LW/A22OgPs2&_%Sq.O2GgUl&h`7Jp`?&UcEDfuoiC`c"A%Og_4)%:1)`D7VRVP8<]OQnarM$eu@0>%GIaE^CChlW0X1l#V^",5Pjb8YRKR45(XQkYJX4H#F-m9<,+*O%0L"n&qM.MMuii;PSh2LI6Xra%K@Qfs*1Q:J_3OST'uFRb^Ea>,=Y:05Q,9`I/1/o&]HA4H.7it8d)cf\nFlhT387YpH?T+-esK)m5ja-*6IPXR9AJ'#mNnIu0(?%h%]YMYQLM>QhX\8N-`nXf5$V@9KiThm[c\lCuAUEOA8dklu/0pubZD_L&P12<sm70!sHl_I`G;lF0R5`pXK=EDAho`<LT-HbcY/;2(%N;e&2P5!I&]2-3p[]:GYh&LhE]+9!VG*K+)Ad&5/R\N]+NB!-b-!Q!I9[i+7EA<PCBmo_63Pq/>d=Wc06C@0^:MhnG,uK*?A8$Cc%8AY@S/8p/mUbqL/fKFCrKTiO)h:q>HkcPDdkM9W^o+OoF,$Uh)8=jehHQsF3'!0DQ7ru_<Q2qush+frgSYTbkNR#";cpegEEbRG9%GMF.naF2,[b6jE\&u%P(,TOdtDafo!ltc#1981>@q>P[Ek7d_/?\,h[@i^PDY6&7.p/XCnCQN.ZOH%$MUmVRJ7ZG?M6g#qX>&$(7%N/pECZSLpj.:N[4C3=8RJ7U;D9.W(5T(VVis3A@AMR-^3dM!hrR`/2SH8=KC3:CeT)8e"#(_A00]A['TI`jF^Fp%CE3V3V=isQDB%TE@(I,\iS=aZ(3p`SA?-&lN#@.>agn[#N@a*)3`#gu$D/UYSM>e[gh8)O[?DA.^h*Cubm868g\k!tNf[e>HXME"F,8M5%2%YP1EV%g'IN_`Y4&]N38/a4=3%7`HX.eC-=S'q<4ntZT1Eb!SAo.dX\h6oflMF1hcFC0]O[Y:e*1Z]*!/H("oPoV*u8Xd0HmElk+4sJdm^(%bjOr:R4PV&7qK#NJPpnUPP%"a"_<gD5Hr-)d,hhqRE:Wu-noCRVl!iQKYmrQ),%=I`$1h49St3&ToMR]1Whp79I+haI>huS[d#0G%mI%1;^!Oa=WcKQ&Vj?d[P(&Vg_ML*5d':TrAmm0?]-0L![X90)K*>f7bP,r?>]pmp=EX%R-G(,3'1I-d?(2^V&7I]])<q?OZ@k^g%CGu[Y$djL,LY@s4fF@(O\?W^/faBa)dp*r`DDsruGo?gs:4YOISYrtB9jmiWQIWcs\[mq3Vno9L86M>6<m=L8ELFr6`lJ55G*&nM%8<92!l\#0m)3*``FA4WC1#I'$[BJ[AJifN&V%GL-Q4.,,d`/'tmN:"+--bI11"r3=\1p.".;>P>f0&mnWnBn8+aS(N`DoUtZgtO.%AAMIXZh?dL]`DXW9]D]dH^J"W8&SL=)+it<42M1pO9I3/f7'+YXZ.PYdtH(?I1I$cUA1b"D&4:52,*,NG<42-+Et/^J*aZ4W\:4E%qQO5H/aPW%DK[YTJJ!"/jD8;h<^S+qS;<jfA*CcSkfDR#e&Tg\M2Dme51+rq`R'</d#kq%VN7GB,K_7pR)V(%$se)\STB"qPVI9o%7%FTEs(K7=A*CcSkf=)!oJ(IH&Tmf.L`+.XKh'MKrFH0fFGsf+8'jg?lj/C-OKc2j<u4(Cpu"]9h\0$^ZLjk`NH3f<m6lhuEg`<a%aiK.,[8/*XoG_0XLh,b`=;oAL4SXm(WT86TR(T&e-l[B3BS#UAK$"f@$l6r,cS_2DoG<0sPTNrep-!M-8\Z%$hnJTZ)&oJO0B$?6%_,^%o5)upRKiBK\A<'0#N=),4`bV0hI^VTccf#H:<9Jf>GH`TRYJsY8ctr(#1p#)bp/2jW[.!Sum-:k:W*hQn-fd[HM-YqpT@.0W%_/:J+?Ejd5WcG&^+6C9=F%b";+jM4)+u3%*!E@qN/FGG\)O]=`CZe^`84#_;WH`6Nr2L2rX^83ZlgNS\.ePR6Ked+nBnb9*Au"+5%%8mRM,cm=4doi@&&1$'h\!^bK3i4IfFpSglSQOG:6[#oB-no:=3;BC7QrtEdo5K?nHrN>BIJJ-6.s\8,IGf`.eHcS8M%Wu?=Q&qk%I,N>SHpTZBa)A<qI.TD4OcoVZEI<oQF-=X1^!d#8L]Eo!B%EN#@dZ7_(^J`MGan5L/GSjHJfaOVpReOLqK+m_2Z/^G-=)X,mg"<I%\m$56,g.6f%bb3Nik]0;jiD[,0+&3k0>ins+7\Vs8$;:SK;cp6[jMD0H\:.qH?p-S`DJS'N'sr"=%6GS_T"SiB#Ho5DTi^`S;`-b%4FnYn,F9qHN0(!FaS(>'c>Z0CIa_.jGD&O?claQ"K7[q"Ot6QQW@(3Troh*-U8jVi1Dt&#A!np#,IQGVMK-j%_%BOQ,0!aUfWW2t%<]ogsY<7R9BlQ'0,^U(shG417*GGk>Zs6%VN#PnGU;%\.^<=U"h1SeMB/YJ2@Nk\,Q:3.I3uoe.SjgY!-+?<THf2TL"%&/_@?L@H%iYIr=^!u\.NTGkm()\%.)l,A3c,Lr[p&2(hWBH&6du<D(V?sufUVbBTYfQ<I_5#u=()[BFo5tT;7&5j%c^Vis,MDl94tg)acD]Y@%e2MckL!JaM?4n-ZYhVBb$d685j&(Kkj0?8LK/h)pjTl*gW/?>DHYY2:gL8)Wl5YS+cGl#EClbN/WG.m`aSp3"G]VN)EHM;b$W=@i%aLJh'S7Y3L&)ukD\=>sFX7M"+pdPUOFqB5_]&65]4KB:AQ=6qBLds)>Y'ML5`+4rf\j64*VX\W!G5doK_i8a;f];RA/usR;&NB$#%\4Je^a,c#IpZn;k4P]SVJl0/h@hBp$ViQUSa!7pH\66kiEBB*r&NAg>RjT70pm-G5`l#cC,N=)\!%*SYPBF.'A"ES1c3to_@=oNH%lGu/O#aI(7nB.%/Hm00.i"MY9][KsQf+CcZ_IJjK,C;b;`cDq>)KNb&0?3$QSgUNINO,!@mf_t$Oq7I]NY['KE*tYVG[;gP_t*Pm%'mU[_^DFdLd._A,kO]2m`(VALKJpG[2k@`AH0KO;PnT)<R_7^b09.E>(SeQ"N!^Gm`GNC-:S_P=Y.\:,dkAU#Bb=*bf+#_U.QUhK%9e4T8qTa0$bc'9nI'(iBD2kKJ*ZmjBF0!fS.F^e6ZglS%!/AlAphc</WS_;*Onro1&ZOZ;cQj]7SQh^X6n6&0K8<JH0/`q3$alBk%6n6%enJZ)ukV]hD#o6(QV5[rd)'S^((SO7YV)OlT.##O[Hu.SOSS4^9/G^gN4udC-S>XF,Pu+t^m$@&\M\8Gm8["XF'TUs7F<A*C%:*0fj=qr5LRSF\,-el\9\_WtX1P@K.DhK4;,<s6Z''%gSmuk^R<sqfOTc0U#/Kb#f=qi1uO9+#WJh9$H%.bTK1-F7K!nNMWLb6IU%:>"sH^reHa>9;p:,D2KAdn@F@HaGl8gH%s9#;3:unBE"<oNY1b?S,CL2Y_Cra\+#N<;9*qj`j]uXHfs&-._LUY@G\mg.VAkZ#Z$e%iS+N$()-#S03KTBs(TmJBY3jb<gd*\gqdmOJH90J3qc!3&UW1GGLg,)k_P:t\qAh)?Pfk/"(#k<I1M7?S#\ZT#85#%C'P;-k?VLn%h?^aVY[Fq.2OGmTWpL@_A$L:.):^7n*W.--"RL0t8g#Se]>7FpIRMk9I!aaO\j7KI%q3:lmn+^"V=NXh/Aa%8RCRYR,$GF!]!#rF%&TusjHU!r0k[8HqnU99,%>Z<(XG+(SE7&NR8#$D!FraWaIq,a._n%]$rc%&lNBfHK-ZdA>oBepKN4n2nV\h#oD>"70CuM+oCWim4%jaa+].93-KDC#V_@dshu&;g:ua.bV7BMV\b3sD-W#Zd/IGHCMTYA0AOY(A/]nr8rK;1=,s=HGnmQnQSW<QTB]b%U+hka1A)>2_*"%k%<(<I%-2\f,*fd3PR'>=Q(TV6nZ-#mW[PX4Z3q\IBmq(O+22g:*9;WLeoC2bN/-47:.^jgPPG`;Pcd^kBINa"^-.!O/<lF%PqNM%SWDu@`]*),1n$$f:7c;ZSY&W<YErB\e+j=Lj$u:nMPg!O`QOkHdmqm_`R7?PO3Jf9c4<o30BdDMl,MSB-]4em5C8rD1gTUma=O+N%r*nn[q=]ah:$6/)&+o7W31A,GQ>Z?.$KFV)q$B"P5,B,de+pu2H#B+D3grgBP36H;fgXBc$)`r_G6ZH:IcKU;@;7.:FFLK:rbi->%'2@YF.[HTI1gQ=eRm*:d0:$MP*g<A``pBr:UZhhhXC`GHk<\U;+1Pn*=[^`L&Wg*U@7Qnd1nEN<M'FIo/=J1ZH_"S%?/WiG9V^i=%p6QXddfnFEB,aS.f,<qG`7[T.q+6]4n*s,U!,hET"d$GO2Oa]O^dfka8`,`di4u7hZ*u?$N`WfZp:WM\8tj\PFRRcUbtlrjBOF&a%I+d)[T6N#o3:S*hO-(B+Zmjr-%]p`D4JG_KPt$M2];cSA\t&L,g<$@*N-EHJ83_gB53p*p67QPA^bUi?]d-W-I3J?QEGIs4Z:<nt%Z]8L_M^9T1F;H*4/_j\W(>WF^`A;^%YKM25\f8CudPH)5moPMVUmo3fg%%LS'/k[$FMhIR#n9fOj-dLjM^!Z7DR,'$Tl9/:qo"iS%7XO987-n-R_]uNAb_NYfaurhH1Q8[(*m_nr#rQQ(Yrp'hHnemtdjMGMj"_4spFpi@U+t7G]lLtT]'-lCJU8]]cilLN7#ru@*L.Db%M%"^NMDUMA^9G$3<KnX>DraCN^)JP0WrpiK<.S?))[]Tp(h"GFl4&GYr`OM6iTU<@k8<LQYns$>Hm(ZZENPR!nH<2(:9h_]i>Lfq%f0IY7^bb?b,Zk*lg"he-ULVs`Z7uDr(!dg1Ea\:<`j-trp/bbB=d#Coc2Ug05Scp,MA#XUX0ElG.ZE5r!k\$7*S?Xnn%FJP:u?PZ%F<N6WK/u72&+ZFfG`GH5R;tC$(CY4pq1@RBKKt7tC]COnr^53W/I=YS2RPMqZ%RFGNe;!@>65)%Bj[nfO4(QZL>5t\GeU1kJOBoW%Lj6dpA2!C,6tm58)+I`dMmI]f%]ITd)$[ip2u^G>PItkt+8Inh16c+TS*m,cW:<8#?cnk[$[;.nB9V<]pY-AUQVm8rPJ;&QnD:5;%`gs>S`c8@^_JV6gs8I?lJR)\=,@^r/WcO;3@>U:,.^2sES,/Cl')C/c^O.P8jC?hR3Do7U_K[E9AdNZLI%*]8m5I7"-XU.q1nKg(%G/#.H4>$[)m2kGZ0qZYLMiaHd0)7KY5d8aTp]_KgL^EM5*\30u1aM6J0Sg&(@aW)\=<h/T*s_C;gTdAK5T%tup.#70_'j%[a=uA@%&QWIr8%@shFnbG!b*Uu[5ti=-4FTFJA>^GD0LSnBm5r[p0ReuHX*io!dQfJp^U5LoN,.Cd4q&?3_?sc/%41((](,^bGZXa`A$>j!%4njb/JbaPt757DnlYA`_C8u8aQstApGr!`+l1_XE9D#i[!nQOe[,m!24cbVC79,4#,@\K[7CEFR&FF"(gV3=D(nC5F4`.Dg6hHCZ%%hRK>"!;lpA7Ds45(^Sa,*)(alR04HBCH\5lHsOQd'R+d:%lNukmC-@k-U,<BY/5u_mUC!&(_d"9Etg]X_qkAnr%RV_m"@;Jm[+c%*Zi4j\bi3-&lgE"B@j:H-G@<o*kg'TLt9K#@4PRj6qJYj&EPnOdGPF0Nr@`.^$t-j</QH("UF"[mbQH!S6lcDb:101IjE2,l:ZI6%$Gr"E%>itre%pGWR-=P'cauH:99!NK,:EgNm=+e(%`:A2$7+?khsM`kM'hqFXP\i*?&3;Aa!uVSd=Fh'+7!::d1:bS*e(N7iGa1@%3WJueI"+<mA+kQ#41\-QLs5V+,]kf"bjlS-3ZX9nb-2]+OIV:_U>)Jk)FRpeMs<8>\i5s@f;eV6R"?n8+g9l/\Q/l7anL1t1o>%g%E*uV@5O.D/LdtF@YX_MX)f,XMdShTHCK9<>$+a5Q9\6;+!3d20\XGW1D1m\ACGq<'57Et3:M]n%_4+^*c&k3S;5<O\]X44%'"uc7%nn))<j=tSL_Ygd\WKPCK;nQj'WK5Xif$1@F0#N&hqq7>aGVc0YrcPS31B58G+C'MXC>;/+]LtZ'i@oib>b9%dcboSbQ^Z=qYqeK$%SNb[XoZ0)I^",.ME!h4Eoc8`7^aRg!NdO\WEkL$QXed$&V%q*9k&qY?]k9F1g@%o14;s!S<bA0Q^ZokQLRIqe)f1*N0"^]G[g]RB%T[%T4q'2BqS0!lq.\ClcITAor0TI<;aI;mQT]A"[+IW/!`T6b5I+lF2*/ktLofCA]#G*D*qo`V)pn!*Dd^Z>M+0qr]+HML$$L$XH%TqRuE;@3^6*;-+IV")?8YBFhpTMFRid#7Bo>'+:"?d\C3f7kFfV5oR(@j>K/U,UNhjDs6$)u6)N3'A#iOQHic%[7ITW7?42.)8[D%:l#,lI1JnO'OW1`3ljBGEYMp2(dOF1FAdJVa;D_F<)J0C@fU#\Oj%BIf\>U,5f_;7;&!Ef(r5?42M'Zr+U0V9C.]Q_"W0*$0UA4U%$8?3'+??X<ocN7_4j"T"7CF'rb(naBlgS81PY\M5r/6X,"hr&9dms4#q:Nn4jhl9@BJ8:<nL1"Pp&0f0nr8#KCF5,5KtgtTeY@LY%Q*=8^&\*;a8:<s]#&b#_/_Bs$h_]OEM=::8ljGc']7-F\_U/e\L'i4V0=nW0pq(uPrKO1+f2%46S,R<(^j#aoX[9<?53]\.iNN)L%G=,+&Y$]7D`mVii/"`TLlPIh\^`.#(n+ui=QbDZ#@T//ai8]%[_FH?seY#"`?,,m+3U^$Eq5tft\spMD+<g4MKf@)\MbW`ET50fV%YPLs-?THEl+'@Y7NCb*Kr(%ZGGOQ3_=j5l2^EEOqnuCRUU=(6QKd5G>2=b%fE)g!1JtDaC5Bh%,oR`\(?,(>0_=-oRpT@j7QITXa%pk\D8Kk#takZtsm!u2l>3o.Ds/lC*hWZQMW@JY3HS7Up]Wh9/0P0)VS$U9MZYrpLLlPKQ#T<KfCHIjh*i>QJI1O.M)r)Gs/JpYXa%rPB)VJmq0hIFlfsM;EO.DsI)l,+T36G`Qe.><M+rHo$$!03j<o*6g4t?,,kR@ZS"cK^\a@8b1qB5L43<'>Eeq(Y^:/,YnBB?ar)a%kV#lKlPG$,bhh?Lp0Bo6g\t8*O8g9Y,Yf8,n*s,e%-:RhVKn4U\h5"NH\;&u^TjBio0fD"ia"e6((fu8+37ruGYfsh<PNOJdO#cO%j>f-_]7.KeEjY,RDf'O0lSl)NDle0]_QeWPi[isZ$Q"Dh^W/9-'X#>*4n&6Xc]#o%H1JW5L],8*n?/CAMW\!SOV[_Jn+qaJGDWra%PjeI&4$#CQd4*uGPBoo#gOnpJM\>V,^?[_7h9t+h;;Uu(UfU=iY2<"<X*t_,&,O$+(G6QAg7Q?rIc5le^e*P<n+qb+a:G'ue%b4h%)X7:%T-01hor_Yp'$b=R1O7SjA<5!r?,+q:=8dNACF=AY077j1O5_/Z?,*VgTeRZ&XF#;-$pnJ]\hEhb@Og.`olds0iJ(WNYIrZs%=jGudpJTY<CGp>"*"sA548=(ujNHCknlfmgSUeT\S.MXa>e<Q(PG+_i?5gdhDs+,<9C??q>=WthrcYCqmEChL&B%KfXPR2]H\phX%e\qY.JeC`&#9Sfpp94DZk0EGNlIP+J_s0tfZ_Nc.^G8FWfD:5"3PI$nPtpp=ftYb5.jp*b0?VDggH4]*o2am=\N\Pbb0=Ad::]bA%]IA'ITV^F,D\&+OlZ^Opj4\?Bq=-LiXunr+^F:g;qEXkUh_-EC:R<_]]j<_Jl[SA>p4d>ZXuCa5QhsG,+p\<Q",Q;KMC$lDon2jg%ZeX<lh2fVN`6)Q[raN_#C_`*LfDA'r+.pZc\Qn95H+m9O*ZDT.o@I@DV6(IJ$CD[5FcE`"GXtBX>J>-!P>i;9Fd.'s_&UC/l)!El%j%K8t#Uhi-X;;odi<`'ONo3AMTX-Nbe/?0]b0R3Q<3LMS^)BY![+._'YAWStHV1,R>Ylng[3K8_r9UIKs(oD9jD':pg\G,]h6tY$%PYC0b!ATFt9)6bY_2nLCRIeFekESa8nl^'/[,irYD\\_\G9=(3#)e>fesVY&cRdm<FR@@d.Bu^T1PrNhhB&I6,uu\^c62KI$o2u>%lZp18=?F2\8?D`\7kLkB[cs<b%"WV<X2$Y1e<Qc>=_q+p.^\JPDt>7%_h/Uq<m'-qNP8bDe[>/G*VAae2cf70bi`4LQdusn?NW`"%:1s&l@#E/"gTSU(.WLOocZQrRrEb2MX7YSpniH]%G7mKaM*Xu]/he^*5(Da[9_M<)Is"N_q;ZDNINU6saO,n5==Kgb[U<`p<QM*k%'Xr&dn?JPD3mZ4]O12a&b[H6=+PH'DcSEdG-fZ'R=L+c6p:"+JRRh_=LdkamEbM5L__gZI[2$'6I:#Efk#9upri[Kf\5L-e]W1GW%-IC(s4c]CCMhid`Z3DUUOGr!Dd/=,MToHSHM2`A#3?$V0o*jP[_](9*H)op[A8j:?:O;0qqGTn\Dc$2SDp:Z;.O'uR;DJb1]N]h?%.R.be(\;X[Pc8OPDS3HFDC\q&j-RP:ag&Y\rM?I&1@:@o^*bq\14S#,pdEk]</cd:@Z792q_DgQ=8%pu2l4DQI@:eVl<\&.pBG/q%dTUZn=["f-e5EE8GriV[WeT!pW]7[uce"kKeki8JD=mEX6`9nK]qW64*2_)l-^DccRFc(g-[2M3@#hp$Fo:(/o+f5#9Jh[GAac_C%dE<RaHF3CnlJ@-]8+<cVf)FClm^`A'QXA"^/4.gOW>:%%1Mt-W@g0&#[)H@T@(gT0%C6DO[iF8sbUOH`^AG$;Xh:I$Na]2j@1b/V%k;=4W:O([U@"kasFY9GSet6!j3o41QUN*MuK`mW@9G:4CH_Nm&Ntdk>Z^$Ka8HePc2F5-a_9<j3V&IN"\t`iF]Y)']n&>]P.JR12%f:R#Ie[:T@i&f!F\;ok.ZdiG'ml7YbA)/.>It$PGE6!:*d$e`OeFeO5%gI'?_Lk3dJc1eC1i;.LhC>eJS8tlf$QcV+6"QaR/O=@H%>1=&TI'7giV%t3AB`$7TNn%?YM_fLPTAW;[ij"QY]Sd!gcHa"IYg=u]!=^dd\`bocmH][7B30o3O28-$rRCM7p9T,^OWOL(>7%[8%#u7Qd^\p8"55&rV./$^8ct'-DC?;R-k#/Pa?pMsFX9,mh#&LSL66Ci]?HB3di\Bp[1qS-+;O^nUlK<En>.C7ZlM:NZ&<iSumGRnR%eTm]$8`TIV=mU$![^r[1fuh]Th9]&3I4OM&7DTi4lP1O8l@Ge%Y3p%?3E4C5"g.E]ZTt(lV.6b.E(q.!gSV@Ln82;gg>>@<<bd)S%7LFp2i";D%BXgtK&Bj_E+Ud=s=4]VKqpEEE%,G[>M3ViZS(FS@/I2UX['ZGUlN^onc$UFN(jgDt]KB*KT)3l5-`h0lQb8bs[0fjS%BXh=[>(u*nH&ub.g_Q.7%Fn>edRm(kHFPG&945Q:N:D2(K!tu%q>G'Ic[umP%aQR>Rl'^#0Rbj,U&:G"@Of%_Xn=>QQ])IfGo`a7%6NXu(Z]BedJC>-`jZ\mnq\L:V`l`ba366RuojkZ;<44k=U7dBDS#ph-2e,QO>L#Cq]E="(T.DOX0FEK+[cg"Ra9W%_:TiLAX'E!*%_T;Gg1>\4&%*DZZbr"$1G-DCtddDRj["htbH/;lX(Ugc$@eQtnhOP\YI26V%7)&[RM"+]=?WTpQ:YeCX][+4N9MU<H_5/KZcFk(a%5'[mFYgj*':t+'Ti1bk1;Tl[J/`&3m5k,]Tf(g],<C@e+5]i#!Xdu*$mQ9UB=G92+diQ+sF>@F%=nN+4:J@`3&(5qtCW"fFol945%3$=N/_6_btgA@_q"cp;(:g9SV@OL(6:=9Gq]$Lc*Xi+#d#tBYn!S$71GeXhpeD+>[B<nQOFuMV>X:nWtmS6l.3e7odm[4CM!m["7%^GMP\_Z]F]K[G9QN%tpbo+-(T(K/:K(EE?Dci(Go?CeS>dd)JUJ3'uu?JJ?ZVG[[$n0#SLEDMSr`3WE&!]2Og.$,(N&n+4^+Ah6%%iJ_]4Ag#?</HUNc<=*9Hp$%ob@\amNS?s0d!Z!Jh,R!o!*Zl*BHV.6O^>*F>l!p-bD19f2o[U(H.IGVellh\eTZ@RCVVs5o=u!Q;%+eUt6FYl?8=<#!biX%9*<S'a#7Wn$UUX5W:W\#E>[aKU<4-ki^N;)_`KStb7go5)FU>jo@&_@6N9.EEXTA)RY0EgP9b#;+9mHUtT%_XA1mK^7#*aJ<fVqC0:PbcS+@`VU_D=gB4IZmqB+/%,DISmZq7"Rj@Ae?e2\Z2O*Fn+_V^E:ql"_HpiSAfRmRHs&oi)4>1YQm_0P%F^T:Wof5%gMLY#n_8FB=j=h:U"\To`0m@09[_A<(C;nfKieZ\7Zm0)(E`QJs$4eWV:[pZ2fPXqEjin/B$d`/)n\eN"1B#.PV%PSh%mC0$6#g)2H=Btis?cKNCAj<lp;NUj:'X`I)-Pd?Xo3/#:5M1X])ll'Th'>(eiZ83G&@)ma#SGUO;A6-7X&oP`69b,5VfnHmmrb@_%/a0gUF(qT:&i4U#Vf<Tf@-b7H]=h(ch_&fTpGS;K"l'MKFP55\IBiEHH+7#%)4P\Nn`Ej@Ye^%t4h\]5VP$gBHN4R=+Bm\up0c!V%g'Sm8@M&-.$:S<;1_@h8<6m/G9=tEIouGknUj?DHL/rdK\<YQqXf."JRilXPMj"2-[Y`cgd\4+Yo_`!CPO#[L[Wu*cK^lc0A(5sN%p9hc4I_a'D(9[(#Z.2Xma;mAO_>>^sMPeALY1!)->f68",k\jA4G0?j\P+A%nY#/!$'9B]EB%XA9_l`\b7Qs@,81Aq"R\1l@Ba0"%]2"Ama>BG@/7k9RpNn%!Aq3KK>u0U'19%,+Q$j3X^`^CLh%QFY$nHSi^[E:*ZCYFZeP`F@EmQITWF:3Z4kS5ABX`46ed8F>b!!N>%hVCQD]um*)hcJ5!G(Kp2`B6Pe17RRokM?\>LHf`^%[L2>GP;>MU&L&dT1mDXXk&BV!r4C3Wn-"!$s-,s^bgeZV-E'Eh1Hco1r`uB%`1B'ldhn!S8GDgGB,Y9bN*(*'ds1;.0)@;^Yuh2Jr<\hqn]H[/1=3P@Qps\W)ITMW!&O"n^A-.660mGFf\Y2?`aTgjjFg3:/=$;V%Ag4)aKk3(ndMlrgC!2H\p_.'S`GQI`.H2kT05Qr8jM!_P]LD01\UK&uW+>5iAf5TCX^a1*Zpbocqaq_ZHW6K$!P):j<D+?S/*_\n%HO2sKqKdaJUi_ku&5-0[b;@h0!_B2cEa8OrdoI*81NM:#pso.K8#Sm,F8E>8eam@YLcsYS)E82KD?Ct:M`[\:KpX#eQfo-=<Uae/%<dee7k^LW8Re('NXV8kT(-#"+K.21o9!FCGZbMLNEID8fT"Ms/>]VJ.iho$;\;a'"?i_I\<Po+T'!PE[HlYRY*]e"]3/5]MBXDGA%OZ\@/<r!o=E'Ti+/3]>Z%hmQn);>D0hTkh1Bm97HVR3s?J(/YJO0?3_0Xi<$l:O#TE$%)"#GPAC8Hm\M6&g)l>";jI5!=L?oTA`C%dHeg>p<m4mVK?6L>W`RXNSD[gD,]?*)3bGc_M<X3aiEhQ1(l<^fK3A3);=Y.*?KF=?"X5dFVh-SBfF%)n#F%,JUt"O1J/SNnr6X3%]+Kg<ju7Mg)L-^0!IO(183@R)Fb%H`<5sLdi?duT_b>l/:n$5P;NR9(okWf"a)OS<;tl384CV%(D:JN&/$S@Nn>2j3;V,3aZh,3j%F-^qarVaEjq[UpH=RT\_!\O<4!t`uo>Q*-a5qM,G?XHKtgIM<ihc5^1pIZ^Z?!0oeP(TocotIC'4F>gOK#N$re%DWF^c5^Hi0,0,%EVuip]5@hM<dFo"1jD5'MfV;J)t)=-JiUl42a>S"Q#@5u@T(J`Q#?r;SP6gZU@JaG_+qj-U@Jb0<LB.p\G/P)'?E+Aa\eSg@BCPr%Au[!lm<M>t*L^"Oh`tt,$I06KDf?1B$0R,e2o*]\ST>V\kA^*"b!nMf[\VIiqASj_CZ$-:TYD=Whqrpthc8N>bS..VJ@ooWjV>#i%Caa4G$Uk3(F9'@a\oPIRKVY3OFZ_8\i\2b7W#<iSm$b!)Q`hI/;b6q0ak[a!&[MGFNqgn@dEuVPBILS"qFn->ga!Z]+(+R:r5-nq%&M+2'nQMdEiol:Q6WAK.YZ0eG;KtJ_OL#Yo;fWjBJ1"Du3i_pM]thm[F+FT:NHs?!G<r>*TQ6dqS`">YWrW;!9j1Nr1\:RIe_A??%j(-[`Vd2sOgI;$*#Orq*9.[Mp:5"'?mQiPi*Ua7-$2.ql/s[5IYcDjBCKP)+-1f1Ob.OM'kVD`TIe_QW"YL@<mVjoT^i_Qe]$`hq%8E8=^<l2O3%aL3R>qCNBo@\,foO.p=,CEH,[naiJ,]2X&%nB_NEKAEeXGO9Q5,dS."c-ZD",HiY?'Gp9XZ==$g#YWb@o.>Sbd.q\%%&pH![n'4blUN!opRcY#;#?XaSp^(FhT$Qd5C!'CpGgVigCBaSk\,g^NqC<Q%p8NC%0VS%@Kl3M/Gnn[Ds4J8AP_uQ%5k&[XqL51%dbDc_!OS/OSua=1#XrS<gaeI?o'h<]C:DMfRl?-c2T!8g[>DV&N[8Mg?#2E68q=.^DP*D\RM%#b`+H!G":?)Wr4^5iED5n%_M6V$%_?TbtO/SoaG(**$L;$bJ$X,Pf[QtQk78rf'T/_Ka/-Ct4,YV]!Q6AZLN5mb;/-GWd!6a<p.(Yecg@D\KY,SlFJ#9L.9";FN0&$4u%p9[^*nXBFNY?a<koCA7S#tLW,%4!ASrbUFICZ`Ws,:669;91STOQt95##>o;Pc$:&;S]5NJ6:.VSsDF9f[uFg]Tj6bBS[(c\;h@S%m)UdmbmJ`lo]>"H%l(jG,I0I"OH.")%.0=<X+f_d=i?+.+X=RSiEAcL71>M>ri_.qW5nBX?rMt#3.`MK`'A/_qaS)OJIT[6M&=T4%Ms`[=;OcES.pFJGR<Z\=F*429a"PHq(6$DN.q1InbS^7eHu=LR$'=t:ctu=oGe67W[TW^D-2?p=c]H`+04X^LY2)9YCZV\PV+W><%h88-mVOmhODWukojtZ(/SE2k8LgPPcgk)c(K$KPjf1ViQ,qdq@AA(Cshi,N0^_^m/]d,)N^imnXooc7)K:]bOW0^>H;6u>$=[m3W%]jq8hfNg,5;;#u;VP3tP^TNK)Y,-/8Dc9q'Gum;M36Q]^-$Nbb5>`NAC%RRe/;(V32lU*r<@`(W[.i$BT$MKClgL\!!57IT2gDYH%r:!*]>U^bGO1tj9()B+j`Ab6mCN+$W,FXYie.g*;E0]XNShI;9,5,uC-ZTD(=uPX(M8"+sBkG]_^q2P$,?nscN?r4N":[2=dZY:&%;SAPOCXX+d"18cQ.VE5o%Fe";F`\s"cp4]9cfA4H5m'iSX=_imP3p*\LF:@RYBn]Bkp9\$PiLls4V0@A@HuttS7#"eRE/s[5<K85%0U!>>"&5G;>11>Y:hBd2V3!l\?@hl-;`LuA7aMC$Yb>XD@f5OW3SH^A+GO)c4J]<r%6begAUGc]oQ5qCXQ]I9[-V/WqhCl7*$On!%4)k2iPq.D?A&IEkOg0J*DsE6n5IM0l9;F5DD/[nH3aBg!"P%%IF<N.^@]Tr$jBk94IK/%W=nYU8UKW-'fV/CckDcpfa3YMc'r\<U%G6],=#Gom+XO$EcT[>RJ%mk,C*f,<?J`#eO8V;Lj=+]eq3jDo+p=I*rW_5Gu"5*I^'4E7h'Fi/[-Y#Th-mi;lN&@2X7Xsf+XZK["%Z-<+=S!0NO),g)J%f/PU;Un?C'nH%Ndl$X_TNUSi<d-o^[#?5V.JV[39]ZKV,bbXU2EJ?$<scr`=,$<ka[Lgck1PGddf]qND",lb%<:HXnYVG+/'Q*7-8YmT/&!^-BRWj`Ffp'&+FGhPhJOQhdSLgu+;U<R"-&>(&Y;&@g184m_L5"Fq&V*CA'*?FL>N78QrMV@_VN?,:%:9^DH-]Q.ko8*UNE`i?Pc28n^%'=WU%1^M;a@t/WO,#3Qihb@SQ@<W*C@p9Ml'XMKPZ-*K7p*,$HSU_&UUr^a-++*-88*[8A`,sj%]X'WrJD-TV@'T"L0&XrYLl&&,,$IrmM'$j$'[pi"DUX%C[gp5-.S[e(RVNkC=M)D4P2Gq\=EC4GcLMJcFbl#jScF'Vk.J%6b,Tj%%7cRusZ)b@HehX(sXcA!*S1'1cp@T9rY%(I:088:1g6gaC@;W)*m7S$,`jamOs4N7^8lgr+L2EhG.r3'Z=2S(6GM[,L2r!l1fOc[u%5?-1fG.gi=2&\E5^B^T1D>;Xp&)nPu9`DVJG\C__NEW7:Lm*UZITh?X'G4WL6D4WuA9\2.PhpHXT*OshgXX`Anus>VK+]X3?lQtb%YK-kU>D^k_@h.`U9pG>B/Y,uaDHoQmFXaSuS8'=</L]J;30cXq?]SFW5:[c?S$(6e;`1M.8C#>\FjH*ANcY.>qdA_o]$bj\m`N63%Ns^%jX)-t.CNoim\#l1]Je_,;TTpUa+YhX)-e@^WbGb!hmM!e0eN#"kHkQS(02S\cT+e29CF?CD^AJJM9]SI]91iB]dMV?(=:4%H%+lHK899OQt?248VV`1't%s2Y(mU,IlZ-J$>miW.c4004K&,iq1K(>!U^U!-^1rk11CX-K(`AA&u:HJ_9r1!d>Nc'EeL`=OS"V^=^%EFF8$S*J:jGg4,:UrAkjYcLH#aS7K;hI@EN_DN)Qq>H9eOiR^Kqg7B.$TLD(HR&aJq\=Q[__Za2&Z)%/QnRR368"HE[m'09C7&4^%pDR9N=7JEcFMV<(Y&i4`+^6E4-Y[Uh"Aq'1Xq]5u<V0.DTD&I?=ta`5"c/IJ8>k,&FLXf9Gi<+jL\!@!6@A;Ac`+D5LKQVj[-W'B%eFdgoV+]DVq&7_S&B:c0+21itEf@JbO/qHiieM[3c/7U:hoO%UKr:2K1m@J-:"A[$cDIX(e*Enk^98o"_?CUkX7Z(BBL&4\VT?73%g`<qD_U6c^^c_o/b.t;)0`RK7M8Lq]#k=g:Q9ARHYkFW!O-nTU]gubFE<0kT+L.6d^%#8!$hCS6h'uo5D3e&.8o!FSE3kM7<T8qZ%-Jg;KDO!V_p2$%imh6"g0.0qUUV*@AECZDr/+M`R^aVa?s"!X$5fFIHria8,K<(+b_Ydbt0:)b>_Lh0PLbC-MXq5%@YJcdfd2+%O%s-<A"2Nn5)@4(O+puuM-:7,aC\IaK73KeUapi9/djM)=75%]W3K^n/5La8!7s&\4'UPIf''44L/_E>^5?\pFsG%ne"n`=/_ECH7U%^UbZ.QfAY!:_^6l0B\Z;"9q<@+MM*n[(oUuRDkLgHtgE!n`Bb:(<ehRS9%=A@K*IKQ]J]p@lEl=dp7nE2823>\sh<kQXb;WU.ZrT%M(bcJbS)$]g\C>r0#e_i^>+'L_7pRh*cX]9j3-]SBTCVf=^D!5Q9_$jAifEqS)7N9\E=u_)!PrjpR*,SrP2UPF?apOQsLC8"$p"^%\e[8WiWG#%ggQNP#*N@Fm,`c$&nD.r)+Tf'NrdTkjP4QtS.[Vu"34_t/=m"fNa9O?Gk@'9ZN07<5Tun,jC]KrM?ijT1\$iBs*!'U%ju?QYYG_S9i7RYIdTB:qV5Y$f)Qb`]dq:/X3Y-D;i9-qmqt5@PHM3LOVJ%T"0T?Sq?R-++BR7Lb\BN;%LttG^[S)LdG'T"nlGA7K%#;85dQCM,;@+*i3M\g0smVN:3)-;MmqL'Z>;0tC@8%1ZsW-#;:'H:6V0>K0[3%O#&T0A'kna^4[RsVJoMhT1MO%9(1Im%%MQ65E/%E6**qo%=CP+`]s,_mAdd.VabE&A(uf3LO!IV\#1`?k;-MCtaA+\6j`9_Y$W7G0+[t/A6]!fJah#V\Z8S96U5K4-e/c4/q=Vl>&K!%0C=_?2n)P,D.iX?Sc"jm\naB5QZi*&cV=nn?8uhI.C\X&;*un&6n-`I_6=:Ifp>%c^"GTKrmU)Me2[8"63"d!Q&D]3*S7T"oHOaC%-a0dd$l`8HnWS,Iq3&ko#,PpKd-S-?]mo#\OE>tuEdLoGDo;tK$\I2n0;I5L0*iJ-V;Qa]"kE)gVSr)is82hhO)n9OpR"8tJ.hlJ%5E=*W?RY/'E?foNJ,5kWlNlkV.^j6IC""oFEE.cI<r@k')*'![lZtJGMWm,Adeo81_3Pm=/,"^2?Qi&=kl5"0-(RI^:mLf)<;'ZH%IN;W1,!u0UFM%m^UK6P=VPeS3.U]"XL7VE`l._S>V[_11c:JTJ<F(s-G`i?!ZdUNLnlpXk9\fk<IgZh!L<A/'=EBcP6:lSMoTfL=%gKR-Nb6IU<Xei/$!(;:J?o6,M_9h(W(e\kdOP_Z->r>k@oX>bdCQee\:b9QhB.02OkG5WH$r_mj.;h+'OZ8jj[:&q_Gl9\H(%o;'%2@Th4^SReZ9?H0*&^iMdZK%%@k#=1%cm&OE7ub=2PStT7`<MXHTem9,9qhmSS2;h"CRQ:\0PMSS)DC:'b(2<1R,mtk@[3=P[F1q;%Zd;CN&YY^(Xla=u3ih"M*)\V!1N3\Ud^(9U_'u;u-k5_)S-YDQ@*2+6TU_*U)O_N[0]bFhEkIo@.gO5f@$99">HK@=S>kSrgd`BV%<=HN0Ket)g=`I!SWiCbN<!&ns3<hiL:b>M4U"Ge>A]pIZ'W7IbVPc:?;r[p+h*Xt^b4/Xi-sgtLajWFe[:Z1:Ju2+E6`^Bl#7\0Z%:UAJ0h*t&n7VFA2LJol@Uc:%fV2!-,l)]_DRK0100PM._;N@WJ0f)?TMC@X2QfH&T8i]_&N(@h,DR3ap?4-1X:FHF=ha1L)%7uXo%WEKcZ-nN=<_'u;mkc:[bL'X'0&S38'UmR@#rat0l,0N@!ioQ\&3Dc"HPMA4SAlV,i?I9A:f%?E,dT!Lb2'nTt/QKb=(^a.\(qNa)%`D0X7AVs<m#Epae,NYFP]FkBA\qcm&b;lt>:h"2G-;XN3eLE&AB61"Qd?\Y6Y]l!SLuiB=)<Oo*5d[$b0UOj5#lM:M"6O8I[`K[l%%h@,YLQnJ]\MTc$"GUC-8T]!SN)LAsTmLbB&foIkh#ndZ(-%I_PcTI@ajW(/#pB>OK,dY%5cUF;+?0O)!2\Y67=[.(7#")=M@!uD%n/;=ii?;k'E_`GN.+<f?DB6)%onR7V.?=6+IECSIPJndm#&/)@1EDQ%i<$pXC^*0=C,$Pibn=G9)2fe<6A8O)WMDBRNJ`>l-+GD/%KNcU!N<>B.Z,gd6L72dF+RpBWImt4FAsRrMTc>85IV)SZ(_SNUWNppLZPGn7GlQ\5MAq3-U4<Tt">hA,+"_B?#oF/b;[!B!\I`Ee%I`./kDmT]6()kaWndEQT.e*=O3h$:X-imt5ON,!:qb%l_/S5qg=bC2f;#DiA_>`@,ZN[G="6pG/fqqTs'X:\JlRI^LBH\4s==lW^%Xu&MRj6J1XkA8'?%CG7P&>W,6RSlMl&-G0c6mtc!Ue0',0q*i]%#pLGG]XHRSJQA4j?P.L,.VR#`<Mn%=Ba#00ls07?DPV-b/T@T%5]RZq_K%Si@4A,f#$hE7<6g+F-da1#BH#)bNBe(L-q0lN;JIpm.h6-90Zi_"dNFm8O[,=UbPc)fenn]Wqb;SQUi?7d-1b%@c%AB)%d;d;*<n`:2+CMH#3]8MKe:^.**ZTo&a!KoD2.WInqW1K$Fj(dFM)n;&"M(#!\E&#B.dOp8Q0>d>HmCKdLl=u:OQfo\S=k:,.*I67%DP(.Y8&C%U&FG4MTs@g*&G&a##3')N9+f-j%V8:hG_41u$#*NUX2tjGS;1@p.E<sXTZ"8M9V0hGV0ia>CDu%`Keuc[!h%:FW&:&0%ENu"0Lf-EldQEmRM4Q-WCTs1+;\\g<R3#"@M>7XGiP?eKcRn<m'h>aldW(:^,[@3YC'9m9\[''5EsF2\_3C5KM3<<g,q=b(#UN%&%=GeNjF!s[N,e)&NkF7:FWn:e>9%2,e$$*ao'.>JWZP69^k>8SlP:b1'an^asM0Q*Ek:8;NQK")!)&/G&)(&/V,WXaiSBR7Qq2ZY*%lNBhA_0*a@"?G:h;E^CHM4RB"cP$4%@*3fZAU-;6<XtA^_'HM9/bpn4eS`;>U7!tr[UN^:_NDaXDc,_2&;CFFiM%Phr+KJpB#:h*%&fmh]nX<8[dt>Q&kQm?cTm@u4PiS/&%9`Zg'T]'Y^fW?-9;3\&qFF_39DU&&U83&[I0V)HA!,Lk8GYB'j]KO^$$aTQ@^`EP#V(Y:%T7Wm-5U^LYMMm'2l%@+45S`GCFZ0K[.H&^,6"k-ERRD_JqPHt4./_mFEfVGeRogX2M;4nYM'K1P/41gs0Pj.o#JO^K=)a&X*,IVB%jq&_>VGPFrfNaTQ_8a9UL-*d/7Umj5YYEm>'$2Sek/!iboN\\MQ?9*V.I3[ojlN"93DbS<PMA>ncIG`5b8,!&AQrQCjRT->TEH-s%VRWF-#>4SqdNj,kM,u'p5es1BkioaM;_&*qn6hF6kE^L:-CV5#b9ctY1b:CD+spd:(l/Qo/4C8#3E0$KPa/2(E\ClWBRXOs\JM*`%j=FW_WK[KrGqd@BPN6&68Hu=S]UoQeAsP[gP%^0K\:VBY5hRn>0uYRhLrXa)GDX[%4j,9%MW4h3Ph69h:]&q1Y5s8!fsd(pB#>K+%QSH<iX1A_b/4GeN3L&[BUe12Hak)(5:ih6LMhF'XT#Jl5[;qoK%jni8P(c!<j<7SCk!4OZCD/*^o!OmU+\9<W<7Z[N/(&E0^'^!3%"OU;5l*1qhkj(K:*_^VO,h^fAOaTrbm$m[h^0)Q22sZTS9onXVH=^I4P%A"Lo$F_UZEFALCMnE.?di*MbqU`Bb>+#@I"ISs'.?-^%[@(l,OB<MOeUpGYkR"PuXshrfk9,?Z2`W6S&:F^1>t-*Kc7Sjl=gk>a1pk#/Tr*jgM,H#AQV(D<.0"<9_h6'mk_V(!RO)`H^gqcT%RCo%g.gO5h@$9:-QA$>&;,"hWO\;<G#ilVu,:IR]QGHZY(/(AIb/-2BK,fe%;f^qA?5j*4PHi2G'!:$?o#?,VP8Q;=A"+Am85k]k%2cu8K`EcLV0QUI-70Gq`eeTu=&WtNg\XL.3k/(A3dVdXQ-Sk=\U4RO+&P5][NTF1:?'KhA[NUkm3*&NR7^Z+t);#_/g((&KP\$=N%=]<9(P(g`g7[AbET)^FM>jBfEPTZID'ULB;5\V95RRBrWF5+.#MmBSGTkEk8:9>Ka`Iga"T3E(#4J-m!LhYr*hN9inK:]J4Z7/EY%ARQ(FGq`qF4])uL>m?qUF%iHdT#o/9[;qoK%jni8Oqh)A1]T7iaR.d>W_cif>@eO>,3QC=#:f&UPa1ICXM>a>gGpV*6]Z!m]N,N,%jhW4OcRfU$8X7b\"sBf-(@X4PmR36G6ZM@TV23PRLU(Jb@Z"+08OM:[edOh_7O^)Uh'pB[`LqJ#)(&/V,Wd^>!]o:64:Q!=QHS#M%ZNue'#Grq&40Sg`Gq`qF4in1mgWC,i4QLOqQr>F=b)d4WXcoj%=_``M.0d+/3&7BtC^qeIT[j<;G,5aQ&!!`LN_9H!P#E1uM^d%.%=W++a'Z0G!YTu9(jD17O9LD@oihHc3@\Nu6`!'#(+pu%(b*EXm&iEPS7;;NB69o(,aB?0G;^hns[Y8,[Zqcd2:$0j_ZCGAg'UNqW%6b.$;e5O:sWMNFk#EpXbF4kq8ieQOa'iB"/jA1A+>W,po9(u_VgF#S,3SEPQ;C%a8.bS92`tmu3Wj^[EbAe@O3hj9F=Gp_]eJ'q_%nlq?$)2.7j@7kXsE\8*p7?]0da@/**_h`=cQ'b!#QbZ]Y(/(C_[eXB8>a0:U9"IqlOE1_%:<"Ke8[S:SB6#PS*i!_%.m7TV(0TfS%Nn\@fK]:"E\0u<c02tG?"c6<#;)"O#2_ObY#gJ>pP:.!aQckB`(R=S3+d@h8+JWsSd1KfXCdTUdLsd4?Kr$e9bRh!>![/r6Z;%$o%l';@\A4ZL!./+p7M`Eqe0F8!H;CLSH>Z,,ERKnW1U*Igmi6c#DjP?m`dBQdkV^<*En_d4h3\Hn?QH_N8bofqTYc\lI9!H,MCpX@=%XTPDF0PM._Qd%H^c>[('&i)V6QP4a!.$W],,e))GkCSq1W^OE7e!-qNE]Fpo*=V&NSPG%bk6b$g&#QEr:QTW`.T9''aZ1]m6Vlb(%S6@pLQ3WW/5*qe?@\5ureJHYi9[4nU(&J`'<`g_<OE1RR>K.qc39;-\0BN%^eQ7ms3@QS]08&7B?A?SN5**G\*G`-o#UAF$GJI$-%Ig=\_/q4*5V0Ob/&j;R_ZU..&jmO>>dhQ1an9:O%L'Npt5"X0[SQ:Y_9%Gad=Z9"DF"&s3e:L>n%TM#3.4`eeah/Ck/&u1GkZPQg%;_&*qnmIX8-Wtj,a.&Qrl,3mtRoaat36dGe]&R,A9skIq/L.PIC+c!Z6%,t+l`j-D4-,;cBEBKgKjaJYc6`@>R8c$u#Bs<C:"AXa%S0Li_T4=DNP'n?!eUpGYkXd[>9@I-8?WEi`UpuAt%[?Ct,e$R4I8/ielEZX`5>XZBbn;Ejrlm2o:-er)TF;>X6_`bLqO5>i<5<$i%kZPQg;_&*qoO*j:kOs&L=JL/)8nuLsSQ,a/I@XAmM>K=i(e_kX8X'?l33/0&E\+dq8TtM%[:(aL)2m8s[ks':)F:S1Kg_/Z/R=Hk%Z-jc;_3Q^2]st-f@-1Ks\qPqq0ZS!+'h4F;/T0]^AMk99CA$\8%f(hP#gqq\[ZN-@/m<[+[NUkm3*%O+ZCSdnI2.dmigYcLqm($:%-u4]B7G/J6Ddj_"d^!90&VOLQ97XNSb#1V.QpYRC,#+dYb.ou?9_<21/Is^s(N\m&5UeH4\S_A]Df]1&.tQ>:`AH^29Eaa!N]J(<%i]'RC`IAAoabVd1R`ijU;P+,1j]5r5/B)2^G+]6S-Fn8:/%9):Xk]3o>Ic=Y[Q:`/dE9_-Z5u\BM4SDB[W8[=gWFg*EVZ$Sb(6i\%R,ms4<c6_4dtlGJQpt)>@glA^)q2m%C`/G(ie_AK%6::_2*CL>DbQo.`G9A40o_]p/#L_I15.QrgBhmYh%0a(gt=OgRGEGB4I@s^%SkJpXH_,aZpX%B73N#mfPi9G([ni1d/U!lI9#Kg'0)IDYEnR,M8V,&[9qej69Nd4D9DZ->3J;q)p<^-k3N#mfPi]_,[nj;WF3f$$%`r+5pQ'qHLF'CKqD!)RL#KlaJZ6afLgG_$JM/eM87AcF3T']:T*%8'L"I#a3DVI*BAWe`CZ`3lfaT"/XCuY$#m=[]Dq4C$R*_`S%%:UGPF1a9\T9gY!,YnWPlgO[d9R,msdCu:+"767G,5+HR0^G1hnr/FW#"#tuiA42/?bpE>Oi,$8I!gfjj'ZgbYThH>dgbuVf>_2bZ%"N_b0Y;t#)=U0_0/rc'eK%*Tf/\/OUU*/1)Oi3p&I%F=S"nGU!I?XT!>WsN4W!I!QdD&&X,l\A1'"fo?9ChPE\Ve##,%0QaDHl]#%cuUDnSE/QnF#A/EmJh%lrH^ZNEV$tAn:$/()8J.Rg.20cP,iRK!uU5jG*<cbSM;Pe3Y&0&G2)&"r9[Pr8Wa]e^`l$N"J3=Ue9gtc%8Eh*7*Ju$_*g5(%hg$Lf:%=Np)#Bc6dHp>Nd$MrdCKaH0gA.9*@:m6r*0t0qb^BE#>LW"OH7Qb^*M%5t.*fb)C-\2G_slLsDrr!?%^*Mg5ceJ9/E<M/_e1Q0og1daTla\:[nXVQk;LRF6gTbFk*3gM<VqrZL@T*c3=1RlJ.0k:Xl<VCbAHEk6F4Bqf4(jEY=1olunQd#]%i[8cR`nm72_iM<f$pX9s*#X4BeLjEFkW<68ejhp%EG"u7IDadL$pW\hQ_ZUTJE66*5&\eCT6F%KoKfDLnp*=")'sRNjn$bHqRgm,%qJs/qhTBCm:Vl5]oGptNfe`Q!dCaSpAS*Q-L#tO>S?8erq3$tp^;K6<4>38$HKhK]:4&gBoo^$0G@>d`phl/S_,8l,b_%.>4da9M%\+X2N_UU81/a*RU*ZUI4d6+-eMsp@Q*l9ce8TB-okM=cE3'G<cUlpUZRGjUY"'t^im(Cib0eXF9cu\unf,].boY0`7o^ps/Hbpc:%pFIPJ-cC5m.HQZs8+sI!-KY0Qfpm@\kq#cp8sc=foS&f!ZH&N3Id-1L:4&gBjcU=u(Mqn)NQC7(75h%odPuY"Z8l3Qc0:+%cJOFo%c<"Ot\b)/*6oLA^Z<8KmnJudj)4-Dro\ea^4a<Pk^O4hZ1SU*G1c^K'N8W_K1MWAFO'?nd-manq=h_!XQ>as_nm)C):\hk1^@LT2%[XFZV[=$TfC&)fAg6PurjX\+.ZY_lO$\$.gnK$pOI)^BG8['Eop>6q+@p",6[]LlVn2k6<mqAngqHi\4qK$jt]9iBK1X=rKFK64P%>Ib<rau9mfb(]%[01<;G%7I[K+hG'S?i(&%>ItI&<)O]CYQOLB&NSi[k<#`R!u#`9].E@9$YR.%=1]`cT^T)e$`/#+602!GXI46(%\OI8I7i*?kVP7:>)IlZIjMT!"YfI&:S$9s=jdK&0VeA..%DeDG-L&59BeGV8e`QFB%P6i_?a'TqAq#"DkA0l1"4"1BOU+#^bJu+=%=2#sATJ-((3FBtaP>P\qG0Vu\Y'NZsisSoGfG=KQ,<O`7>Fi<p<S"W*m;+`CC6t_3oGpu*jKfqrF&Ci%FtO.u\AfgDN\=eOBb\@6%O$J%IB77nt^9c0C$G]eaau(hD1[#3K&%!]Gd,BSjOfY*@RU[s7)O>K)0A(u(T3`Np*'-(^9FcrMRAS"rcBqP5'Et>+mB?p*T/dpZ%&Q)i=Fq0!g\B6*HN\4Ff8TXfgp./eefj?h3cE&iq\hdPc\`tK?#(=<;HlhbR9_hSQXdO?)\U"r(7sDs95]=G_X5?)/9V6^.!V,qu%"=!WNLWqWLPS#bJ\;/'O9dZ]*9hcR@D`5o\V8P*6S$;=Z!@,tM^KG3'3O\T]p<gQVGFRVQ,s6qeZORoZ!a,>CC=$oRlbhl+Vh?$H%LjucOOUrg.6=^l=OmbhsllmU1MhEKB&n:6.cU`juS^_sS6KlbO[I%;ci?Kq$n*+MRGDsfdR@27o/G%`I3R=RCj\&J]q@4T]iD=;;%WF#G$[F8G2f5jN@j81,@Jh6&$-[H\8GCE&t(7F%lCqIs\#_X^8P&encFp)X;q&McNB;fTp7j)(0OqbqQFp.IW=b$+eqC=9a@?rtr%_RS;GW<I^jNhBZ\J*k\9^6/*?@Q]<8MW=R;"63<dCZNM72-LU1?AjQp.(^6(D-4Fd%BWn2P*CU5,O;ORIZouF/q)!uBs3c%?BX=C%c94Hpm.Q'$qfB*X]:cI!NSYD^h(3j3C6t_3o_CX9(W:GD.:;qW[F8G2f=3*FnV'+le(f"?HP4P%ZbGO[bh;3+C?@'mjdMO3)>"qr%JhHl\-E1AK/FhPB[CNC%>LGCCYU=\hfuHCR'+5Te+m3Mk*^WZW>Wd[[V+X\nqMniIiY.5[HP,meb-<HnY&[*kj#_GgGSf6K&!=3Z%/R%X0Q<Zcb;952gBRpT7<A-p$kW?'OnTd1"TCFfDIF[%cYEZ(pP2c8^R#&<Ym851.V`l2`G^Rf.8Fh%SbVPuX&N'=ILrt-&.4o:L%g.6RsH/9qqNlg_tg37I\*;4Gh*.[.a[_uT\?+T\*K$EhU&tVICm0ic7Fa?G87"KUm>oRH!2FfqWjIkJ@4!2hg9`Y1Fa%_NR@N<f2%2k`H;CKaH0jp%Ds'?/'EGMGT+E>(e$-;8$-+;!G>UPTfaL`dhC,D&2Ycpn4iE90_j%f21k!r2['CuF^Z4sC9>SVnU%Y'NZsisTk5%YMpgP)P\6RKW;uZ\N!WLnoN3]b1/+9/a,:_`(//`4O-@A[jd*'W*JAG'ZYDd&F<Xf:ZDjJ+$m\FGs6gfkO/-O!o]SFP,DtT(I>hS%IRdD#;dZsQ_kTOi3bs:_8_<_=<Z5q<T$qnBOu`!i3sMVo\/][[:_'Q`jiWpc*:t7RBoR=R#O5LBf;tN1E"fC#8W)O9^>nAq=D:RL%8h4hu/h71h)-_=)eLjEFkW=14.:T.(FCDMDVqla@au(eCEI8QtY]pj&D=T^4JJ1^^#>VMul40=liL6+/)>"*inKZ9m-9.qCO#:u4%_9D!]`Qpj6*];099)G4;#;)Q=BiAW,ZP%Dp3@dt;dNp=GI7MfRi*#:iND&05G1nJ..[Qqj^+3rAa&2W1=cRt#@C$rYi59/N>_<QV%'s;jSW^1!JRjATp&NCa%ji?)c^ffX]Q_ZUT_b(ncV_T-h;?E#MA_>fQDn9e;1D5sc"<f#REAlh?P^6jqHIS^h8Cj-Po*-@X4<>ke%mRe0_^tFF<Xpo!qWGQ-HGHfT+c1)bTSjU5'cFm11_HO^Pr)`^%#Fcq[!cjAU?K8VjT!sarprqm9/c7F#GKWHP2YZ\>\[o6"Ul*d6%8Q;*9CJJVC<`Q_\m]LF$;?MMi^lBOjg(Q9ES<se]7-o`SOY7UJcuWTkeVG5#!_1.*N!b=XS0L5eM&ikor8Jshm>`+$HoRljHAtcA%^"uU2`g&2K3TpjlE$8t,;51dR7u\?e]d1Se"Wt"(AXt\9dMXnd6!)>If>oLUYq&nf,dj9ue-D\W.OSq:qPL[L?7FL9,fT:ZFT;S@%i38m?lWqFh1"0Qg9;;DoYRB%kJr[Em]:#i2p`/rmEk0[KI"CV5juR8V4\'o3ds"3>FH,TA>*B4DMpH&LBk:-]9uF4eejI"=,q0(I%8(:)m*U-Es0^?!;11-MI\EY@hN\=N6oc*Qib#KOZ>kLD*2sQ$[X$0(2og-%#_t%`>4p][L4OpjO5)=3<-n(,D(]Q0X<<teFiFSj=%0CO]CVSc[i^iP90=1D-BP_-?]4.I2=mYDa;lADuj0dFP8/kL&)_)n/I7bgiRa*0WB3cY,VAfMM?mHerRW0`HhkW+%-R<-06PS3VQ%h*u`8*;u&JK:^sA5T'<U&:)o/ZBu%;'J=.\@>i.b3r&F]gQ+^SNsnTr-(0F6C65Z*lN.%b`qF>t@/4d\HXMOb!\R_AET&b<^bX_(%a)ajt%Lp,faGC:+?pS!baM.<"Egn;G&ou@gY6>M`-FJ1`NNH1_U(HY<_,Zm$C7l?bPqP]hkW@-GZ<4.S.:;qW[F8G2f5jN@j86gL%-OX3llTq:!S$T.ApX*.$RN^p3FQLZ3U`B"If"U3&3_A_ef;tP:9"F45.?6&`qbpuL4H1R(Nk0T%N6ne2KqjB03[6sj;@E=2C]BZU%#%.$bl?fY(X84DQj,t+s(Eu2cD='PN=SkmTk4d>CCYuX6&EI=c/o,saK!gXXIR2f&XaT=%@gU`#kr[ljCc1oC[bNG)@^!?YT4(C!%7<'_W^*Mg5mt_5%/$?qGMu%8;p6^9F<A-p`HiY<Vlan5q681D,mh+/KSkh%0NZrqheLjEFkWA8gUaj!?<%`U<g1daTCL!%^pk$1t%B0)X(-S`?P2P6T93o'Uk`E2@@Y'EU-6/Q,>munTPe1Q/mVIR<n>i*&)8_<`hVdJ8pN`I$gh"fI=]B_TJl2l/.H0%YbU_NGASpkkA%3^N^Bf<(Ha9"@P.'Lru;r+1AY%iTk)O)Spp3eFg%)gI$Z$Wk"eeY)C#o2dr9nC:O5^2!%?V&&%TQ_ZUTe'J&#R=f"(beXn_q8U'&%#F/pi.3iNsT)LZZ%aHG8Ra76ZW'#!_'$'),"Da8clN?8jl3$0l<:AS.DGQoFcRIg52!CMRO&-p;&Io91WXl$Jq36tn#)rhLo8=W1%Oj7VOqGj7UjJ9R]KCI4;RT<e3>,"<OGP:J<fFeY!3F+HIs4j_js)_;\rmS"P:'cgaKn'r"S\QZ:5(F1WO'TO,(;Iq8%m=>+5gd9c%%cG^Of>7;*jg=tT`X$l#bJ.tVi*ej6+7HG=M<hCa`Rf:clb\o?8NGur/H8"r4==fIl@q1F:+98(K&Z!Gh>c]lL8XQu`.:35/u6&j%On"[:?'8C<GM)jc:*b4QC!\f&[<!4d_DNr;EI7d)D^Yh$dCLHe>D1<l)n-(p_^)\s+6AqgP#6tAF#6?=2bEVhVl0$e=.@BoL*^-c%].cQpe;)ATjB)k`LWKQ45$N)`@JH?fiQ@L_*:sDnOQQo]+]2OQAe$"Q\7u]l7sEL5\aBB>g&:TL_s98Jrd*8rmBZWD2sgNmg&:lt%f=tbgpWN!nQegQ5AbYqBg\j*E4RN,SUE/4WD>,"$]Hkapn%]:pdI-K%darEL?b(RG_dN5.5*(Vm1iDcT;%B!]TU(BrLJt<pHOe;(%\^DcQ"aqF.4%ZfM8_V8`VU)LCX]NMB/kL&1(G>Duq=i)'DjMd,^1$iHbOY+gjkmg]q2`_i+.'_3%Ej6+QN+HGs8EJN^UJW%Br&o7%N,!-P.K,t6Gh;L/C9oG:Lf-^hj=Gf)^?JDoHB4Ne`6in;H/9qqNp4au(!K#IjM5Jn:Ce`U9+MaW6(]4@*7#ed3TOBYGU6leT,`0u%Dp%O36^]/@!cjAU<rXpIR[sWjG*&*uhYC6Yd,f1ap$\NR26A3(XFB_l\T<;/Pr#+4=]OYa\\#<+9+@"+q2LtS3\rhV5k97kJ`O.P%b3$d3N-sgq*oU7_f^I[LT"`shfT5s%^>N.TW:-n>`*E9)pQ#,qB8l_4Y;hJbhJjXWeLjEFkWA'>^EN"I[6IE79(A0EN,)[]iqNR]%a:aV1Zk.V5BD-!^rB#kW<fW]_/Z9XFatUujD&d-Z1d"CO%!neXnJ,8U7(:8DisD=7XuI;j`on1%kDg-'HtM6TXml.5_NccG3TrOe%^I-@"HmQV-cgWf><C5ZEQ_ZUT&Ebc*s3W'+E7UaRA)g6MO4gu5&O!FhE4&>:$i0oc#\P`XV"`=3>!),:EfE^i*8bH2^4q5V[#J@.%(rRBNg5q1$"l&O*Q"s]hB$f]m^is9iS"t)h1DFZke`QFt@7f)G6DOjW"J*WTp]@p-I&P(rY+lmn;*m-ViC]H4'_I+%.!50)Pf#]X%.4(4r(9V[LMW5)L*eoqm[#K%fF7*M][:/1mr4N[%D3AY\G=6kd/&o2.q@"n#HDOmFOqbr\7XpYNN9*VF*T3\GLr[PKaOuZ9i*`,g%V2V(ha+72RFYYC'C=6$]lcnR;UQda8IoVb2RX21!MDJ]U^eGftK^YdeCP.,k5?HIFRT)S4'5+WVRkq&/X7fA4r,[(!]9iBKZO2Tb%9cU8jC6"4Y&/U%Y`_]0[MqLq0HqDIHh\#h7akbnYoh/T"B%e]qHD7&l\mJo25,FrQAIhHDqSF>a)oQllF3$<8_!ho<HqDIHhgktU%[:#Q$ETnFn:4&gBoo^$0G@c'^e)"HD,.:^(NbA(:rn'-.cgT*7dPi'2ckC/gYheSc3tFK%*V)7>j[1D*"?jL_Xn`t%+?#6kFB19X%coSdCE+tkS/fZ[in.pL;&3iE']\<NanC07iNQ3@;OW5\mN$i.Tju]kYd6_A69ek(*;iV:3'I,\5;@`P`%*fJ14)2=uPrl:h\EY@h%N\>X%l],42BG>B,`)%#s&SWC#5t=%lE4&>:$i1>DDduH-W1Y"#2/DBT0acOB,fT;-a:<RJSe`Q]pJ^]tI!6jFEm78*%/Q"*Nr=WY%N(DH2ce?F/`(9;Jko/Gjhf$^HUWok)pUmMF:TMA"m!I\`Q_Y>f*O4D'+B<[`rm[j1@,K#)h^U(8n$MPUTmgiS@rJ_XdZ;nu1jaRJ%]R=^'oo`:,5&]>^8'Kh'P;Fq@e(SN>PcJ/SiqR!E6SUhgM6$ngq2fiKj[8jDqoX]<1SU*G1jSu4YeAt7"G8%\8+ChWbk":QED/QW%'?C\:M\BtINs^lC@]1#:(I!P:IsoVNO-=DRrT'_NCHK5j.EnfYJ'DW\Hq7lHI]AHtY1ULjQM)$e1CWfQhJ'CHp#g'aX3"o<I^2c&%)Drm@4jp3Js4j_jpG)iR`te!rArQG#,=^QKNA<V84[QNZ8]j>+W!j<5I2=3pHgbWTj/SHA354>2eS*$V`qA-2a").icH!!5ONtnI%>j[^(K"f.C.kuuX;RuF&760\!EfE^i*+(\u(VnWE:KgIVg,DS(6$ETQ,n01>?FaYZj9aO6Bj'^9qRUuMSRTCG:2MWLpQfo\mQuT`%ooXYkkpk%q$4-THMR)T#`?#Ro\8i:JK=9gY5=njb+$1%aAS^Jg&;7)jP2b\W7G.?U5%ko_k"IF;3XdjUJVP*j>V-:t6/,fY%XpH/%*UK_B=?BRh>I_[!.?6%5K.5@S61rj9-HLGW=rlX[2*j.@]O]5RcX@!S=;,6+TI7dK+N!)a+)6CD4br^.=If\VHpU?K*-!!eFb50b%jPL8F\g4,F0@U+JKG>l6?2C"tdp=J)\Ko/a"m^)EA;&Ed.Ru*5CoDW(>;tZJrfjHiP%r?f=FX4gb"6n4IBU'-?7Asj,fT;moDOL:%L:icRkH3?d^=MV(o;4Vp8f9qDH+ndf]_*='oaBqWH/9qqNlbLTl)4ndT262s5-AorI6pX>q=Qc&5#/CdIjrkMWP7(Wh:4toDg"!(%Zu%uP.rL,).)AjEdkHR35sG`pLQ(-NG4<i.[B1cUd@TStHJB!oWd!"RG4<i6[I%;cT40@To)_*7Q<etbQ<h80jgr?qdjP@\b*SnD%oGq8`-Xtb;M*:NKb2MG]Y'NZsisV!P;Ldl.*5Z\3k$+X,n%=_P@Q=C`E3r8-47n3[-QI>=;JORb@mmCG_D*Y\,NoHTFdIfOT4m2t%QcWsL]fg=?Y].&o:Uht2S>(_,;cK+.1A6eJ_892DfB=jZM@8=O["rX*0"g/;55PGq,2aE0U`B"1oSS0;>fNVdiX%_n7DLi?8TB+o%^@AYtN@*etLGsZ?79R'mmGX%YX$o<+BKOS#[l*U$NMAP@lTMhaE/dLg**odg]4*gJ)C%!6]J2lOp=X!rA(g%<$.lg8c(OO0G)%1p%S"t&g)qIc2[CNC%>LGCC$f+o=3"HoNB--9V`-%^l$b#/JDCf&WP*CR4J8S'%R:l&S;r=GTFCX8ZQ_ZUT&CkMUHp0%hn7tPR(h_%f%oWk#dkEF8GX%#B4BKK[,-1T:AoLkZbn6)BJX%,HqCsh,XF4j_(\SNjO%'u8&>W1[];9B05]Y?7X>dd\-VK1e(.F/s0`%dh^:8r3B%$(ZteHB0FnR*S]'#(!I#F$-@RkKmVF0/h?EQ]7*pS;+!PSG/4-ngP^e%2.2pq#"+^`TYh#!_bD!V!-:Oa-%4,b!/nXWbuO>_`%@R%`)]lA'fK(15BYSXS$XE3iJgBNF%2t:3DTdg3?qGXk/`mJI-<Sb(uC'J8!*dHchg,+]$9bM17k0%Y]2PP`R,qu`EACf`St]/X'KA(%WH.)n;@`O5)jaK&S=k2-X4Bs+V-GkbMPCOpDSIaXG$2=,=J"ocE*KPcgL]@;bJNY5KfamXEETdr=Le=8E;OM2VRj%&*/tI=S:rJt%8^>1QE$]/U.b>)\N)6XEUCdQk'@\XW:"rgK2O>Kn9=dS/cLhXAf[F;0^PtEn(8kRTRpE%!q3$tp^>iH_`N"BE54%;8Y,Zrj<A-p`%I)1`1A5tM0ZWB`kQTi'6G2n[l;uNl9d4Q=(cuXGM'1\9H.66V>V-J?k*932:Jt=2_CZpuT1k$K97MO[r,B$3BoT<Fu>k=+8K>&R+%CWc8<LsAlTZuup"R^kP41eYF"(G&`Mo/nFCFEuA4-<p8DZn0eu;3+kidNp=_g(%n!N\c_uJ8s5IF16-D"llgs<CR:@NlYJuZlFn@%j<&@gU\IZU@B#h6B7;=3]d2.$mtf2937$eRFUS%dZ??]u::U-H.?6(@ZI.\q5gE9CAQp,qQ]:F'a(<0W,IS\LL=:UJVr=Cs%h2Y[%\B&(Url4YMcsUk'm5V!s/Y(:Vl;#h(_T1V9G>>>Y+",agfQoNT00TH1lj*UAgYFm'[`sS<79jfpoHTpio]o],eG%iJie!cNn#"WG%MRAo!F8Fk@r^XNEl1O4W9tQa;eDtuMp;gq7jdhCaMG8,<barX>m:/&PETKhk%f23SHk5[a>YVpHp%;k_ZmMDc4dVs(^+17).N9Bb%W^h0LUCu/jO"(lsNd+O^b*SnDoGq!!i"MS)*]<4%f$;70$<Ond`USZGKHd[ia*IZ2`1t%gK'4B^jG_JT'*q+?A@+^"Le6Ma99W8+%T"<Zi:P<4_1.KW3`1ne7^SB&(5`jiY#b[D,.TO#kPiQUW7g+E3X5/=ln2q;6i)*a.LHW)Vr+Jh.!iPLkA;bd'4H9;WAi&lOB4b:M%Pr,g3Pq-4)EmT#4Z;pg?-E1>JWjU;^.9F2.`UO+)Fsud15K.9B"J>)-&-j6i?iqQsj8e.RQ_YDh*B*:q\-*I%06L=N_`FW!,79='%$^RpjVi<$@AMYL=kLg8<o1ti9Wa%=eRR,\:f5@dt$-JSqo1rSg2O>Kn9=dUeVeXg!`J/Rn6$,$nZ3]a-fpP:6iQW8uY'N[>6(bW%%M]fSm8b:@hXe#/X\b[U$Npj&4pM>'s-*>u[8s-)U\ZUcX%F7af`i\fj+CkU<^@GMQ0HVf-Q\(f'n:g$`cPqPUnT_]t[6(N4ICMFF%0&%38+:]q!+Z6BM@1_RG:'o7?_%6ha#O`Pk5WUag9+O%e3V"UB#7V<>coH_Rrh^Ah+"As$NaSB^$2d_EXm23!E="]/=dohb2M=d>%nP@uKl6\)j%:>DR0S<.oG6>r-=MpK%CL$[uP_6]f:Re)T47f:%hj1Eb4dVs(^-=o20mnr;$U:A`R8<_di]7VrL_;BeKI^DmEmPVA%,Xt83PfJoBqRX(U=;&JN01g/2_(2Wa/SBLoEVcL8LujGLf[1d)DF1ke-)h&rU"2'@L`@.$K"c-iI!$+b)OI6Z^47c92)Q@J.Ub;0%>1t%*VKX\@X_Ha_;3D/'eone,o^nPa<&6T!Zhfp#ehhFgQ)/,^TC27J&oA%VYW!bb<SglN(r#Hmo_V+21$*/:U_`TVr%k<gjT:dD%^1Qb;&@?D992ZbeKe0m;Vt_eqY'K"_]spmqcNi4d9RPEYE6V&(%/L%20GQb@5oign<DW,c,0Y1o5cG")<DRV#YXTNO;7nX\9O`g<%G[QBd3MM7^.p\<9d!+.;&g-0[N@Wb#>hNbMX'ChIpoXsU&g)DGE)_#q&1"-JJ=qQ:*X)\#X%#B4BF>mJFqtd;U:*c&jTC4;7mV-2%BC)m@DN*(4,Y%5G5,.Agk!0)3+u*'>#b$/-nHb6o4lR9%h:#JE2U<>=`%cO:i=rN8&DuZU`DEMa@=RZ;%k>4PSjU;7a>ZfOFCL0i%I*,O*YOu:Ej?l0Bnc`[ch2s"*2*!)'+<Ml)K+K1_ikka@p<V9sXX7%e-=./b0oQ&dWV^UPp$\NbCYQPP_t#H"*UTrYnbPf;73JJF%&/V:N_d""\*!PGsmBHHq,G6'%'iA8EFq4C9\=Q>k*8N8-'5X^>^OEB6YMW"FZhJM;oo1J/P&encFooL`hlh*ShJU*BERd][*+.>)%kg&n;kD^2[,LTf%SaCtA&M"2P&R!D&RKkEF'[2oXD!bJ<GcW<\Y)7gKBBq,1Gt4qu,=JUU$2Y,Sfp#tk0OhuC(1`)D8$"7FLfdfg%:fR2G&M)#c`tBRs9]'d7q!4uHGhK%#*n3-up+Aj0E!6LW[DYd;%f/LcG,Q]nqPDO-B<>7X<A-p`Hl(?f`EsXo1W<*08AbSsk&?(H%HgUofUKoY/TdSLmF(Zfa3Ph\mml'UH6%JEuN"P\%G/'a8q+,+XOn[8K*7sUgU3H7AO.6ugGtFGjhdQ7t$p9aG?MY()c[*"0r+K3\%280HB+pV(-6+8j:krE.ojU4p<+83Cj8;Ede2F4U<#MMQU=E=4(P)H7O,,59(LRk&_p,Yh*RHMeAb5H?M^>sl+'43`a-)2N-N_&K[%&Y2Zh$$sa3UHK3LI`^e>O8%SqmG@O^E_h%k3Uq@G](hK&qji"%PVRh;n&(JCFd#^tVP9'W2k/ui;W=)CQ.HE.FX&uj'd5=.4@AsJ%ndG[IdH;D<cdfG*-M>Qb%kcKrFp)2NS$KWC"9,jC[bXS>Cqcm9$_G@/$,2K'UDruK%iYVe(PNF'HqDIHhdQ,iJs>3bpS,CRg::HR%iMr6?353;mb>6r>*0+(0Js+%=/^3>'IETouE#?C5eLjEFk]8X(]VQ,BI]/o_WGC'Y4/H1,$AtSd(15T>m:lKGbduLf(1r1:g4`[E%au,q>:XO@26d3lsH]b'eXW;A*Um]DQX]a(0^(B$RDOV/u1oJT"0,q"dgZC;pHqDIHh\"TtUWlm'V/P3KT5iCS;B4SJ2/uWYDCnnO%DHC!(k/o_HT5CMND3A)L(XOMS.ai0=l@q0;?k]5kZjM\c$T?pi7kLKPeJYbWXsi9an#0gXR[9ffoQ_BpmIilrnpI1Gq:nijb,%7&%8_<`(<B6&kE\rWZEd;mBMrjO!1h+Yii@.j>,c.1&W%*S+rosB0U;$B,G&!Kr=1KTqnHGt4guoEM/p!a_U`Ro+2W_.PQ)e5SC=%1W%LGPZ#Uj;3GW"mT,*RH0-;B4S.-`XH18Rs]'bD^\Yod4$oDrEFsLf-^hjR#@?,YUggRa`%VhJAcB8r7%uG2fYMUip2cU"8k=,:$<[%Pnd1Y:H>"F_K0Be4-:S@O7l-5WBho*ojMq&;aLs4`!]gu?+G*#e<OgP#$eJQE9[S_5?DW(9r@]9gK@SfCUD6#='[ib\QdPNAKDoN%^9+46T,5VLcIj[jM0$e=p#6t#b*A`p*4-_-i'A]MP;=h._jY;3Pj=0Xin/^rU*+C67\0--`esB\bo#?_=$bRhE5#AAE4&>:$i0oS%"_5N>UiP_+Rb$%?jVjJ]353QgQ4k0,")-\qVd2u$LKuI/-&5bW>Vf"CG-SJs1cg=Nm,FtIBfg5L1RB0m9=i,eiDXQ?>#/X-=cZ@p%8?a/-@cPFRHj\iTQ_YVn*PTlD]2Obd&bQTKkO9pRX'UtKpd3Mj2u5l,N5!Y":EO/=d20ASg*NL7HB)/Jn)Xq*JhQc,I%emN$T/eH%kW*+Bhi5j!cj3G+aHIjO,F_F>&!!/AiL6+/)>"r`d"h-*%Lfh>Dc7-QkiVG\E@g>m?grbaB!nC*5.%XU-"krbV4(QSXB4LUQ_Y>f%*F;T<Lj"C8V63uXm?DXV-n(,D6DKX+fs=0<)pg!hks2#*,L6IO6F^bE<.hWs#&\g[H<AWn?+5"&1)I*B8W'9)ZhPFdiV7.&PX"3o%=Y(%inUe&OHqb%I5%=D/B^f/PCNY!0$Zg4ae0(.AecYpMNU>Vr_9aS#;,(P+T%,Z4nhi'uW2:`Q5%iWj8N+eL'!#^\0=f#9)T>e,%-q?.S/QoFT`+G>e4u0Tq)B\o/BmaA.q_UM9\[o6"UhUqmRFj]cc_M=fFbtMDF*DK5Q[7;oFe`(]1r>o/#%_3qB6KT#'((WVjiWpc%*:t7PDIX+?_d&5uR^I46[r=KsUc?(qiZ.`7+F%Fg[YrM3)9pN8hUpZb@GW7GXrIW,T^AuNMkGloTQ7"^ekS<'>kO6o8,"Bt]a19i%mFCre`9`EVW5\*gpXmL?c0c1*Kkj.L*gf=LH#/M/4UaioeCe8\F_Yt<TGu?ap874Q4gl4CCS]++Vf?PZ[@W-f[PA5;B_<m^_MtU%%P$65qm<N4kB>O'K8c@)hXe#/X\],pEN\C1:[GJbd>Mk^@[Y@aZE-A\@>B&0'Em78*%/N;L"+=5\:O1GKXe#'p1RF/9?qJuFJq&.&%dEUaY3W7\q7Q8X<8m2)Hb*=SN.HikkgET0Hc["cEf$8QsKr\IAiqP-JjgR?bF>Fs>@H)QSA`>btQ&-.#Q%c8FP%r>[d$<oZ1)Z_Y%de?p,LTW15rK7l8GP\f!WUEF>M)UL$3:"iTX<)f]9Q-L7V2V(hqmXNLDc12sUqV6Bc/s;HPW1#Yhi:f[.:UPu'5K5V=EE`FRS,$Z%>`)X).:UPu'5K5V=EE`FRS,$Z>RFSSpt/BMs48"ADt>kgrgB;(Fl*f&<UZQ\CKjN5Ge!Xr!SP`/PH**IPjY0UCYQPP"3I<,oXS9-%fHFkV',>E::j0o!ogGE.)>VX#i-2Pa50"D$SXpnMk;LA%a`rE/,M$@@TAMpZ:Yh.37pJRHSbUWnr&ir\Q_YVn*O-ZL4`sNJ]_"p6%VnH!2H:a"S$^U5p/RP#'SsD%6qRf8>f7uTf4Y:$)d1/<pjni;KD[MeK\h)_Q/DoWrI%P?8G0J-bNG<=.%i^b^VlZ*b[poO_[Rp$\%*mo`Pg?HKZg.'Td?9W2cntS3nfM:=$3P&pBL!_CEe^\=Ks0o&iX<)@_mod3l,q0(IhYPJkng@+/^[uYaVnH!2H:a"S$aC`J``R+-%?nAc$6''b$Q7OY%j_@Xh$egW^NZ9d>;4TVD.lYJREK*Uh**ods2-]grL8.[(B4X[VY-UPS>M!#Zau(hD1[#3lI<:?i=OBuQ[s$%@%B.cCeQ?8*>pp?6Z%3N*ufS(AD'FaBp@kBS=Y`Hj:Y&m6-6/UYMc3tBQS`<RQ[V!h4/mK\0MPIfSqCW2;1a@`F\hH")_piYq(]hOl%,h8RVn7o]M_]qBC?[f)I9C3*(*[W=rn'(1bHQhul3QS#&CcY]-/E9K,#Kt9E4<mH96'KX^lb)YQPS#e;=2K9iH/9qqNle'HNVsV3%1*!uP*]K*=$s-21$]dBi*7$(m3A_Rjh-b1e?[MXr0XZJ4?-OAbP`UM%nU*PkV3*];)L5U_OS>n7o"%F<]59F)iqWe%aPlqi-?]@U%4l=@2NG.)7V>b12^42T#mf2J1q=Gc\^\%Z0HeOd>p$&0"c_pg>Rud4+^OOCurqTK=55jq\cM,Vm1]kIA,_L:t#!$Rn^62Xo-?9Kr%/!qt#H2,O+pm")<S[7k`!!T"3;Ro]j\n6.G+,/!<5XFdp=W/:^/eYYopXC&KOpQ@p;f>pJSMW'I%5n([_%WV$Jo+Y[;35`-4.>)6%Ya#0pm_XH\6iZ=FFUe',psEbjcUi?=/)?EZ%>'f@/RADDj1g!>ro=%VGX)/[T7?^@s5i8oJ+M8@rT>:%`udPES(3G3r9[9Er9uY[%s1:LCqVV)5G<c)rf>%?t+8uLPs//*\iMV1YfDkR)K:^WNIJ!PR=lX.Z21J(uok0LhIR[K9B9\[17To\&Ph#b_ARWRQ&*r-1Y87R"%gbMAKW29-Q!M9_99IaNpcIV<Zmm3K$/_`K/n`rJGDtu1$f7sn#dhjTGVURk7>Fj?.OZqfj?=3D*Rh=mJa0B2-^9K&f^&LZeY)kca%@\n2?&&e<V6:jja6DV%*0]'F+k<2?U0)4PGe(,('c-04Tc+nljmor":V'pTYXA-QE5DW#r8%'2JREDFk7/*9k$LJB_l18*;J+^:#%q4"#Uq!\4@b9-cC&&8/#:]I_t^p!b2cR@^h]`$1H]RTd5huEYQ5PqLrqTY?[s7G?$r50V+#M)+H:]FLGqet*$O2(H;*n'C,'6'TE%@!^hMq:aW-:4la)nD5MdX$/m;q!1,)`ks1i7fr>7L],&U]cX&HXC2oY@Jl$cei3+N#N,B<chE[4N(eg.?:ph6+en;r4]OP0-i0=!%-2$a5ed$/?$=Y<=S@WVWl61AW6>0M/'EG>pH9M3n\"\BHj=\]GUgU:Md=[K%GQ&a)b=HuARm^!FbqM=t;3o1HOPh+QP!fHB2YbiI%XKPCagR<N]PCHEu.I;>,51#p9[\Q_!mXrO/dPE9u.h/a$Ob/AM@aioOrU@_HKJ\k?5tW(rdLhW!Ol"+(G<N<!Sq:M[Hu_9%nq@m;%:0*0k;'B*UZmJ$nJq)RFeB'm_.C43^H(CSe!:/^$(.\?%a8bh=]RbS(1VLg>4e)a18``p7Olg2,IM9aW[<ea\kOk,T)U:+j9;=S"%<0L@A,e#;;\K6-6"amS:"1&lSN_&IB^K`[sY=2,#?6LrMG?sTiQ\cBLFQmI$iV[E(-UL*hi.%Ge7_*?6#b7s[;]Pa^jaZ-Ds%)S6%)Yf6Z!NhP=-bRjRB-7%,^SC=mkZ`=u.;@Ur?IN4.R0X<HDDKHlT$orF>AFX<ot.XjKgq6ULWWX7(Edf,;>+1K1FRDkY('U+\iNqo%DlrMla?cjdJ]-PkP"'cSh:.7EA!e6m>Y%O4!+)1@^3Kpbn6Hi5LcO..Om8`HKN/i3Q]blZIkl`Q)W*=MHYJ79-,E\*dU>Xn4/WiF%';SHr'tj63['ET'8:N3#M:pH(eY]^tR2.4rXW(/:hM[d5f-b<L^60-oRdu[d9$m\NIQTW-X_X[YT',;$gb_0rE>BD-j!]WDdA'<f%\@rZVAKIh`na!56CR'0u"1:iHSab*fK*rF@'#3l<[7etT<ld/-L9(c@R*s4<1jobXnHmYIV!"SpN.d[(?R*\(9iKTIXfknWm#u:-%^.b8^*gOV.Dc>Bu-C=$OlAAMf%E_Z_a<alJo(HZ@>!?K^3Bh!#Y-rH,T!cK.V"ns2)DtN(qi3nccQ3j5V%qQQ:<ZG+hQG*P>^VQI%I@#$"1/D6pqL%N>GCCd9A`FYdGIQ0jMklLk)d8hdr4.-^>k:=sAk#+jF.fVNfDS\0JZcW4Bh_1oH*UY#)'!+`e?S0<8@"7Qd(Nq9%q/(8MA+<7Igl!]Jch()rDde7`IIOjH8))3Ee(,e/g:,.3:A#a3Bh5;M-HVG*:9M=fiZXnA`)4lsf@T%.dT^;'Yho(A^(9":IQN[`%Nq\$ZF2sK?Za(i1EBWs'ou,F#c#"MteQWC6fd&;J><TLS<"Vu!9N1doJPp5)qglDVZ7L8Kp)TW:c2R7t^9+%-=#,GB>gI4>_2+np%U9]'%@uEI.a<[.DTN!ZpP_/7:Gni&$T-DYGnmQrWBgPO;q>)QIqj0f2Z7isu9)KT`ZVq4"Ok*#_b8l$^2LpaE3(Y)D9jtX_nLLe;%F\]tK,bAo2,$!J=IK&`S6EW?8je$*7<.)E6p/Pe5*C>fo[_12,.kJK46EGS[XXW(4=`b\Sjn3pm.o5"@R&q'u2tg"'h]G7fqG5qV%5fS@F9,fk&.n7D3_j4u"Ia/BZ`]4@tTWF\nQ>55J9^MQ4Y!*j2k\IoVBCMg0/cAS?IXT\RXZKa(>`X=jq9G+5:F^OqpP.cm>@F<)%*Yb-;^J*pfbrs0_]gKPTflk.u&AF!T3XWl/o%k'8D9],DL+Mpq%5?b^knTIoWkd"T\b">(2==^2&Vk`j?m!'K@Z-uEKmZ_m*[h+E%_"t"$ZL$L.Z&i/.MF95T.%NEl-JF@2dt&8)p.t3-XqCZ7RtlY@RYBdOe&uFa(il*d*(WK/0biM2B9_eGY:2ZjPRS+t=WSG$5*Pa=%WFISgOti0SbQg]dVE?[^5.V]/>(;@pE$Y&l@5XNB:B7o`]m)_+J<XVII>d0o)UX;NV)cuT\k-8CFmK$ng3UrV]<^%o'YNJ$mNnMM%788V,C/9*c&f*0kH^)M+jdZ_+P8Uif2HdBl8V7LYb-EC`pds$XH;LR[+c4TC7in647CkS3*UGNE)ht)Ap`;cbg9:*rY"9hHW,E+s%CEb^Z8Z?hq"!pN3$LKhK-FI+I?DA2K7iAl0h/Li]W[\ur[IuFq.c`EiG6P.G6>egV).iT($>cq?hoq$6<[OqcCd2fuOM:2h=Dk52%@H"0rPI<hg/N*K8V<!p?,%"`fG72:84)L5`n[#q[1&uV04_\GHq0CsM^'[K?Rpg?-PNZX_J]Jg)'1iQPPor0#KoEM_I-9NGbVFp9%7*Voj(<5a&/c^VXod"*<,OtbM7(^`U0-:+0K]B4lT4H88c_WPnB(GA"m/rUDR9b^2'iEub#B=V/&No[8'+nBsX*@@qM7'/pFW@JS%8tXg3qY]</=T'2n).g"5h^1teYADt&O\RcdO!B$b2JIC3o7n^)iN5&H/^q[pFI47"-glH2q+Aj0Xr9n"roXe^6qK\G[9jI(l?sW4%BkWZ+ZlX4>oh=i,qCWSQ#\t;dT:QYHD?/hApO"NVYZV/XDrMb=!6"AL7n$8PD;ra!Y+pn4o+FZ>Tf8E2R?pa]>AQE=dQTmilGoCh%Ps;Y!ME`$6`)IIDg0H^N[I<`Oht]0Mh1qR_DT'lnqNB#)2],aPrjJoI/J/\_d(]&dFi+$eBsrXF.#V3bI#oiTU\mk#`7@:S3$EOi%kXYf`bbSs)8!BCUD>UfH_AC_uT%bDGYhCSk$bs.Q5%W'L?KFaQ+YD#m[*8BP^N)rbC#.q;34CEZ@:@1h*.HO\.nMcq5"3L^*]1Nf%jIBlg"n#=*'/AKmIS\c]IQ6X#NWfb34"V?>^#:F47nt58kpCl*4m>qSUr1m:ps$pEUO/7#ocW7UjH5q%W2^lbdh=f\47BYC,k&Y)%oLpLpWXLu4)B0"@L3B.\,jC2XV`pf(FIkN>dS.@n3%1no<4%u&&=#)C(OQm9#Nocl%r%;=P?9?#@rQ?5\gOlR&)(4VdXM(9*&"p8%GX9,"Y.Z=D*W+MR]j!+(_;J/UG^27<G^DBs]l6s9V8!9"jcK8toj'sG$LspXh\&J.Rr8*!cI[@$q=U;BUQjU#]1L'/lhL0h8^a3m%8M;(B,Fu%,S+pQ:YO<[K1KFJODUS(O)P=`K4%e@lE1=eVA[K`q8ac8B9i""Il\f7!r,KB`Rs;T["+[fD4^[)@4C6p5(dPsO^2mFf%%mRAuqJOaOqJP:ITrkS^@+"'%8\6Lnlg+GGY:oh1Z4l!]+<8\5T;7&E_f<E)\:^R<K<Ol,[*uU`$>m)0pNI:3(Dqor:[2B$#Tk;_%6sj>K>N2.Go3'D-"19Xqp19'L41nm$]TPnJU[4L:.f87[9`Q52IH6U^KoMj=M]lX8Vb+dEQX1M<jABt4"JGSHdNXrGP8.37E:\]-%'1"QjRj9SDZns[4dkT:WDTbT+M=aDI4.fZKYB5Xp_jo%/BhY;ladR%RPU&a+lahDV#J4-WZ9AfV!d;jGmRMcO@Df]flQ#;g#t!4,%Q;,uVOlC)jJG";DS_EMGH.'F=SgMckmJ,nl++l5!&#Ku3Md]F]d7fR+l?it(pt!B=98PrPHI,BTDT;Tj'D0+9%];iTEsTpLNX0e"%p>GTF"&=K`8^um0^ErJu$#]YYH>N,60'3QC;!T1*orF"#%)Ac#YJmMuI5)!\:k3LQMY5_0kK5t[:RZtFoG)`e&9*/:&Y`ha2K_!%%0>)GHb:mu61agW%2?&36n$O[]#O98U"e1L_2B0`]_Z.Bj-67;L&XJDDb"Lj?1Q'C^UgK>W@eCE<6o5`hNF5VZd3]U@<Znc\VXQ)q%AL+^u>mY1tfS_UCNG!Z'=if$Dh?!3X.B#QuRrpgMicsb+7g^^KIN5jKS>&GuWDKM`huIfbLMjtDr:13X8G"2.+ZBgDh\[)D2fFi"%D+Wgr4*Q`9'(&2^KSKX:cq$]``[:]n"N0,M;h$Rq(^ao+YWbkT&T"#`^aRgJe&b*1Hu!+@XT]%FT]&mW0.H#'i7JiMHl/XB1;u%,%$*i0:0,3M27]j[/`FX''0EKf1F/8JnR:kH6S8N?*ifCJ:hh9Mc3Epb\QccYG[koI]\rb>i)ag*F7_ha=&<pgJ]Ri_kYs:N2_.ZS=%'C#eDKFNUQ?g#t\Od7GfLkd%G&l@c*n<>$s1p%(A-og7T'^LBe=H:.6GU[oi]\Hu#^C_ahhJkCJg5JnGZ>2M9"ch*(_*"(o0Mc'N%gC]4LQ4D+B9%mD]#$%"p;ZmRKB'iYDd?+Yh?oe?oOZ7qa\Ho0CMK`H5Y1p8h\1=+Gjc-0ZCr&j0CeAXk-6ZQ9&.8YP]'BSSR9ZKj%U'-s$+_r5\&XE6/3;dg_8oP;7Gq]n>It<.67s[4P>29=qrUatEcerAOCL6bD1^MLC[EdZBj_4!<\?<H`lmYMh"+O%\e*EtPTsJZN%'6l,mYYgDCjlQ>C"PS(i<+jVnVZOk#h1Gr@R7Kt.(5fg`;,[3\I)BW`[SMNs.WCXb!fCYOm+4GM]A!?L2%c4u:-PZcN)kS?UIb8I%NM<h?I<_#_@M!AVd*TY'P=VX"1]#\-_"hd2LL'3Y/!M34i4orFe(M25T3rLNmQOYSP*G3U?B/=%$0t_ip9?#;*\)gWpQ4^amWG!7%Fg0n)3?"gnl?'+m*E[4%UARCtDHbZ1#-8/7$Zp7-X*N@Xkr?bJIpLgq;j*/BTEm\hk'YCeRX#(C42%^+fXl*W:ajr\4F%r%ZZ+:]%R?FfXDk'_`.n?[7Ni5;LI&"1n,>\sI6)`f'1=@!RU%#@WGaZ!sN_A:XaEigmCL1F%3Y$JD;$um1NXOt@&=^(=Y'F9<"h!4a:WQ,r%]IXgt509HC*80#QrJ:qK1.UuJ_);,UJln:\-]fWMLZ8OgWa2A+$HK8eZEY\S2BauK:74`60F`+(?<c49oPdJ]XLh'_m1^aFB[*I0%K&[p=?-0O%5:%af?m#)Afd>C:FZh4D0:_(:YP"sa.57OQ217;)nbAj=Ygi]EpoWDFC;e&VeD8^rE@[e&"jRbIXgWmX010e1YS]UZ%YZqmJ#&:oV@EHo@gehb?*H;5DFk<?Tmh@HPE?;g.g"K)HDV)hafC2'`MNi/rMXF\IPn"JLJpZaNc3>Y>"7STW3kHqFE60o@m'f<^%7puedTa_D1G>mP<nbf,*X#[5<(-==$er5(J-Kh'Jg'E+NE.RMUH!fl3Eteq.h]arZWIo+L/4]C[A`H'a#jd[l&_8"WO5,hD^"/%V%#;>.Qio=KYnn!.=$O,YpQ%L;Hesit[SRRj,"<PRF)Bh(SVKHu7!eCrf`(O(5OV580:ka2;)W)/>RXXK?n'9[3C:OmKQ&db&E6/*N%Nu/R@a&-krMX`fER8(f!cjKUhMVu=h-I)'k=r_HIfC,]%p98PHLG-9r(q'LgEUsh?nSj*g]?/X*D"IjRGcMIS(qN=cfj#^&S2PoJ%XUd?W66X):IF>G;k9/!ub0aRecK,[0I":Ph&)j(_>P<0q*>(-NkDqr4/+eCf?1uk\Qmi;#fesh1@LsG#T>^EU+fDSo6\/&=F%LkJ%9DJkFIHQ`Th:Rd[1E/ukAFU`=#RVTPD+`*$N/$XEcE?i&.]%*/6PfD(%O(oiL@<[)30sqA)8^/TQ+bhEco*OK\2pdV^Rk@;jq^9t%G_%;E!$@EHmgK@_YAroE^cQMnN,i=T\6:*&r'bGc^:&#tb%,u;NN;S"N44+mMbKsq9td!7F);8Y@#EU4"Pg5bQSHd*o1E/X>-*U<%9!$]mLTmni%c==02f\Pc*1:m+n9._q.um=[>pI*$&+qUTM'AFtF\.+cQ/J`%"d]/*/&YVJ`lgYnG_!<'qjMQt)ns1YdKZUgj(JsE%<3Oc2<S8'+<NV,8`GsQ=Rlsup^0W9Mqll;PqM5q*?fsBU$kRtQMnd),LQ\@`B+eakRb"Z?OBbi>k"O**opR-`!T.>ncEpp['Gq+l%(m:u)FUUuN^s3NR;!#J6ZdKV@SB6):)o=XhK)b?ekRmoq]aWpdbV%$T+fB;%`qMu"Sg@2^<EpXp964@!rJk_%Ehi0\KEUj</F*M#%Uoe-6Y83=LfUDj_b':jTBR73GPY<![Z>@bq!*aV%;&>EFf[jK5@3Ja3->I,)E3cT-4\EZ7XX/<khNpGB);e2Vg6cO@]$rJ0_/.72%K5N?slV4C0<"=uHf3b3D_(qu0K`g.<5nu`7*r5=Oo78#:fRlKe+"V%6rYQcPj1=j!ZEMjh.NBh7*&qV>^WJrl2nVd$'&_clnd*83%Jj:Wj>\iXo4-88eC_EA+g`TEB#(B\98/sAo(%<=5CO9eg=fYcCa[tH>1gY1gUT<abp@W0O1sBhWfHXn`8J1=2>q[2uTNM@Ub(PgA%Y@##?mGXJAmcQs?T2sT_"IoZa0*#Jl?TriiJb4ei854E@)?>rC;*$n`0:?[fo6%t%&A%p9Xj;6:*Tr*Z"P8/'Z1b;J/M/fIHGN0+%b3Zd3-4=\!h0$W4fNh,kPbU?XXkSq/DBrB0C?'/nX`q0mHCs5j]8KR>COsA\_>&-*f6k,8&%jfMnM`P7&B:ji@?`&7is2G#!<WZ4%M,BiB@H:TqeiJh/JS^J_5*^A3M/?8H#jJbHkKmui?Vog];EA;Rl*Z236NrMF;%[U%Gu8St2L7+lcpsI+<*d/ACD:u7?a%-JMGa!(%!->4V()@u;^]Cg;rl<2jH]4:YNg\!dqg.)/e?E9F0U,JVPVNa$n^qX8P]Y9Sb3V?B.3XOq"U4@@j[cY)X6F&'];@aZH:[:'1Oe_I%TUUo=+!'V-\9fJ)i$5Up;i5.>/-LgtCV&gG_6GG>+[]]O15ZY5V:TjFSo4r?:hcQqd/LA"[s+<`fCq/Y&K78Q\<BQ3XC"X>-('^.%Cbe3s)E5N)-6??C=gNjB/76>"DUS9>Zp)7J.KTn[UTm8c(2<7gpXMh'_qC-9@$Y0Q&QW_u';t88_ACWi!<^?*3PEfGa9n@-1tOjh%dKh4.E#HI8,U)MAVit2qIb*R*+3LI^M,1j8P(3O]b'@7`QBH$'(;:)gZT^O#h1"BuI/X*p=HJbt&O3W`(hkEebQFZfq)^?#OMhLV%&!.hj!RL,oTNL<$3ZCZU2VEa4WFhbeN8u$PdBCY\Z3RH?D\>(`-9]RIOW>F9YA#4l"IshiY(Y+C7V]RC5YgG+aBbN/..nE;N-h%O%9SE7[V`Sa,.9utpg<,$RGQa?N!G-hG.f0(:'^6&RZ@(RhM5MaJPhI5s_LS;"kREaAad]*PK!e'SoX/^:&->5$;0WF'g>KmM!N*`l%0;H/GSE&WXZq$h:#*SJ]09guTYYO2i4t,\8a3B;5%+$&aJ1*)PY7dEH%R/L9R*SYqi)u`fR0%0N<F@an@h9hrbnN`Wf83;82?Bg"%p+\!lRJ^_AG8Xe\36ZIrAm<[2Xe`mjAP74jk[a+#+Xqa<j:!c[_nPn!+%jE%.ZI%_PQHK#Ot\P_LVbZ?$(Urk#qf'@O0Ru`o^k'G%\>c^>(Fd8j4F(YW6'3P:8_WGb&de,F8jX@"I@BE)X@si]A89O>5tU\M&Wi2S#('c,$Apb$8eBgJnCbB?o9pHF/11sQI0OnMJrJqg%^tMlNODbfHd*V#Nb]jKX%?p+P1FsUgZ\tF$+%DC<HmLKM:8f1fgjPjSYBe@i'L2Yu@AY_)K_=7^@)V*=rCW8ak1(oF/jb">-@UYO%h;q>L'?H'KLc.i!0PQ\X\$M,.-kMh@4!B"N0G6HT^60?(J`tpk@]41B%)$]@&WkHT]KVRFBKQpR\K*sB7V$u?W"*b)VFYX>dYmqZ%l_ltL&iX9Q,c<=LDk=E/!;L1D.pt%9(\,FM"fnUT"ASB;aZdV`:]q@Wq'N1oi4'46il6V(gJ$f-'OtYVdA-tFHhjccQ!Gi>$h,HM%akS-Q"rq#06)8r)0G7.,nL?J(Dmp0Eh1f:UbcF3FAB@@K\3i6'`-MD2Wt?gO+eb$[\p1d6g>pTh<*K]p+VA-keeU`sT:O65]8KKe%AH#d4T=kX*U_ee5+RmOfQAbH[,%T=nS%tI>46Dq7pD7t7;0`_"EZuX5'T-S!JicCjC_n@jAP%?[4d8:3Ho/D@BTtOSc$0liXshj<%CKZ#ZY%%FYb)dRfoBkLX"X?RbQ4`1TJ%93JD2XSROKd1_1k3+_<1j;=DH'u*Ne?Q@="`r.(cRoaXOPd3g0AM:Hkt\[Kf+fPRM#mh%JH8f:oWi@*Tr:a0o-'Ze$Gmp>@2#;Jh=Po7j2&t@p+iFP*DJATC7hWS+%DD_C[p_YUR^fcm3b?>SCY9u.:%B9;K']DP=>jGpALUJ%P_<m3?EC>"681a"RG)mqD1m:WI(%mn;mpe2;q^1;&u%:7>>B;n-j=421BAC(f@mt<66dj#"Cl`1SZ5#,NXMn#/,K0P,jETUP!b;M%\h"NX,%0>Ro09k/[;:GM_XuJ(WB\0hO;2O_RXeY6M3DAY%uHkgq+i^]#eO^_0Gi</Neg-a5qt`I3=bCFoX])$,FU:i#n.+5L'T99%^:0fOG\!G4&-P37]/Jce4\Y4Z,eJs7h.^pl)8Z!()uIg5]I3=tc3U?UaB0)F^;tXnGjRJ`FF-A7n*95J$(GDY$Z5SHd`YB=O<u>3%Dph]6+c(&[fdm3-#i6ufK%%k!V,@s-H-ka$8;T,K+BlRd^HmGRKjKd6_"S_D2*o),>NQNG#6Z%@.=g0\\@m,RPUo!DGg2A%UBK"3%`g]lMie0f'DrJ/r&'&X;2%o%*$na$\7-A92fnKS@%R[_4n(Xp+8pE@k:C0C/dDVVAV'J*Q1OB2!g=;Y58>(_3HWpgpnJ6b$'k0nu%SCo]t4NN](l.WQmN"E&s+N4jHkgc-CKZ3i@k5ti4Z!Q$s9.35&$)jW3Li"N4e(Dm5.7$t/C@s-7/`^b@(dUk&-#HR);iY*?b97Ng%F\6QNTJMf[W'&M_D+SF0eW=_aZ6O<_pMh,Y+=&'AQlSJ[qfoB)Vt(/F2C(QOPE3u@O?hF-[i:Jaab90entXiR_i3O6EolQP6JR:u%mL"*g$jiD:@Rq>%$je/W+`U3d1F.LF90&s>_gial3`=ss!NK\XRf`Tt<Ja&8$UnM1!@Nd9kO'c0D>?/;KCI'D+I^Y1+jF'q5A_ig%it6akf!Gb1PW:J=Gbi*1d3+O63$pZj/qqpGD+idjRI$8>>J_e'9;"ol&%bD4%ue/g@SJ6O'-<e'cQ>cr2NG%/N$N9R#c>B`,p4]c%e`*)`7T/C[mTIZ^S3IQYkT\cBK,_1!0ld1(<jDid$;Vu;/JHPMC;uc.7T*:uhq75*9K/5<fn+8f,Nu]3FlQ9\4qLKr7ZO2`#F,_#%L%c"FPS*RXTb!2l9.D*+Qn0r62lZA19<Jm=9HgIPa+;P@KC)PRqD4D#T]=Bn!h;)0P=bhh,CMmsJuMf!_qT,E9lB+o3r?<D6'psG%W$C[(1;dSkkR#NBq1f6e6744T)!)86b`-RTE>B]#N#o3C`CPN)V'U%ZNpAU?=9^%AL)Obu`<9Sd_Ae0g9>\uj:'O9?R-URbBgdO8%YUQe';+1p62T&cC81Fapj&U!uh]Y#W&=1JrDGNe[8JZkA&WhSa#d9"mW@7e`?`3Q<jfN-Y#RF8W4<"pJ'$AV97M?(_1mZ.n7%?>;%YmD_PIDBEi?%)k:F??+*d,'J&s705gHuO2"TYYlWeYr-!7'IT$+XJ?$,a9r=)&!X.E"GSUW)6WTr64^ed1"$WKPe+FB*R*[jXDj<%Y5lZt;qXM]?nR\[X6M#h2F6PTOpONhCNuI2G,"ImaR:*[/]%5M"<.4-Q4O'&KS-+Somc+bd3d9*gu(YSU3;9=_2q-KpdH3nriFqN%GRgf^;d=+'it%-RmM+FU7RH1[i!cB6quT9H!tgEj_I1^'#s>m-UI'7)(tbKU+/@_2!]9F5SrkLX`6g\o\@[QmU)GgQ]0M/TT:Frl%U6'2-gSt*_Ps:5S3C8'+\GQdV5T*@+44Fol^!o!`%(4LYU^FStS10\=$lmJcn7@`A6u]S(aLl`VQ)j,cp#TN'YgDtSO7fMM>7/mT%Oa&;U@Zubt"].r#@jg+PC%@Ar&LtE#A^)kJ4TQXVX9i#%g!-ae\4!"Eg$LqF0t$s/?:<d1*[(sYo2%bO$+?3N$.r%AGlX67'LFoN%I_H)qWLT!eYBQkW%0^YOko3aAG#.fm08)"QX`Tk6QOfbDJcH0&]0-Epj@=B?&42d;ILEG5(1Y1@Vn+I9'&j[;8>M:#JrIWM%D(Z:%pSm6Ng9r,nZF:s46H%^-r<<$[rLks#8c)e)6.uF$,]sKh"P\NEP&<RIQQj8#]Y0sXRW3.0#\]pB/Vs%"[ii<W[KSAmDa?k@cT?%u%aA%eX/I;?'MVE`U28&t#"i294q^i)=DAd="Ju')gn4%((3+Q5)KOha@]t(3\3UYd/&;6I-k@JQtFJA.SL_BCs6j^:*M3GgtTbB=1%-*bP8qU%jZJ6()V53^j@<(El7a"m.KA-Ok?gPTWqD-sroDfu?WfIO3EckIAIP4=VIFIEcHAEmSg/'/359"HITl`rLLDo-&#_p9Ds%g//nuNAPVt#0?Wicn_t=og7lEDf%oLW;AKk\l53:T'Rm\]Lj#[r09U$&CU!m=%Ctm-G_<s%*J;\I6Ru`fn2O=>f<i"4WJj&A2j=L%o,W/hmpeR\S=95G8,sIeG)nlop&M=pI=,*.dbJ,-2%aMO2&SFm;M52-#Y*$>7s\_[\d<VuSNokU(.dR:Kn'2LQb=hnUG<>i'3%U6%#hk@6RhOj8cDcdl:_L2QStT!6C%G"Znl1ch\JRZ(^O*9<<Jp0dJK0S"L[K<Tc3[8jW9R+0Y::<;<77UR:[B;1To9!1O\`Ys`ZYOp%)n-7]O<k2Knof_9r\0M,ZNC97@VZ$C,%SQ5T+ei#)6+7%I:].r5s+p1[_2,QorPoScjiBWeK;.;8c#cX")=5j:3W=-`YeN;GQp-l%<rt^q'%n4q6kOPa:jOd\&A1sb:r!4iY"U'i$A1H;N'rDM(Kd@NRk:AL&rCX+*]>5@29J&6V.9f\7>=bQa7Sq'7L4kB8DHR/P!+K]%iGHHGI=P:n_k;F1J]14fEqU&p=\CL3``)R&PTD,W:."EXLL;BU#`t8>rbN2Q49JD$&9.;u@7/lUQ8'XA?k?K7(nG]I^(Q.(`UOO.%0K'2IB^VWK49NI=Zf<d%g5Zm](4qC9P'3r>J\M#U8%c[R`Pd%^=^n%?`tFeL<1m2;2VD5eONsDH)!+?TGHEn93VO=W9Ws'h"scLg%"e-N5JG4eF[7MK;-GrPS9?]q9MA>&6QYrZ:qE-1_;Je/*=[bTWnfXuFeu?*F&_%Rpd^I+#=L=s)G#gn@_AL2D@d"7)pDAt`G8k$M%!4Bg/M9I[cBP#qq(@E5\[ET[9BZA3o(?M76Mf"K*5k.liNYQRcO.hjS7^-LuHOskHC5lXsd(6&)-t\*FLi&+PKp<k?bSns@-H;EZ%M_1gXC5Q<g_jOuLUWZc/k/.SSRQL1NQQ@+jJ@d*t>G@c?8fI:(_U//M@AM$D/N%NNSmA:h:f']O8jFVkD9V9i!)q/$Xq(UJD?=9a%TA>;oJE`0P]a+_eq+#+I4o76C8slAV63h$$H<o4'L3poS*/f$X$S33!c'&ZQC4#m^`HVk6"M$?Q2b8>ZN3F\.,OknB;Vkp'l:hfk%CSF'tcU.]N1dOb]636()Be%UZ1HI_J=F`pDgd1d-lKgm.)6=K16VHS^3b9`q5pmTi8f3.1_KVJ?;\%t5,U*&*Eb#jUcm4`h1_Bh;%F5W`Y+0HPY*h/u=;HV#0RB&Dd7D3FQl#td\'KoX-B&=`qBksCl`H/W><[(Bgjg;El"YPfOijTX4S:-pJVl`G:UX_[k&p8Y]Zqjnk%YYSI(WCbrZSQi4:8@Y.=89V0(]X>,G8$2Pj:K\'Pp#IqEpP:Sd^I?QQ<[I,8<g4T%A-neHNBU]ep?_Zk*1QG8^f2J1j&H.5UifI3%!").c\?#Z_p<'(OPQX7:BHN79Ou*0S#'09tj8g)`&cmra+nS6e;ue.6/c[^CpcgVRT_,s.1as<8&?%t(=FV5d.7REVaOc`8n\D:'%ZN#Xl!e<.!k9$!%!/O1k:Qq"C,KOcM#W<kQ8QL?R,V9"L-]RQb!hc'6DKf[m!E%k;f:IL\B>iR*J6fnE"%`quMIZo&dUdT.*Id#>%ouf8!7%>J-0X)6>]TWGVTTT+DP4S`:W=7+d^(^B(\G'Sm-ZDH7),mjDb*ZL_(mt>dY,tr%]Q'f"p)f9I%kgW:YE"9$:$A$t*O'sQ%J/(HnXn,>?Pf8W[4;@&>$08-O)jTgR,Xd$3)k)W02+hnBLX@VRUJ2Yi0MbRpdR#j]!(*Ksb"[D``$j6WP;t^O#aYD&L8)soN04g/%3>K],Z>D8N#"4@&f!nPFKKJA4c(o@hFI%Q_*i^9T^s/8ENViXI,hj4>GE="NF_be-h&7++nU6Z*![YtUXg&LTCTJe%T$/[)Qo$d@%V9HU`;1^4RK[83knnaOYE]?+N>T`SpV5-+37ik,M>it.KKJ,1U[lhRu%*l:;_TSi!>LDUE,>!)uHOrEtPTnTO/^k/<ci-4aT?anh%nGt%(o9%q6E.Z]&Mj,+.)AUu2af.gnk^6,*epZAN9$*D1V$t)CFVk&0Wt<eMG<eO5el!lh8:0U<*cg`^#q^tcF^f&,<!8SW@.g^F%\j;*b6pT$(WXNh,6HV7B">g1mrmMCL9cuZb&JE,SI^V^O:(k9%;WI_\-h&&I2MT1mlPS`I\QgO,9[96-Kc<CP_dP$./WGi+cSpc4%n(fk3S&u+0+o]V>llg6nBB(k0q?4NALHfc/`Y79\=R@*")WA.Dcec?05-7`bq7[M$g8)s'FnH>[=tJ?$V@1*%^l?XH*"ggGcMt/U%m0&;K3$A8NhXF2M4Q`GE'ZgR`jC3fj$P"o(7(<[_hr$$1KG_6+0>mMTXWu7.>7n?%f->hWJ>+<9Hm8'.TKS&"2"EZbUXm#h!4X-G%e1d10Omq*j8/WmR5E1k_N?BnH-D1tEXK<O+Rm=\u,>:jhs(m\9$VBk#7Oh:Tg_&a-"!Q4H#i&qcF:1`?(doY]-k;Q`6CBkWD0(O,%q07u8Nf)+)W>GaESYT]qBN)DjP0&t-W1H6rGO$5EES_iOM-_gfn`n;PlZH\C>$YHN+q8]PdCY*k3_V$i?'2ckZ.j&%M0E[$%WLN-%4q5aI0hc"loe'@CLc(n1Z*8HFf2tAe]o>,G,J=?O=`;IW8tg4GLJV].ZVC:B9D\Xf)#jJ@IJi@hJ)1+thuE]E^Am$(r:&1=J,So<%?i;(]qthK7o2!-uLT`r?o^V\Upq-S#LJP\^rU5<<q8<6GIeiX15Q1)4J,I2[5CE=Js7V4t#%][Fm(`DI^]+hZrV6Bm&bA*W~>%AI9_PrivateDataEnd