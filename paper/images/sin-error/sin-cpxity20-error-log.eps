%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: MacOS Roman
%%Title: sin-cpxity20-error-log.eps
%%Creator: Adobe Illustrator(R) 13.0
%%For: Gabriel Peyré
%%CreationDate: 2/21/11
%%BoundingBox: 0 0 558 450
%%HiResBoundingBox: 0 0 557.7485 449.0195
%%CropBox: 0 0 557.7485 449.0195
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 13.0.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 13.0.0 x406 R agm 4.4378 ct 5.1039%ADO_ContainsXMP: MainFirst%AI7_Thumbnail: 128 104 8%%BeginData: 6942 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF%0066000066330066660066990066CC0066FF009900009933009966009999%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333%3333663333993333CC3333FF3366003366333366663366993366CC3366FF%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033%6600666600996600CC6600FF6633006633336633666633996633CC6633FF%6666006666336666666666996666CC6666FF669900669933669966669999%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF%9933009933339933669933999933CC9933FF996600996633996666996699%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100%000011111111220000002200000022222222440000004400000044444444%550000005500000055555555770000007700000077777777880000008800%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF%524C45FD11FFA8FD7DFFA852527DFD7CFF27FFA852FD7BFFA827FFFF27A8%FD7BFF27FFFF52FFA87DFD79FF27A8FF27FF7D9ABCCAFD77FF7D5252A8FF%FFFFCABCC3CAFD76FFA8FFFFFFA8FFFFFFCAC3BCFF59A8FD7CFFCABC93A8%FD76FFA8FD07FF94C3FD7EFFA19AFD76FFA8FD07FFCAC3FD7FFFBCFD76FF%A8FD08FFC3C3FD7EFFC4C3FD75FFA8FD09FFBCFD73FFA8A8FD0AFFC3CBFD%70FFA87DF8A8A8FD09FFBDCAFD71FFA852A8FD0AFFCAC3FD6CFFFD04A8FF%FF27A8A8FD09FFCAC3FD6BFFA8FD047DFFFF52A8FFA8FD09FFBDFD72FF27%A8A8A8FD09FFC3CAFD71FF7DA8FD0BFFC3CAFD73FFA8FD0AFFCABCFD7FFF%C3FD73FFA8FD0BFFBCCBFD7EFFC3C3FD60FFFD05A8FD0DFFA8FD0BFFCAC3%FD5FFF7D7D527D527D7DFD19FFBCFD5EFF527DA8FFFFFFA87D7DFD0BFFA8%FD0CFFBDCAFD60FFA8FD1DFFC3CAFD5FFF7D7DFFFFA8FD0DFFA8FD0CFFCA%C3FD5FFFA827525252FD0AFF527DFD0EFFCAC3FD5FFFA87DA8A87DFD09FF%27A85252A8FD0DFFBCFD5FFFA87DFD0BFFA8A8FFA827FD0EFFC3CAFD5EFF%7D527D7D52FFFFFFFD05A8FFFFA8F8A8A8FD0DFFC3C3FD5EFFA8277D527D%FD04FFFD047DFF7D27FFFFFFA8FD0DFFC3A8FD5CFFA8A8FFA8A8A8FD08FF%A8F8A8A8FFA8A8FD0DFFC37DFD5BFF7D52FFFFFF7D52FD08FFA8FD047DFD%0FFFC3A1AFFD5AFF7DFFA852A8FF52FD0DFFA8FD0EFFCA9AFD5BFFA8A8FF%7DFFFF7DFD1CFFCABCFD5BFF7DFD0627FD0DFFA8FD0FFF9AFD5BFFA87DA8%A8A87D7DFD1DFFBDC3FD5AFFA8FD05FFA8FFA8FD0BFFA8FD0FFF84BCC3FD%59FF7D7DFD05FF7D7DFD1BFF59A8C3CAFD59FF7DFD0552A8FD0CFFA8FD0F%FF52AFFFBCCAFFFFFFA8FD56FFA8FD23FFCABCCAFFFFA8FD58FF7D52527D%FD0BFFA8FD13FFCABCFFFF7DFD57FFA87DFFA87DFD08FFA8FD17FFCABCFD%59FF7D527D7D7DFD06FFA8277D52FFA8FD15FFC3BC7DFD58FFA87D7DFD07%FF7D7DFF527DFD17FFC39AFD57FFA8FFA8FF7DFD07FFA87D27FFA8FD17FF%6FBCCFFD55FFA8277D527DFFFFFD047DFFFFA8527DFFA8FD16FF59A1BDCA%FD04FFA8FD4FFFA8A8FFFFA8FFFD05A8527DFF5252FFA8FD16FF52FFCABC%C3FFFFFFA8FD4DFFA87DFFFFA852FD07FFA8527D52A8FD18FFA8FFFFFFBD%C3FD50FFA85227A852A87DFD07FFA8A8FFFFA8FD1CFFC3BCFF52FD4DFFA8%7DA8527DFFA8FD29FFCAB6A1FD4DFFA852527D27527DFD0BFFA8FD1EFFCA%68C3FD4DFFA87D7DFF7DFD2BFFAF52C3BDCAFD4AFFA85252527DFD0DFFA8%FD1FFF52FFCAC3BCCAFFFFA8FD45FF7DA8FFFF7DFD31FFCABCC3FD47FFA8%527D5252FD0DFFA8FD25FFC3BC6FFD46FF7D5252FD35FFA86FBCC3C3FD40%FF7D7D527D7D7D52FD0DFFA8FD27FF84FFCAC3BCC3C4A87DFD3BFF7D527D%7D7D527DFD3AFFCAC3939ACAFD4CFF27A8A8FD2EFFA876CABCC3C3CAFFFF%AFFD0EFFA8A8FD34FF7D277DFD33FFCACABDC3939ACAFD42FF7D7D527DA8%FD36FF766FC3BCC3C3CACAA87DFD36FFFD047DA852A87D7DFD37FF7D7DFF%FFCACAC3C36F6FC3CACAFFFFFFAFFD30FFFD04A8527D2752A8A8FD36FFA8%FD06FF7D76CAC3C3BCC3C37676FFCAFD33FF7D7DFD3FFFA8FD05FFCAFF70%9AC3C3BCC3C3CB76FD07FFA8FD28FFA8FD3EFFA8A8FD06FF7D84FFFFFFC4%CAC3949AC3C3FD04FFA8A8FD07FFA8FD66FF7DFD07FF7DCACAC3BCC3C3CB%52FD07FFA8FD20FFA8FD4EFFA8A8FFFFFFCACABD6F9AC4CAFD04FF7DA8FD%05FFA87DFD6FFF52CAC3C3BCC3C3CA4BFD07FF7DFD18FFA8FD4EFFA8A8FD%06FFA8A8FFFFFFCACA9A939AC3CAFFFFFFA8A8FD6FFF7DFD07FF52CAC3C3%BCCACAFF59FD18FFA8FD56FFA8FD06FFCA7DAFFFFFFFC3C39A76FD6FFFA8%FD07FF7DFD06FFCA76FD18FFA8FD57FFA8FD06FFA8A8FD05FFA883FD77FF%7DFD07FF52FD18FFA8FD65FFA87DFD7FFFA8FD18FFA8FDFCFFFFFFFF7DA8%A8FFA8FFA8FFA8FFA8A8A8FFA8FFA8FFA8FFA8FFA8FFA8FFFFFFA8FFA8FF%A8FFA8FFA8A8A8FFA8FFA8FFA8FFA8FFA8FFA8FFFFFFA8FFA8FFA8FFA8FF%A8A8A8FFA8FFA8FFA8FFA8FFA8FFA8A8FFFFA8A8A8FFA8FFA8FFA8A8A8FF%A8FFA8FFA8FFA8FFFFFFA8A8FD17FF525252A8FD12FF527DA8FF7D527DFD%15FF7DFFFF7D52FD13FF7D7D7DFFA87D7DFD13FFA87D52FFFFA852A8FD13%FFA827FF7D27FD11FF277D7D527D52A8527DFD13FF2727FF7D52A827FD11%FF7D52A852A8527D7D52FD12FF527D7D27FF27A8277DFD12FF7D52FFA852%FD11FFA8FFFF27527DFF527DFD12FF7D5252FF27FFFF52A8FD10FF52527D%A8FF27FFA852FD12FF52A8FD047DFFA852FD12FF7D52FFA827FD13FF277D%527DFF7D52FD11FFA87DA852FF27A8FF27A8FD10FF2752A8525252FFFF27%FD12FF522752527D52FF7D27FD12FFA827FF7D52FD11FFA827A8FF7D52FF%7D7DFD11FF7D527DF8A827FFFF52A8FD10FF527DFF525227FFA852FD12FF%27FFFF52527DFFA852FD13FF7D5252A8FD11FFF87DA8FF7D52A852A8FD11%FFA8FF7D27A87D527D27FD11FF7D52A852A8527D7D52FD11FFA8277DA827%A827A827A8FD28FFFD047DFFA87DA8FD15FF7DFFFF7D52FD13FF7D7DA8FF%A87D7DFD13FFA87D7DFFFFA852A8FD94FF7D7DA8FF7DA8FFFFA87DFFA87D%FFFFA87DFD06FFA8527DA8A852FD09FFA87DA8FFFF7DA8FD15FFA8FD3DFF%5227FFA8527DFFFF7D7DFFA8F852FF7D7DFD06FF52FF7DA827A8FD08FFA8%527DA8FFFF527DFD0CFF7DFD08FFA87DFD19FFA8A8FD21FF52A8A87DFD04%FF52FFFFA85252FFA8A8FD06FF52A8A8A87DFD06FFA8A8FFFF52FD04FF7D%7DFFA8FFA8A8FFFD04A8FF527DFD05FFA8A8FFA8FFFFFFA8FFA8FF7DFFFF%A8A8A8FFFFA8FFA8FFFFA8A8FFA8A8FFA852FFFFFF7DFFFFFFA8FFFFA8A8%FD15FF275227FD04FFA87DFFFF7DFF27A87DFD07FF7D7DA87DA87DA8FFFF%FF527D7D7DA8277DFFFFFF527D52FD067D277D52A85227FD04FF7D7D7D52%7D52FF527D27A852A852A8277D527D7D27FF5252527D527D527D527D52A8%FF277D52A852527D7D7DA87DFD14FF27FF27A8FFFFFF7DA8FFFFA8FF7D27%A8FD09FFFD047DA8FFFFFF27FFFF27FF52FD04FF7DF87DFF527DA87DA87D%FF527D7D7DFD04FF27A8A87D7D7DA8527D7DA827A87DA87DA8A852FF27A8%A87D27FF7D5252FFA8FF52FF7D52FFA8527D52FFA82752FD14FF5252FF7D%27FFFFFF52FFFFA87DFFA8F87DFFFFA8A8FD04FFA852FF27FF7DFFFFFF27%A8A827A852A8FFFFFF527D52A8527DFFFF7D52FF52527D52A8A8FFFF2752%FFA87D52FF527DA8FF27FFA8FF52A87D7DFF7DF8FF7D27FFFF5252FFFFA8%52A87D27FF527D7D7DFFA8A8527DFD12FFA85252FFA8277DFFA87DFFFF52%7DFFFF7DFFFFFF52A8FD04FF52FFFF7D7DA8FFFFFFA852527DFF27A8FFFF%FF7D7DA827A8527DA8FF277D52FFA8527DFFFFFFA8527DA87D52A852527D%FF7D52A8A8527D7D27FFA852FFFF527D7DFF527D7DFF527DFF7D5252A87D%52FF7D7D7DA8FD13FFA8FFFFFFA8FFFF7D7DFFFFFFA8FD06FFA87DFFFFFF%A8A8FFFFA87DFD06FFA8FFA8FFA8FFFFFFA8FD05FFA8FF7D52A8FFFFFFA8%FD05FFA8FD04FF7D52FF527DFFFFA8FFA8FFA8FD07FFA8FFFFFFA8FFFFFF%A8FFFFA8FFFFA8FFA8FFA8FD1CFF7DFD0BFFA8FD20FF7D52FD0FFFA87D7D%7DA8FD3CFFA8FD66FFFF%%EndData
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
                        
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 73 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		clonedict
		begin
			/Intent Intent def
			currentdict
		end
		setcolorrendering
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: (Page 1) 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="Ôªø" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.1-c036 46.277092, Fri Feb 23 2007 14:16:18        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xap="http://ns.adobe.com/xap/1.0/"
            xmlns:xapGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xap:CreatorTool>Adobe Illustrator CS3</xap:CreatorTool>
         <xap:CreateDate>2011-02-21T22:34+01:00</xap:CreateDate>
         <xap:ModifyDate>2011-02-21T22:34+01:00</xap:ModifyDate>
         <xap:MetadataDate>2011-02-21T22:34+01:00</xap:MetadataDate>
         <xap:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xapGImg:width>256</xapGImg:width>
                  <xapGImg:height>208</xapGImg:height>
                  <xapGImg:format>JPEG</xapGImg:format>
                  <xapGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgA0AEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q7FXYqxj8zfNtx5S8&#xA;jarr1rEk15bIkdlFIaI1xcSpBDzpQ8fUlWvtiqRQar5q8seePLOg6zrD69aeaILuNpp4baBra+so&#xA;hcH0fq0cFYZI+Y4vyYED4sVeiYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXY&#xA;q7FXYq7FXYq7FXYq7FXYq7FWL/mb5SuPNvkXVdBtZUgvblI5LKWQVRbi3lS4h57H4fUiUN7Yqklv&#xA;pfmjzP558u69rOiyaDZ+WILpxFPNbXD3F9exLA3pfVpZqQxR86M/FmJHwDFUx0/Q/NOly3+oaTqk&#xA;urJeXt1PNpWrys6pW4ekdncKCYERaKqFGWnh1yqQmDYPwdjp8mmlAQyxMT/Pjv8A6aJNH/NMfinO&#xA;nearC5uUsLxJNM1Zhtp94AjuR19FwTHMB4xsfemMcoJo7FGfs6cI8cCMmL+dHcf5w5x/zgEfp2q6&#xA;fqUUstjOtxHBPNazMn7M9tI0U0Z90dCDlrr0VirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsV&#xA;dirsVdirsVdirsVdirsVdirsVdirsVdiqF0z/eZ/+M9x/wAn3xV2p6TpmqWrWmo2sd3bsamOVQwB&#xA;HRhXow7EbjIyiJCi36fU5MMuLHIxl5MW/LLTDo8HmDRmQRtaazdzRqHaQtBeFbmGRnf4mZkl+IsS&#xA;eQO5yvFtY7i5vaYEvDygAeJCzQocQJjLYbC6vbvZnlzq3Yq7FXYq7FXYq7FXYq7FXYq7FXYq7FXY&#xA;q7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FULpn+8z/8AGe4/5PviqKxVj61tPPbDpFq+nBgO&#xA;3q2EtD9LJdj6F9sp5ZPePu/tdofXovPFk+yY/XD7WQZc6t2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV&#xA;2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KvLvO935ysvzX8ip+m1Xy9qV9dRfoi2heBm9Kxke&#xA;tzP6zicctwvpqo22JFcVej6Z/vM//Ge4/wCT74qisVY/5s/0a40TVegstQiilP8AxXehrQg+wkmR&#xA;voynLsQe4/fs7Ts31xy4v5+Mke+Hr+6JHxZBlzq3Yq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXY&#xA;q7FXYq7FXYq7FXYq7FXYq7FXYqtmhhnheGZFlhlUpJG4DKysKFWB2IIxVi4/Kf8AKwGo8m6GCOh/&#xA;Rtp/1TxVT83+UdS1nzb5O1i1khS28vXlzc3qSswkdJ7V4FEQVWBPJt+RG2Ksh0pGWKZjIzK08/FD&#xA;xotJ36UAO/uTiqNxVKvNWmy6l5b1KxgNLma3kFsw/ZmVeUTfRIAcryx4okOb2dnGLUQnL6RIX7uv&#xA;2InRtSi1PSLLUov7u9giuE+UqBx+vJQlxAHvadVgOHLLGecJEfI0jMk0OxV2KuxV2KuxV2KuxV2K&#xA;uxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxVC6Z/vM//ABnuP+T74qisVdirH/JV&#xA;YNOvNLOx0q+ubVV8Ii/r24+iCaPKcOwI7i7TtX1ZI5P9UhGXxrhl/soyZBlzq3Yq7FXYq7FXYq7F&#xA;XYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXnvmDyZ5UWGLUfPjTeZrq7uYraGCRJpLRJLm&#xA;QJHHb6fGXiVVru7BnoCWc4qiv+VUfltY3MI0mzj8u6rJya0uNKlNjcEoKsQsZCShQfiWRGXxGKsv&#xA;02G+gsYYb+5W8u414y3SxiESEHZigLBWI+1TavQAbYqicVdiqF0z/eZ/+M9x/wAn3xVFYq7FWPWf&#xA;+ieeNRg/3XqlnBeRj/i22Y28x/4BoMpG2Q+Yv8fY7TL69HCXXHOUfhL1R+3jZDlzq3Yq7FXYq7FX&#xA;Yq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FWC/nNZaPe+T4oNZE7aa2oWX1kQXCWYC+&#xA;uoLTXDtGI41+0TyrUCm+KoLyt5U/L3SfN1jc6Lrlze6kbe5jjtJtRuNSUxH0y7fvZJVi40XfavTF&#xA;Xo+KrZPU9NvSAMlDwDVC8qbVpXbFXiHmFfMnlaHy0JPMN3qf5p6pqNu9xpdveXM1jcW7zUulWwYp&#xA;BDaxwhqS+ipBH2q4q9n0z/eZ/wDjPcf8n3xVFYq7FWP+Yx9W1ry/qY2VLp7Gc/8AFV7GQv33EUIy&#xA;nJtKJ86+btND68ObH3xEx74H/iDNkGXOrdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdir&#xA;sVdirsVdirsVecaxq2ka9Y3kvnqx02z8m6fqk0Fu17M031iSwmeFZZUaNIURpEYcGLdMVQmh6FpG&#xA;g/mBosmmaBocFhq9ve/U9W0i0GnToqKknozRLzEysoBD8huD8IxV6PqukaTq9jJp+rWUGoWE3H1r&#xA;S6iSeF+DBl5RyBlNGUEVHXFUkt/y48h6bKL/AEbytotpqtuGeyuY7G3hZJaHifUjj5rv1K74qxL8&#xA;v/J/5geWFe4vNG0XU/MGoPz1zzHJq92bq4LPyNFbTDwjQbRwhwoAHzxV6NpSMsUzGRmVp5+KHjRa&#xA;Tv0oAd/cnFUbirsVSTzrbSz+VtQMC8rq2jF5ar4z2jC4iH0vEMqzC4H8cnY9k5BHUw4vpkeE/wBW&#xA;fpP2FT8izNP5cjuD6dJ7q+lj9J0kX05L2Zozyj+GvAjkOqmoO4OWA2LcHLjMJGJ5xNfJP8LB2Kux&#xA;V2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KvHpfIn5tapZ6za2fmew0/wAvanf3&#xA;89lYzWC3Ui29xdySq3rrKgIl5eovWgb6AqmmleVvzUi896FqPmTWrTWtLtI71WFpZizMMksSqjOT&#xA;JIX5UIFOmKvS45I5F5RsHWpHJSCKqaEbeBFMVXYq7FULpn+8z/8AGe4/5PviqKxV2KuIBBBFQeox&#xA;VhP5XX1vbaMvlqRIIL7SmnjWO2ZHhmhS4kT1YXQ/vCrApMTRhIG5AE5ThNek8x9zt+1YeJL8zHeG&#xA;U2f6M/4onu3sjvHxqbZc6h2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KsP&#xA;ufIN/aTyTeVPMF1oEcrF5NN9OK8sOTGpaO3nHKGp/ZhkRf8AJrvirG9ZvLPTdQXTPPH5qQWocAvp&#xA;dubPSJHVtx6svKS5RWHdHj+eKvSNHttKttKtINISJNMjiUWa29DF6VPhKFdiCN698VRmKuxVC6Z/&#xA;vM//ABnuP+T74qisVdirsVYhYfl/9R8uw2EN9TVrK8vb/T9VWLgYpL67lumQx8m5R0m9ORS3xgV2&#xA;NKV5IcXvHJzdFrPBJEhxY57Sj3j9BHOJ6HytOPLuvNqcU1vdw/VNYsSI9RsieXByKq6N+3FIPiRv&#xA;oNCCA453seYTrtH4JEonixT3jLv8j3SHIj9BBRWi6j+kdNjvKcfUaQU4Sx/YkZPszpFJ+z1KivUb&#xA;UOWOCjcVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVeeX3lT8wrHVr+XQX0G&#xA;+sdRunvHfWLef63GZAoMfqQHjKqBaJyoQtF6DFWUeTNPi0/y7b2kc0M5jkuPWe1i9C3EzXEjTJDF&#xA;VuEaSFlQVOwG564qmWqTXsGmXc9hb/W76KGR7S05KnqyqhMcfJiqrzagqTTFXk9j5q83aZ5s8o6J&#xA;eeaI9b8yarIV81+VxHYhdPjNqbhpIzaoJoRCxRR60j+qDVcVer6Z/vM//Ge4/wCT74qisVdirsVd&#xA;iqSeYdDubmWHVdJdYNdsQVt5HqI5omIL209AT6b02PVG+IdwaskL3H1D8U7HRauMAcWXfDPn3xPS&#xA;cfMf7IbHvAP8vPNMfmHy9HcvNI+oRs63tvcRLb3ERMjFFkgUtw+CnHxG5oagShkEve1azRTwS33h&#xA;L6ZD6ZDvH6RzHIsnybhuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxVJPN/muy8r&#xA;6XHql+h+ofWYYLq4qFSBJn4eq/ViASFCqCSxAxV5lqNj+SOoTpq+neWYfOuqeaLi8vIkhggeb/Q1&#xA;jF4S1yYPTEbMvwOeRd6AUOyr0TSfLflm78nWGn6a1zb6DKi3VgLK5uLB1hmJmjRJLR7eRUUSUC8u&#xA;lK1xVDzfl/BaWt1NoOp6pa619XmTT7q81bU7+CKeSJkjke2vLi4gkCM1aPG334qxTUdI8++bm8m2&#xA;+r+XzpOoeX9StdS1bXZZ7OSN/qoPqpZC3kkmIuj9r1I4wF6g4q9K0pGWKZjIzK08/FDxotJ36UAO&#xA;/uTiqNxV2KuxV2KuxVgnln8tn0nyxp9rHNBp3mDTTc/V9Q09G9LhPcyTiKSNyPViPqfEjftVKlTv&#xA;lc8d7jaTn6TXnEDCY48MucT98T/DLzHxsbJ9o/mOWS7/AERrUC2GtqCyxgloLlF6y2shpzX+ZD8a&#xA;9xShIhk3qW0vxyZ6rQgR8XCePD/so+Ux08j9J6dwFeWdQ07UdBsr3TZnnsp4+cEskoncip+1IGk5&#xA;EHb7Ry11qZ4q7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FWJfmi1nF5SlvbjV20OWxmh&#xA;ubLUUh+tstyrhYUFt/u8yM3ARjc12od8VeW+UE1jXPM66jpXmCe084W6XE5sfMOiPp0dxDerBFc3&#xA;EUSSKzhRbW3Hi/wgDnUuWxV7loelxaRoun6VE5ki0+2htY5G+0ywxiME07kLiqNxV2KoXTP95n/4&#xA;z3H/ACffFUVirsVdirsVdirsVQWsaLp+r2ZtL6PmnIPFIpKSRSL9mSKRaMjr2ZTkZwEhRcjS6rJg&#xA;nxQO/wBhHcRyIPcXnf5V635q038vtFuNbsHurCSAu09rH/pNsC7fDNapyLqOzR1an2lrVsq4pQ57&#xA;jv6uw8HT6nfGRiyfzJH0H+rI/T7p/wCmekadqWn6lZx3mn3Ed1ayiqTRMGU+1R3HcZbGQkLDrc+C&#xA;eKZhMGMh0Kpa3MN1bRXMJYwzoskZZWRuLCoqrhWXbsRXJNKrirsVdirsVdirsVdirsVdirsVdirs&#xA;VdirsVdirsVYF+YGt+W7+yWCw8z6NY+YtGvY7uyjv7qH0RdWxZGhuYw4cKys6GnxIfiG64qkvk3X&#xA;dZ8yedtPufMWq+XjPp9vdnTNM0C4a+lkaURpNNcTMv7qNF2VBTkW3+yMVer4q7FXYqhdM/3mf/jP&#xA;cf8AJ98VRWKuxV2KuxV2KuxV2KtKqqoVQFUdANhiqR6j5Uge7k1PSJ20jV5N5bmAAxTkf8tMBokv&#xA;+ts47MMqli3sbF2WDtIiAx5R4uIdDzj/AFJc4+76e+JSHyX5j87W/lTSJfNeiXUty9pE91d2/GWc&#xA;Myg/6TaBYZUl/nWNH38OgHHIcx8v1Mzo9Pk/uctH+bk9P+yFxPvPAyfS/NHl/VBJ9Rv4pXhFZ4GP&#xA;pzRDr+8ifjIn+yUZOGSMuRcXU6DPg3yRIB5HnE+6Q2PwKOsr20vrOC9s5kuLO6jSa2uIyGSSORQy&#xA;OrDYqymoOTcRWxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KseH5d+Q/Vnmk8vafPPczS3NxNPbRT&#xA;SPLPIZZGZ5FdjV2PfboNsVV7DyV5Q07UYtS03RrOwvoUeNJ7SFIDwlpzVvSChgeI+1WmKp1irsVe&#xA;Wec/zF1+Lz55c0fQGVNEGtQaV5gviqP6txPbyz/U4iwanpJGGmYbgsqg/aGKvSdM/wB5n/4z3H/J&#xA;98VRWKuxV2KuxV2KuxV2KuxV2KuxVK9f8taNrto8GoWsUrlGWG4ZAZYiQQGjf7SkV7HITxxlzDla&#xA;bW5sB/dyMb59x945H4pF5e8j655f0DTNN07zFMZLC0gtnS5gjmtHeGNULJF8E0SkrsiTcVGw6ZDw&#xA;yPpPz3/b9rlfn8U/73FE+cP3Z+z0f7BV1bzH5t0HSr2/1HR4NRgsoJLhp9PuOBIiQuS8NwFKD4d+&#xA;MjnwBx4pjmL937V/L6XJ9GQwPdkjt/poX9sYrNA/M7y5qOg6ZqmoSHR31C1guTHeLLFCpnjV6R3M&#xA;0cMUq/Fs67HD48eu3vR/I+oP0AZP6khP7Iky+YZJ+l9K/R8uo/XYP0fDG0s156qeikaDkztJXiFV&#xA;RUknLBIHk4GTFOBqQMT57K9rdW13bQ3VrMlxa3CLLBPEweOSNxyV0ZahlYGoIwtbriOSS3ljilME&#xA;roypMoVmRiKBgGBUlTvuKYqqAEAAmpHc9T92KuxV2KuxV2KuxV2KuxV2KuxV2KofULGC/spbOdpU&#xA;hmXi7W80ttKB/kTQNHKh91YHFUhtvy90K1uYrmG81n1oXWSP1dc1edOSmo5RTXUkUgr1V1KnoQRi&#xA;rAde/JrXrOPyjZeX/MGrXNjpmuLfXRm/RAe2R4rgy3gdrON5pjLLv6nqV5ElT1Cr1bSVmEMvN1ZP&#xA;Xn9MBSGH7968jUg/QBiqOxV2KuxV2KuxV2KuxV2KuxV2KuxV2KqV1bRXVrNbSisU6NHIBseLgqfw&#xA;OKqOlaXZ6XpNnpVopWysYI7W3RjyIihQRoCT1+FcVY75x8geV9V0DV4/qlpp93c2dxF+kxGsZjLx&#xA;MvqSlOHNErUqxoR1yo4YHo7DH2rqYDh45GPdL1D5SsLPLvkabTNA0yzsfMN/F9VtIIQ8TQywN6cS&#xA;pVIriKYIhpUKtKDpg8KuRP3/AHs/5SEvrxYpf5pj/uDH7kN53Xz5pXkzXr2y1u3le1066mjkktPT&#xA;uVMcDsGjlWZYQ4IqvKLjXrjwzHUH4L42jl9WOcf6swR8pRv/AGSP0rVfPUOlWZ1HRor6f0IzNLa3&#xA;kRldyo5Fo3jt4VYnrwcr4GmPFMcx8j+tP5fSS+nLKP8AXh+mMpfcp69+YaaNoeo6ldaJqUUtjbTX&#xA;K28kBZHaGNnCNcW/1mKINxoXY8V6nD43eCPh+pH8lyl9GTFP/PEfsnwFPdL8xaDqtRp1/BdOv24o&#xA;5FMi+zx15qfYjJRyRlyLjajQ5sP95CUR3kbfA8iitQvrewsp724LCC3RpJSitI3FRU0VAWP0DJuK&#xA;r4q4kAVJoPE4q7FXYq7FXYq7FXYq7FXYqhdM/wB5n/4z3H/J98VRWKuxV2KuxV2KuxV2KuxV2Kux&#xA;V2KuxV2KuxV2KuxVD6lp9pqWnXWnXiGS0vYZLe4QEqWjlUo45LQiqnqMVV0RURUUUVQFUddht3xV&#xA;KPOdpp955P1201K4az0650+6ivLtByaKF4HWSRQAalFJI2xVEap5f0LVeP6SsILtk3R5Y1Z1Pijk&#xA;clPuDkJY4y5hytPrc2H+7nKPuO3xHVg/5neTLlPy+1+PRNTv4K2cn+gvdGWF1AqUElwJZYgQP2HX&#xA;7sh4VfSSPt+9yv5SjP8AvcWOfmBwS/2FD5xLKPU892Y+OHT9XQdWiaWwlp4hHF0jH/ZrjeQdx+z9&#xA;a8OinyOTF76mPmOA/YWLfmh531Cw8ias7aFfW98qRiNJYYbiBuUyK1ZUaeEDiTT1OPh9qmPi1zBH&#xA;48l/ksz/ALrJjyf53CflPh+y2e6ZrGk6pD62m3kN5EOrwSLIAfA8SaH2OWRmJci4Wo0uXCayRlE+&#xA;YpB+bdQvtP0KW6sWVLlZrZFZ1V14y3Ecb1VniH2GP7Xyqdsk0JxirsVdirsVdirsVQumf7zP/wAZ&#xA;7j/k++KorFXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYqlfmjTItU8ualp00Mtx&#xA;Fd28kLwQGISuHWnFDP8Augx7c9sVTTFWO/mFoba75N1PSVWd2ukRQtp6XrHjIr/D60kMf7O/Jxti&#xA;qM1Pyp5e1KcXN1ZJ9cGy3sJaC5HynhKSj/gsrlijLcjdztP2lnxDhjL0fzT6o/6WVx+xifn/AMt+&#xA;YE8syQWWrz3dq11Y1tLuNpZRS9hI9O4tvSnHEip5c9q7jqAISB2O3m2T1eDJE8eIRnWxgeHfzieI&#xA;f6XhehZa612KuxV2KuxV2KoXTP8AeZ/+M9x/yffFUVirsVdirsVdirsVdirsVdirsVdirsVdirsV&#xA;dirsVdirsVdirsVdirsVQ+o6faajZS2V4hktpgBIoZkJoQRRkKsNx2OKojFUh88eX5PMHlufSozR&#xA;pprSQmqr8MF1FM27pKvSP+Xf264qn2KuxV2KuxV2KpJ5082WXlTy3da3dxPcLB6ccFrFT1Jp55Fi&#xA;hiTkQKvI4Ht1xVjnl3zZ5mHml/K3mC0s9I1K6tn1TTI4JJL6OSEy0nRpiLT97E8gqojpx3DHfFWa&#xA;enqv/LRB/wAiH/6rYqslt9WdQou4UIZWqIHrRWDEf33elDiq/wBPVf8Alog/5EP/ANVsVd6eq/8A&#xA;LRB/yIf/AKrYqwK4/N+0ggk1Jre6byxDefUJvM62kf1BZRL6DNQ3guWiWX4DKsJSv7WKq2pfmbHp&#xA;Nzq0Pp3Oo2Ogv/uf1i2tEe2sTJ+94Sc7tJpPSjcFxDG/BftUxVmcDX88Mc8N5bSQyqHikSFirKwq&#xA;rAibcEYqqenqv/LRB/yIf/qtiqwW+riZpPrcJVlVRH6D0BUsSR++78vwxVf6eq/8tEH/ACIf/qti&#xA;rvT1X/log/5EP/1WxVhumfmZomrf4iuLfVY4tP8AJ8zJq9+9uwt34wsz+mVnZnVPHjuR8NRQ4qv0&#xA;H8xX1XVLHTLi1udGuNWt3u9GOo2saLeQxAM5i9G7nKsqOHMcoR+O/HrirL/T1X/log/5EP8A9VsV&#xA;WTW+ryQyRrdwxs6lRIsD1UkUqP33bFV/p6r/AMtEH/Ih/wDqtirvT1X/AJaIP+RD/wDVbFWEaz+a&#xA;kOlvqkxtrq70jQ5hb61rdtaI1pay/DzVud3HPJ6fMeoYYn49+hxVU1b8w303VdQsLOG516awt49Q&#xA;1M6dbRvHZ28qVj5vNeQBi6xtIscXJyNwuKso0nUZNX0y11TTdQtrrT72JJ7W4SCTi8cg5KwrKCNj&#xA;0O+Kov09V/5aIP8AkQ//AFWxVYbfVzMsn1uEKqspj9B6EsVIJ/fduP44qv8AT1X/AJaIP+RD/wDV&#xA;bFUBrurtoWjXms6pf29vp1hE091MbeQ8UQVNAJSSfADrirH9K/MCTUNatdF1G2utAvLu3/SVkuoW&#xA;0UYubWB0M3pyQXdyqMFYc0k4uoNSuKrtL/NzQNQuNNZbG/ttH1u4NnomvXEcS2V3OAxRY6StOnq8&#xA;G9MyxIGptirN8VdirsVdirAPzv069ufJcN7aQvcnRdT0/Vp7eJWeR4LO5SSbgqglisdWp7Yqllnq&#xA;ulec/wA4dF1jy5eRalo/l7SbwX2o2zepb+vqDxCK3Ei/CZAkTOy1qvemKvUsVdirsVdirx/9HXH5&#xA;mabLoOiWkGgflVDdNFPNDEqXGqfV7gtMlpEgEdvbNOp5SEc37AVOKoPSb2z0nyH+b1pqrrHc2+q6&#xA;1LPC4Ad4tQhD2RCn7QmR1SPxI4jpir0z8vNPvtN8g+WtOv1KX1npVlb3SMKFZYrdEdSPEMKYqyDF&#xA;XYq7FWJ/mW3mt/Ly2XluyuLua/nS31Cazkto7m3smBM8kH1qa2jMpUcE+P4S3L9mmKvDtVtr6Xy7&#xA;+c2j6V5dvNIt4YdNaO1Y2bC3hs7G2rbMtvcTks8CMy8OS8ftMG+HFXpvm26s9d/MD8sDo8yThJLz&#xA;Vy8VG4WH1IxiQ8a8UkeVEXsT8sVeoYq7FXYq7FXzbpNndaN+WnnrW38wX9j5r0HV9Ta3t4ruWOCK&#xA;5NwZYIns0ZYbj620goZUfkGHHYYqzf8AL3Vv0b5t/MS48zulneSLpur3KTUQC0bTkRioY1KRSRvG&#xA;fAinfFU+/IbTr3Tvyg8r2t6jRz/VPV9NxxZUnkeWNSD0ojrirPcVdirsVYF+e939V/KTzJIbNL5H&#xA;tlhkhl5+msc8qRPM/plXpCrmT4T+zirAfMXl/VtO82eX7O31+4833+seWtW0+zuLswGW0VbMSJeW&#xA;/wBWWJSlxIEjLyh3O37w4qvu7i01f8nPyr0vTJFOoXF9oUUEK09RJNO4teMUHxD0BC/qHt364q94&#xA;xV2KuxV2Kpd5i1uLQtDvdYnt5bm3sInuLiOD0/UEUY5SOPVeJfgUFj8VfCp2xVI4/wAydMbyTF5v&#xA;bTb+OxuhC2n2Rjha9uluOPomCFJW5Fw9VQkOaH4elVU8j1uFdCfWb+3m0yCKGS5uIbv0xLFHECzG&#xA;QRvIg+FeX2vnvtirH9c/Mm18veRLPzfrml3cVrNDBNe2tr6c8lqbhVIVwzQl+LPxbgp8em+KozWP&#xA;Pen2GlaRqltY3mr2euNClg2npHIT9ZQPCWEkkVFdT9roO9MVZHGzPGrMhjZgCY2pyUkdDxLCo9ji&#xA;rzrzL5N/K/SrzSdOtfIehXuq63cPBZwvY2kMQEMLzzSyyiCUqqpH2QksQPEhVD6r5t8m30ui6lN5&#xA;Pa/82XdwllpEV3YoZIplZi/HUDHLEqQiN3cxuxUAnjir0/FXYqxubzzYL5qby5BZXl3PA0Ed9d28&#xA;PqQW0l0jyQrMQeY5JGSW48VqvIioxVX8z+b7Ly7daNDeWlzMmt30emwXFuImjinm/u/W5yI4VqNu&#xA;qt0+VVU9xVD2+m6dbXV1d29rDDdXrK97cRxqkkzRqERpXABcqgCjl0G2KoPSPK3lfRJJ5tH0ix0y&#xA;S53uZLO2ht2kNa1kMary+nFUdZ3lte2cF5aSCa1uY0mglX7LxyKGVh7EGuKq2KoH9M2n6cGi8Zvr&#xA;htTeB/Rk9D0hIIiPX4+lz5H7HLlTelMVR2KpXdeVPK93q8Os3Wj2NxrFvQ2+pS20L3MZX7PCZlMi&#xA;07UOKu1fyr5X1qaCfWNHstSntTW1lvLaKdojWtY2kViu47YqmmKuxV2KqUd1byzTQRyK01uVEyA7&#xA;oXHJQfmN8VXyRxyxtFKoeNwVdGAKspFCCD1BxVLNG8p+VdDkml0XRrHS5Lj+/eytobdpN6/GYlXl&#xA;9OKt2nlXyvZ6tPrFpo9lbavckm51GK2iS5kLfaLzKodq96nFU0xV2KuxV2KvOf8AnIC8u0/LO+0m&#xA;wP8AuT8xz22h2CE8Q0l/MsbKTQ7GLn2xVLfKT6jo35sv5a8yNBcNLo8Fx5QliUpDbQ249C8tIVav&#xA;x/ZYv9pk67UVVWV/mH/p9vpflZD8XmG8SG6Ar/vBb/6Te8qfsyRReh85Biqv5ngh1TzBoOizosts&#xA;TdajeQuKpJDbw/VgjA+Mt6jD/VxV51+VYvLPzIn5a3okb/Al5eXtlOwJElhNEI9N5MdifTv5RTt6&#xA;fiMVe1B0LmMMC6gMyV3AaoBI9+JxVIfNfl2HUzp+prfHS7/Qpnu7S/orIivC8MyzI9FaNo3NdxQg&#xA;Gu2KvN9Cu9RTXdAm02NDc61BdweVpNTV3EOmWarNc30qRmIm41KeSNtuPGPjtsylV6x5f1Uavodh&#xA;qfp+i15BHM8FeXpuygunKg5cWqK98VeLTed/Np/Kq9/NYarcLqdtfyel5eHp/URbQ6kbH6k8XD1C&#xA;8kfxepy58yKfD8OKsu8lWU6/m9+YDG/uXihk0yQW7MnpsZ7NtmATlRAAE32pvXFVT865LuKy8pTW&#xA;do9/dReZtPkis4mRHlZFmbgGkKItadWNBirEU86eY/8AD/lu+i1nULqbzhrv6P1K3ItY5NK4+s8m&#xA;mQc0h4zB4/Q9SU1IBZeJK4qmPmR/P+m6fIg1670yMeYdKt9IkkezuLtbHUp4IJkvF4zI6xyGUxEt&#xA;yK/aJpiq3zZqGv6dqnmryWdbvL2wfyjc65BeyNGt5bTwO0DR+rFHGPTn+10qpDcSBQBVmn5U/V4f&#xA;Jej2i3013cppmnzTRzkEwrNbLwVOKoOPwGnU4qkGua55i1b8zdW8rW0uoWtnpek293afo1raKR7i&#xA;6eRfrEjXDR80i9MKqCqk15A7UVUvLuuedv8AHOl2GpajHNc3flKe+vbJWjewXU7a5trcyxvGoYIS&#xA;zchyPU0xVKvI2seftcl0C+lvdXlsX0ptU19ngS1tzqAeKSCG0ke24zQyx+pGViZl4UbkH3Kqt5D1&#xA;nz15j0Pyt5pS+uo/0vNJ+nvXktEsfq04ljWOziDSSJLBMI1i+EFqHnyJxVCaBrXnOPy1Y67P5iu7&#xA;y4Hm9NFMMywem1g+r/o9o3VI15OUblz2pQUpvVVG6pqnmnT/ADh5k8myeYL36/raafc+Tp/9G5ww&#xA;yzmO9CfuaN9XKs78gaxUGx3KqFtta8/auvnJ9LvrxdS8r6m2naQ0slnFZelZxRSPJfiQxtJ9ZDvz&#xA;fhRVpwoRiqcaPe+a/Nb+atVi199Dm0HX5tMsoWVTZxWenPGZmniJX1GuI2duTt8IK8aUrirfltv0&#xA;R5x/MG9k1G8upLbUIzb2EkissznRILrgQI6igVuFKAAYqkdj5p812Xk7yR56fW7jUb3zLqFhb6np&#xA;LiL6o0WpvwMNtEiBke36oQ1TQ8+WKovy1J55n0zzrqbecJ4/8PahrFjYC9jtmtxFb2v7iW5YRKf3&#xA;UrCQkbcVpTc4qn35e63rVx5km03WrXVNGv4dPWSTSNSlivIZWEoV7q2vImYPuQrpRaVWiiuKvRsV&#xA;dirsVdiqQeZPIvlnzJc2lxrNvNcy2LrLZ8bq6hWKVK8ZUSGWNRIOR+OnKm1cVa1nyD5U1rW9P1zU&#xA;rR59V0oAaddC4uI2h35EoI5FWrftGnxdDXFVtvpWoT+e7vWbyLhZWNjHYaOSyksbh/WvZaAkqGMc&#xA;CCoB+A9iMVRS+UdCXzIfMgim/TBjMJuDc3JT0yKen6Jk9Hj348Kcvi674qjYtJ02LVLjVY7dF1G6&#xA;hit7i5A+N4oGdolP+qZn+/5Yqllt5bSPzve+YhBDCZ7GGyM0ZPrTlZGcmYUC0jHER0JO7V7Yqjtf&#xA;0Ox13SZ9Kv8AmbK54C5jjbh6kaurtExH7EoXg47qSMVQ2v8Alax1h7GdpprG+01naxvrRkSaISxm&#xA;KVBzWRCroaEFT2IowBCqZWFja2FjbWFonp2tpEkFvHUnjHGoRBU1JoB3xVj8n5aeSJNYOrvpim6N&#xA;yL4xerN9VN2OlybTn9WM3f1PT5V3riqN07ydoGna7fa9Zwypqmp0N/O1zcyLLx+xyjeRo/gGyfD8&#xA;I2WgxVd5i8o6D5iNmdWhlmOny/WLMxXFxb+nMKcZR6EkXxrT4WO670pU4qlj/lZ5Cd9Wd9KV21yY&#xA;XOplpZz6k4f1FmWsn7uRW3V4+JXtTFUk8/8A5ez3flu20Ty/pkN9BNqdnf6sdQvp/Umjs54pCjzy&#xA;rdTSmSOL0gWb4R92Kso0TyX5c0uC69GxrNqUaxalJdzTX00qKnARST3TyyOiqSApNPbFUT5d8r6J&#xA;5dtGtNIgaCBitVeWWcgRoscaBpnkYIiIFRAeKjoMVUtZ8neXdZ1G11O9tnGpWStHbX1tPPazrG/2&#xA;ozLbvE7If5GJX2xVLtT/AC70Z2k1DRg2l+YYdOk03R9Qjln9O0RouESrbCQQmNGCvw4UJAJ33xVh&#xA;3ln8qLjRrjy+2k6RDoV9pckJ1XVo9QnuFuYY1KzxJBxRZfXDEVlROFeSiqgYqzqz/L3yjZX0l7aW&#xA;LQSSSyXHpRz3C26Tygq88VuJPQilYO37xEDbnffFUC/5SeQn0waW9jO2nrcm+Fsb6+KfWi3MzU9f&#xA;7fP4q/zb9cVT+Xy7osup6fqktqsuo6VFLBp905ZpIo7gIsoBJNS4jWpNT95xVAX/AJB8p3+rT6tc&#xA;2Nb27jSK+aOWaKO5jjPwLdQxukVwB0/eq223TFV1z5G8rXGqz6pJZEXd2Y2vRHNNHDctFT02ubdH&#xA;WGcrQAGRG226YqrL5R8vL5hfzCtpx1aXi0s4klCM8cTQJI0Ib0jIsLtGJCvLj8NaYqgLD8tPJGn6&#xA;rFqlppix3NtJJPaRmWZ7a3lm/vJLe1Z2t4Xau7RxqcVX2P5deUbKx1awgtJTZ66sy6vBLd3cyz/W&#xA;VKTO/qyv+8kU0Zx8R8cVR+l+V9F0y8kvLSF/rUkYg9Waaa4ZIVPIRRes8npx134JQe2Kv//Z</xapGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xap:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapMM="http://ns.adobe.com/xap/1.0/mm/">
         <xapMM:DocumentID>uuid:21814B779C3FE0119EBFD69DAEB955AC</xapMM:DocumentID>
         <xapMM:InstanceID>uuid:22814B779C3FE0119EBFD69DAEB955AC</xapMM:InstanceID>
         <xapMM:DerivedFrom rdf:parseType="Resource"/>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:stFnt="http://ns.adobe.com/xap/1.0/sType/Font#"
            xmlns:xapG="http://ns.adobe.com/xap/1.0/g/">
         <xapTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>9.900000</stDim:w>
            <stDim:h>20.999999</stDim:h>
            <stDim:unit>Centimeters</stDim:unit>
         </xapTPg:MaxPageSize>
         <xapTPg:NPages>1</xapTPg:NPages>
         <xapTPg:HasVisibleTransparency>False</xapTPg:HasVisibleTransparency>
         <xapTPg:HasVisibleOverprint>False</xapTPg:HasVisibleOverprint>
         <xapTPg:Fonts>
            <rdf:Bag>
               <rdf:li rdf:parseType="Resource">
                  <stFnt:fontName>Helvetica</stFnt:fontName>
                  <stFnt:fontFamily>Helvetica</stFnt:fontFamily>
                  <stFnt:fontFace>Regular</stFnt:fontFace>
                  <stFnt:fontType>TrueType</stFnt:fontType>
                  <stFnt:versionString>6.1d18e1</stFnt:versionString>
                  <stFnt:composite>False</stFnt:composite>
                  <stFnt:fontFileName>Helvetica.dfont</stFnt:fontFileName>
               </rdf:li>
            </rdf:Bag>
         </xapTPg:Fonts>
         <xapTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xapTPg:PlateNames>
         <xapTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xapG:groupName>Default Swatch Group</xapG:groupName>
                  <xapG:groupType>0</xapG:groupType>
               </rdf:li>
            </rdf:Seq>
         </xapTPg:SwatchGroups>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -449.02 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 449.02 li
557.749 449.02 li
557.749 0 li
cp
clp
[1 0 0 1 0 0 ]ct
91.0396 373.664 mo
91.0396 21.4976 li
537.79 21.4976 li
537.79 373.664 li
91.0396 373.664 li
cp
false sop
/0 
[/DeviceRGB] /CSA add_res
1 1 1 rgb
ef
0.5 lw
0 lc
1 lj
10 ml
[] 0 dsh
true sadj
91.0396 373.664 mo
91.0396 21.4976 li
537.79 21.4976 li
537.79 373.664 li
91.0396 373.664 li
@
136.79 373.664 mo
136.79 369.164 li
91.0396 373.664 mo
91.0396 21.4976 li
91.0396 373.664 mo
537.79 373.664 li
0 0 0 rgb
@
194.123 373.664 mo
194.123 369.164 li
@
251.373 373.664 mo
251.373 369.164 li
@
308.624 373.664 mo
308.624 369.164 li
@
365.957 373.664 mo
365.957 369.164 li
@
423.207 373.664 mo
423.207 369.164 li
@
480.457 373.664 mo
480.457 369.164 li
@
537.79 373.664 mo
537.79 369.164 li
@
91.0396 373.664 mo
95.4565 373.664 li
@
91.0396 303.164 mo
95.4565 303.164 li
@
91.0396 232.748 mo
95.4565 232.748 li
@
91.0396 162.331 mo
95.4565 162.331 li
@
91.0396 91.9141 mo
95.4565 91.9141 li
@
91.0396 21.4976 mo
95.4565 21.4976 li
@
538.763 340.321 mo
538.763 340.873 538.315 341.321 537.763 341.321 cv
537.211 341.321 536.763 340.873 536.763 340.321 cv
536.763 339.769 537.211 339.321 537.763 339.321 cv
538.315 339.321 538.763 339.769 538.763 340.321 cv
f
504.443 336.361 mo
504.443 336.913 503.995 337.361 503.443 337.361 cv
502.891 337.361 502.443 336.913 502.443 336.361 cv
502.443 335.809 502.891 335.361 503.443 335.361 cv
503.995 335.361 504.443 335.809 504.443 336.361 cv
f
470.003 332.161 mo
470.003 332.713 469.555 333.161 469.003 333.161 cv
468.451 333.161 468.003 332.713 468.003 332.161 cv
468.003 331.609 468.451 331.161 469.003 331.161 cv
469.555 331.161 470.003 331.609 470.003 332.161 cv
f
435.563 312.961 mo
435.563 313.513 435.115 313.961 434.563 313.961 cv
434.011 313.961 433.563 313.513 433.563 312.961 cv
433.563 312.409 434.011 311.961 434.563 311.961 cv
435.115 311.961 435.563 312.409 435.563 312.961 cv
f
401.243 301.201 mo
401.243 301.753 400.795 302.201 400.243 302.201 cv
399.691 302.201 399.243 301.753 399.243 301.201 cv
399.243 300.649 399.691 300.201 400.243 300.201 cv
400.795 300.201 401.243 300.649 401.243 301.201 cv
f
366.923 300.361 mo
366.923 300.913 366.475 301.361 365.923 301.361 cv
365.371 301.361 364.923 300.913 364.923 300.361 cv
364.923 299.809 365.371 299.361 365.923 299.361 cv
366.475 299.361 366.923 299.809 366.923 300.361 cv
f
332.603 291.361 mo
332.603 291.913 332.155 292.361 331.603 292.361 cv
331.051 292.361 330.603 291.913 330.603 291.361 cv
330.603 290.809 331.051 290.361 331.603 290.361 cv
332.155 290.361 332.603 290.809 332.603 291.361 cv
f
298.283 282.721 mo
298.283 283.272 297.835 283.721 297.283 283.721 cv
296.731 283.721 296.283 283.272 296.283 282.721 cv
296.283 282.169 296.731 281.721 297.283 281.721 cv
297.835 281.721 298.283 282.169 298.283 282.721 cv
f
263.723 270.48 mo
263.723 271.033 263.275 271.48 262.723 271.48 cv
262.171 271.48 261.723 271.033 261.723 270.48 cv
261.723 269.929 262.171 269.48 262.723 269.48 cv
263.275 269.48 263.723 269.929 263.723 270.48 cv
f
229.403 243.961 mo
229.403 244.513 228.955 244.961 228.403 244.961 cv
227.851 244.961 227.403 244.513 227.403 243.961 cv
227.403 243.409 227.851 242.961 228.403 242.961 cv
228.955 242.961 229.403 243.409 229.403 243.961 cv
f
195.083 232.441 mo
195.083 232.993 194.635 233.441 194.083 233.441 cv
193.531 233.441 193.083 232.993 193.083 232.441 cv
193.083 231.889 193.531 231.441 194.083 231.441 cv
194.635 231.441 195.083 231.889 195.083 232.441 cv
f
160.763 185.401 mo
160.763 185.953 160.315 186.401 159.763 186.401 cv
159.211 186.401 158.763 185.953 158.763 185.401 cv
158.763 184.849 159.211 184.401 159.763 184.401 cv
160.315 184.401 160.763 184.849 160.763 185.401 cv
f
126.443 43.9209 mo
126.443 44.4731 125.995 44.9209 125.443 44.9209 cv
124.891 44.9209 124.443 44.4731 124.443 43.9209 cv
124.443 43.3691 124.891 42.9209 125.443 42.9209 cv
125.995 42.9209 126.443 43.3691 126.443 43.9209 cv
f
538.763 339.48 mo
538.763 340.033 538.315 340.48 537.763 340.48 cv
537.211 340.48 536.763 340.033 536.763 339.48 cv
536.763 338.929 537.211 338.48 537.763 338.48 cv
538.315 338.48 538.763 338.929 538.763 339.48 cv
f
504.443 320.641 mo
504.443 321.193 503.995 321.641 503.443 321.641 cv
502.891 321.641 502.443 321.193 502.443 320.641 cv
502.443 320.089 502.891 319.641 503.443 319.641 cv
503.995 319.641 504.443 320.089 504.443 320.641 cv
f
470.003 323.041 mo
470.003 323.593 469.555 324.041 469.003 324.041 cv
468.451 324.041 468.003 323.593 468.003 323.041 cv
468.003 322.489 468.451 322.041 469.003 322.041 cv
469.555 322.041 470.003 322.489 470.003 323.041 cv
f
435.563 307.921 mo
435.563 308.473 435.115 308.921 434.563 308.921 cv
434.011 308.921 433.563 308.473 433.563 307.921 cv
433.563 307.369 434.011 306.921 434.563 306.921 cv
435.115 306.921 435.563 307.369 435.563 307.921 cv
f
401.243 308.281 mo
401.243 308.833 400.795 309.281 400.243 309.281 cv
399.691 309.281 399.243 308.833 399.243 308.281 cv
399.243 307.729 399.691 307.281 400.243 307.281 cv
400.795 307.281 401.243 307.729 401.243 308.281 cv
f
366.923 301.321 mo
366.923 301.873 366.475 302.321 365.923 302.321 cv
365.371 302.321 364.923 301.873 364.923 301.321 cv
364.923 300.769 365.371 300.321 365.923 300.321 cv
366.475 300.321 366.923 300.769 366.923 301.321 cv
f
332.603 291.601 mo
332.603 292.153 332.155 292.601 331.603 292.601 cv
331.051 292.601 330.603 292.153 330.603 291.601 cv
330.603 291.049 331.051 290.601 331.603 290.601 cv
332.155 290.601 332.603 291.049 332.603 291.601 cv
f
298.283 285.001 mo
298.283 285.553 297.835 286.001 297.283 286.001 cv
296.731 286.001 296.283 285.553 296.283 285.001 cv
296.283 284.449 296.731 284.001 297.283 284.001 cv
297.835 284.001 298.283 284.449 298.283 285.001 cv
f
263.723 271.321 mo
263.723 271.873 263.275 272.321 262.723 272.321 cv
262.171 272.321 261.723 271.873 261.723 271.321 cv
261.723 270.769 262.171 270.321 262.723 270.321 cv
263.275 270.321 263.723 270.769 263.723 271.321 cv
f
229.403 252.841 mo
229.403 253.393 228.955 253.841 228.403 253.841 cv
227.851 253.841 227.403 253.393 227.403 252.841 cv
227.403 252.289 227.851 251.841 228.403 251.841 cv
228.955 251.841 229.403 252.289 229.403 252.841 cv
f
195.083 222.601 mo
195.083 223.153 194.635 223.601 194.083 223.601 cv
193.531 223.601 193.083 223.153 193.083 222.601 cv
193.083 222.049 193.531 221.601 194.083 221.601 cv
194.635 221.601 195.083 222.049 195.083 222.601 cv
f
160.763 196.441 mo
160.763 196.993 160.315 197.441 159.763 197.441 cv
159.211 197.441 158.763 196.993 158.763 196.441 cv
158.763 195.889 159.211 195.441 159.763 195.441 cv
160.315 195.441 160.763 195.889 160.763 196.441 cv
f
126.443 39.2407 mo
126.443 39.793 125.995 40.2407 125.443 40.2407 cv
124.891 40.2407 124.443 39.793 124.443 39.2407 cv
124.443 38.689 124.891 38.2407 125.443 38.2407 cv
125.995 38.2407 126.443 38.689 126.443 39.2407 cv
f
538.763 325.921 mo
538.763 326.473 538.315 326.921 537.763 326.921 cv
537.211 326.921 536.763 326.473 536.763 325.921 cv
536.763 325.369 537.211 324.921 537.763 324.921 cv
538.315 324.921 538.763 325.369 538.763 325.921 cv
f
504.443 314.401 mo
504.443 314.953 503.995 315.401 503.443 315.401 cv
502.891 315.401 502.443 314.953 502.443 314.401 cv
502.443 313.849 502.891 313.401 503.443 313.401 cv
503.995 313.401 504.443 313.849 504.443 314.401 cv
f
470.003 316.681 mo
470.003 317.233 469.555 317.681 469.003 317.681 cv
468.451 317.681 468.003 317.233 468.003 316.681 cv
468.003 316.129 468.451 315.681 469.003 315.681 cv
469.555 315.681 470.003 316.129 470.003 316.681 cv
f
435.563 320.161 mo
435.563 320.713 435.115 321.161 434.563 321.161 cv
434.011 321.161 433.563 320.713 433.563 320.161 cv
433.563 319.609 434.011 319.161 434.563 319.161 cv
435.115 319.161 435.563 319.609 435.563 320.161 cv
f
401.243 305.041 mo
401.243 305.593 400.795 306.041 400.243 306.041 cv
399.691 306.041 399.243 305.593 399.243 305.041 cv
399.243 304.489 399.691 304.041 400.243 304.041 cv
400.795 304.041 401.243 304.489 401.243 305.041 cv
f
366.923 304.561 mo
366.923 305.113 366.475 305.561 365.923 305.561 cv
365.371 305.561 364.923 305.113 364.923 304.561 cv
364.923 304.009 365.371 303.561 365.923 303.561 cv
366.475 303.561 366.923 304.009 366.923 304.561 cv
f
332.603 298.321 mo
332.603 298.873 332.155 299.321 331.603 299.321 cv
331.051 299.321 330.603 298.873 330.603 298.321 cv
330.603 297.769 331.051 297.321 331.603 297.321 cv
332.155 297.321 332.603 297.769 332.603 298.321 cv
f
298.283 277.801 mo
298.283 278.353 297.835 278.801 297.283 278.801 cv
296.731 278.801 296.283 278.353 296.283 277.801 cv
296.283 277.249 296.731 276.801 297.283 276.801 cv
297.835 276.801 298.283 277.249 298.283 277.801 cv
f
263.723 270.001 mo
263.723 270.553 263.275 271.001 262.723 271.001 cv
262.171 271.001 261.723 270.553 261.723 270.001 cv
261.723 269.449 262.171 269.001 262.723 269.001 cv
263.275 269.001 263.723 269.449 263.723 270.001 cv
f
229.403 249.961 mo
229.403 250.513 228.955 250.961 228.403 250.961 cv
227.851 250.961 227.403 250.513 227.403 249.961 cv
227.403 249.409 227.851 248.961 228.403 248.961 cv
228.955 248.961 229.403 249.409 229.403 249.961 cv
f
195.083 235.321 mo
195.083 235.873 194.635 236.321 194.083 236.321 cv
193.531 236.321 193.083 235.873 193.083 235.321 cv
193.083 234.769 193.531 234.321 194.083 234.321 cv
194.635 234.321 195.083 234.769 195.083 235.321 cv
f
160.763 197.761 mo
160.763 198.313 160.315 198.761 159.763 198.761 cv
159.211 198.761 158.763 198.313 158.763 197.761 cv
158.763 197.209 159.211 196.761 159.763 196.761 cv
160.315 196.761 160.763 197.209 160.763 197.761 cv
f
126.443 37.0811 mo
126.443 37.6328 125.995 38.0811 125.443 38.0811 cv
124.891 38.0811 124.443 37.6328 124.443 37.0811 cv
124.443 36.5288 124.891 36.0811 125.443 36.0811 cv
125.995 36.0811 126.443 36.5288 126.443 37.0811 cv
f
92.0029 21.8408 mo
92.0029 22.3931 91.5552 22.8408 91.0029 22.8408 cv
90.4512 22.8408 90.0029 22.3931 90.0029 21.8408 cv
90.0029 21.2891 90.4512 20.8408 91.0029 20.8408 cv
91.5552 20.8408 92.0029 21.2891 92.0029 21.8408 cv
f
538.763 320.641 mo
538.763 321.193 538.315 321.641 537.763 321.641 cv
537.211 321.641 536.763 321.193 536.763 320.641 cv
536.763 320.089 537.211 319.641 537.763 319.641 cv
538.315 319.641 538.763 320.089 538.763 320.641 cv
f
504.443 343.321 mo
504.443 343.873 503.995 344.321 503.443 344.321 cv
502.891 344.321 502.443 343.873 502.443 343.321 cv
502.443 342.769 502.891 342.321 503.443 342.321 cv
503.995 342.321 504.443 342.769 504.443 343.321 cv
f
470.003 328.681 mo
470.003 329.233 469.555 329.681 469.003 329.681 cv
468.451 329.681 468.003 329.233 468.003 328.681 cv
468.003 328.129 468.451 327.681 469.003 327.681 cv
469.555 327.681 470.003 328.129 470.003 328.681 cv
f
435.563 310.081 mo
435.563 310.633 435.115 311.081 434.563 311.081 cv
434.011 311.081 433.563 310.633 433.563 310.081 cv
433.563 309.529 434.011 309.081 434.563 309.081 cv
435.115 309.081 435.563 309.529 435.563 310.081 cv
f
401.243 301.561 mo
401.243 302.113 400.795 302.561 400.243 302.561 cv
399.691 302.561 399.243 302.113 399.243 301.561 cv
399.243 301.009 399.691 300.561 400.243 300.561 cv
400.795 300.561 401.243 301.009 401.243 301.561 cv
f
366.923 298.201 mo
366.923 298.753 366.475 299.201 365.923 299.201 cv
365.371 299.201 364.923 298.753 364.923 298.201 cv
364.923 297.649 365.371 297.201 365.923 297.201 cv
366.475 297.201 366.923 297.649 366.923 298.201 cv
f
332.603 289.921 mo
332.603 290.473 332.155 290.921 331.603 290.921 cv
331.051 290.921 330.603 290.473 330.603 289.921 cv
330.603 289.369 331.051 288.921 331.603 288.921 cv
332.155 288.921 332.603 289.369 332.603 289.921 cv
f
298.283 285.721 mo
298.283 286.272 297.835 286.721 297.283 286.721 cv
296.731 286.721 296.283 286.272 296.283 285.721 cv
296.283 285.169 296.731 284.721 297.283 284.721 cv
297.835 284.721 298.283 285.169 298.283 285.721 cv
f
263.723 271.921 mo
263.723 272.473 263.275 272.921 262.723 272.921 cv
262.171 272.921 261.723 272.473 261.723 271.921 cv
261.723 271.369 262.171 270.921 262.723 270.921 cv
263.275 270.921 263.723 271.369 263.723 271.921 cv
f
229.403 242.521 mo
229.403 243.073 228.955 243.521 228.403 243.521 cv
227.851 243.521 227.403 243.073 227.403 242.521 cv
227.403 241.969 227.851 241.521 228.403 241.521 cv
228.955 241.521 229.403 241.969 229.403 242.521 cv
f
195.083 222.601 mo
195.083 223.153 194.635 223.601 194.083 223.601 cv
193.531 223.601 193.083 223.153 193.083 222.601 cv
193.083 222.049 193.531 221.601 194.083 221.601 cv
194.635 221.601 195.083 222.049 195.083 222.601 cv
f
160.763 183.721 mo
160.763 184.273 160.315 184.721 159.763 184.721 cv
159.211 184.721 158.763 184.273 158.763 183.721 cv
158.763 183.169 159.211 182.721 159.763 182.721 cv
160.315 182.721 160.763 183.169 160.763 183.721 cv
f
126.443 40.561 mo
126.443 41.1128 125.995 41.561 125.443 41.561 cv
124.891 41.561 124.443 41.1128 124.443 40.561 cv
124.443 40.0088 124.891 39.561 125.443 39.561 cv
125.995 39.561 126.443 40.0088 126.443 40.561 cv
f
538.763 359.161 mo
538.763 359.713 538.315 360.161 537.763 360.161 cv
537.211 360.161 536.763 359.713 536.763 359.161 cv
536.763 358.609 537.211 358.161 537.763 358.161 cv
538.315 358.161 538.763 358.609 538.763 359.161 cv
f
504.443 324.721 mo
504.443 325.272 503.995 325.721 503.443 325.721 cv
502.891 325.721 502.443 325.272 502.443 324.721 cv
502.443 324.169 502.891 323.721 503.443 323.721 cv
503.995 323.721 504.443 324.169 504.443 324.721 cv
f
470.003 342.961 mo
470.003 343.513 469.555 343.961 469.003 343.961 cv
468.451 343.961 468.003 343.513 468.003 342.961 cv
468.003 342.409 468.451 341.961 469.003 341.961 cv
469.555 341.961 470.003 342.409 470.003 342.961 cv
f
435.563 308.761 mo
435.563 309.313 435.115 309.761 434.563 309.761 cv
434.011 309.761 433.563 309.313 433.563 308.761 cv
433.563 308.209 434.011 307.761 434.563 307.761 cv
435.115 307.761 435.563 308.209 435.563 308.761 cv
f
401.243 307.681 mo
401.243 308.233 400.795 308.681 400.243 308.681 cv
399.691 308.681 399.243 308.233 399.243 307.681 cv
399.243 307.129 399.691 306.681 400.243 306.681 cv
400.795 306.681 401.243 307.129 401.243 307.681 cv
f
366.923 300.361 mo
366.923 300.913 366.475 301.361 365.923 301.361 cv
365.371 301.361 364.923 300.913 364.923 300.361 cv
364.923 299.809 365.371 299.361 365.923 299.361 cv
366.475 299.361 366.923 299.809 366.923 300.361 cv
f
332.603 290.881 mo
332.603 291.433 332.155 291.881 331.603 291.881 cv
331.051 291.881 330.603 291.433 330.603 290.881 cv
330.603 290.329 331.051 289.881 331.603 289.881 cv
332.155 289.881 332.603 290.329 332.603 290.881 cv
f
298.283 282.001 mo
298.283 282.553 297.835 283.001 297.283 283.001 cv
296.731 283.001 296.283 282.553 296.283 282.001 cv
296.283 281.449 296.731 281.001 297.283 281.001 cv
297.835 281.001 298.283 281.449 298.283 282.001 cv
f
263.723 269.881 mo
263.723 270.433 263.275 270.881 262.723 270.881 cv
262.171 270.881 261.723 270.433 261.723 269.881 cv
261.723 269.329 262.171 268.881 262.723 268.881 cv
263.275 268.881 263.723 269.329 263.723 269.881 cv
f
229.403 249.961 mo
229.403 250.513 228.955 250.961 228.403 250.961 cv
227.851 250.961 227.403 250.513 227.403 249.961 cv
227.403 249.409 227.851 248.961 228.403 248.961 cv
228.955 248.961 229.403 249.409 229.403 249.961 cv
f
195.083 205.921 mo
195.083 206.473 194.635 206.921 194.083 206.921 cv
193.531 206.921 193.083 206.473 193.083 205.921 cv
193.083 205.369 193.531 204.921 194.083 204.921 cv
194.635 204.921 195.083 205.369 195.083 205.921 cv
f
160.763 161.641 mo
160.763 162.193 160.315 162.641 159.763 162.641 cv
159.211 162.641 158.763 162.193 158.763 161.641 cv
158.763 161.089 159.211 160.641 159.763 160.641 cv
160.315 160.641 160.763 161.089 160.763 161.641 cv
f
126.443 32.6411 mo
126.443 33.1929 125.995 33.6411 125.443 33.6411 cv
124.891 33.6411 124.443 33.1929 124.443 32.6411 cv
124.443 32.0889 124.891 31.6411 125.443 31.6411 cv
125.995 31.6411 126.443 32.0889 126.443 32.6411 cv
f
92.0029 21.6011 mo
92.0029 22.1528 91.5552 22.6011 91.0029 22.6011 cv
90.4512 22.6011 90.0029 22.1528 90.0029 21.6011 cv
90.0029 21.0488 90.4512 20.6011 91.0029 20.6011 cv
91.5552 20.6011 92.0029 21.0488 92.0029 21.6011 cv
f
538.763 320.881 mo
538.763 321.433 538.315 321.881 537.763 321.881 cv
537.211 321.881 536.763 321.433 536.763 320.881 cv
536.763 320.329 537.211 319.881 537.763 319.881 cv
538.315 319.881 538.763 320.329 538.763 320.881 cv
f
504.443 330.361 mo
504.443 330.913 503.995 331.361 503.443 331.361 cv
502.891 331.361 502.443 330.913 502.443 330.361 cv
502.443 329.809 502.891 329.361 503.443 329.361 cv
503.995 329.361 504.443 329.809 504.443 330.361 cv
f
470.003 319.201 mo
470.003 319.753 469.555 320.201 469.003 320.201 cv
468.451 320.201 468.003 319.753 468.003 319.201 cv
468.003 318.649 468.451 318.201 469.003 318.201 cv
469.555 318.201 470.003 318.649 470.003 319.201 cv
f
435.563 308.881 mo
435.563 309.433 435.115 309.881 434.563 309.881 cv
434.011 309.881 433.563 309.433 433.563 308.881 cv
433.563 308.329 434.011 307.881 434.563 307.881 cv
435.115 307.881 435.563 308.329 435.563 308.881 cv
f
401.243 301.681 mo
401.243 302.233 400.795 302.681 400.243 302.681 cv
399.691 302.681 399.243 302.233 399.243 301.681 cv
399.243 301.129 399.691 300.681 400.243 300.681 cv
400.795 300.681 401.243 301.129 401.243 301.681 cv
f
366.923 299.761 mo
366.923 300.313 366.475 300.761 365.923 300.761 cv
365.371 300.761 364.923 300.313 364.923 299.761 cv
364.923 299.209 365.371 298.761 365.923 298.761 cv
366.475 298.761 366.923 299.209 366.923 299.761 cv
f
332.603 293.281 mo
332.603 293.833 332.155 294.281 331.603 294.281 cv
331.051 294.281 330.603 293.833 330.603 293.281 cv
330.603 292.729 331.051 292.281 331.603 292.281 cv
332.155 292.281 332.603 292.729 332.603 293.281 cv
f
298.283 284.881 mo
298.283 285.433 297.835 285.881 297.283 285.881 cv
296.731 285.881 296.283 285.433 296.283 284.881 cv
296.283 284.329 296.731 283.881 297.283 283.881 cv
297.835 283.881 298.283 284.329 298.283 284.881 cv
f
263.723 270.001 mo
263.723 270.553 263.275 271.001 262.723 271.001 cv
262.171 271.001 261.723 270.553 261.723 270.001 cv
261.723 269.449 262.171 269.001 262.723 269.001 cv
263.275 269.001 263.723 269.449 263.723 270.001 cv
f
229.403 242.401 mo
229.403 242.953 228.955 243.401 228.403 243.401 cv
227.851 243.401 227.403 242.953 227.403 242.401 cv
227.403 241.849 227.851 241.401 228.403 241.401 cv
228.955 241.401 229.403 241.849 229.403 242.401 cv
f
195.083 235.681 mo
195.083 236.233 194.635 236.681 194.083 236.681 cv
193.531 236.681 193.083 236.233 193.083 235.681 cv
193.083 235.129 193.531 234.681 194.083 234.681 cv
194.635 234.681 195.083 235.129 195.083 235.681 cv
f
160.763 183.361 mo
160.763 183.913 160.315 184.361 159.763 184.361 cv
159.211 184.361 158.763 183.913 158.763 183.361 cv
158.763 182.809 159.211 182.361 159.763 182.361 cv
160.315 182.361 160.763 182.809 160.763 183.361 cv
f
126.443 35.521 mo
126.443 36.0728 125.995 36.521 125.443 36.521 cv
124.891 36.521 124.443 36.0728 124.443 35.521 cv
124.443 34.9688 124.891 34.521 125.443 34.521 cv
125.995 34.521 126.443 34.9688 126.443 35.521 cv
f
538.763 333.48 mo
538.763 334.033 538.315 334.48 537.763 334.48 cv
537.211 334.48 536.763 334.033 536.763 333.48 cv
536.763 332.929 537.211 332.48 537.763 332.48 cv
538.315 332.48 538.763 332.929 538.763 333.48 cv
f
504.443 331.441 mo
504.443 331.993 503.995 332.441 503.443 332.441 cv
502.891 332.441 502.443 331.993 502.443 331.441 cv
502.443 330.889 502.891 330.441 503.443 330.441 cv
503.995 330.441 504.443 330.889 504.443 331.441 cv
f
470.003 322.321 mo
470.003 322.873 469.555 323.321 469.003 323.321 cv
468.451 323.321 468.003 322.873 468.003 322.321 cv
468.003 321.769 468.451 321.321 469.003 321.321 cv
469.555 321.321 470.003 321.769 470.003 322.321 cv
f
435.563 319.201 mo
435.563 319.753 435.115 320.201 434.563 320.201 cv
434.011 320.201 433.563 319.753 433.563 319.201 cv
433.563 318.649 434.011 318.201 434.563 318.201 cv
435.115 318.201 435.563 318.649 435.563 319.201 cv
f
401.243 317.281 mo
401.243 317.833 400.795 318.281 400.243 318.281 cv
399.691 318.281 399.243 317.833 399.243 317.281 cv
399.243 316.729 399.691 316.281 400.243 316.281 cv
400.795 316.281 401.243 316.729 401.243 317.281 cv
f
366.923 298.921 mo
366.923 299.473 366.475 299.921 365.923 299.921 cv
365.371 299.921 364.923 299.473 364.923 298.921 cv
364.923 298.369 365.371 297.921 365.923 297.921 cv
366.475 297.921 366.923 298.369 366.923 298.921 cv
f
332.603 288.721 mo
332.603 289.272 332.155 289.721 331.603 289.721 cv
331.051 289.721 330.603 289.272 330.603 288.721 cv
330.603 288.169 331.051 287.721 331.603 287.721 cv
332.155 287.721 332.603 288.169 332.603 288.721 cv
f
298.283 285.841 mo
298.283 286.393 297.835 286.841 297.283 286.841 cv
296.731 286.841 296.283 286.393 296.283 285.841 cv
296.283 285.289 296.731 284.841 297.283 284.841 cv
297.835 284.841 298.283 285.289 298.283 285.841 cv
f
263.723 270.601 mo
263.723 271.153 263.275 271.601 262.723 271.601 cv
262.171 271.601 261.723 271.153 261.723 270.601 cv
261.723 270.049 262.171 269.601 262.723 269.601 cv
263.275 269.601 263.723 270.049 263.723 270.601 cv
f
229.403 250.801 mo
229.403 251.353 228.955 251.801 228.403 251.801 cv
227.851 251.801 227.403 251.353 227.403 250.801 cv
227.403 250.249 227.851 249.801 228.403 249.801 cv
228.955 249.801 229.403 250.249 229.403 250.801 cv
f
195.083 215.041 mo
195.083 215.593 194.635 216.041 194.083 216.041 cv
193.531 216.041 193.083 215.593 193.083 215.041 cv
193.083 214.489 193.531 214.041 194.083 214.041 cv
194.635 214.041 195.083 214.489 195.083 215.041 cv
f
160.763 168.241 mo
160.763 168.793 160.315 169.241 159.763 169.241 cv
159.211 169.241 158.763 168.793 158.763 168.241 cv
158.763 167.689 159.211 167.241 159.763 167.241 cv
160.315 167.241 160.763 167.689 160.763 168.241 cv
f
126.443 34.8008 mo
126.443 35.353 125.995 35.8008 125.443 35.8008 cv
124.891 35.8008 124.443 35.353 124.443 34.8008 cv
124.443 34.249 124.891 33.8008 125.443 33.8008 cv
125.995 33.8008 126.443 34.249 126.443 34.8008 cv
f
538.763 334.561 mo
538.763 335.113 538.315 335.561 537.763 335.561 cv
537.211 335.561 536.763 335.113 536.763 334.561 cv
536.763 334.009 537.211 333.561 537.763 333.561 cv
538.315 333.561 538.763 334.009 538.763 334.561 cv
f
504.443 325.441 mo
504.443 325.993 503.995 326.441 503.443 326.441 cv
502.891 326.441 502.443 325.993 502.443 325.441 cv
502.443 324.889 502.891 324.441 503.443 324.441 cv
503.995 324.441 504.443 324.889 504.443 325.441 cv
f
470.003 317.761 mo
470.003 318.313 469.555 318.761 469.003 318.761 cv
468.451 318.761 468.003 318.313 468.003 317.761 cv
468.003 317.209 468.451 316.761 469.003 316.761 cv
469.555 316.761 470.003 317.209 470.003 317.761 cv
f
435.563 309.48 mo
435.563 310.033 435.115 310.48 434.563 310.48 cv
434.011 310.48 433.563 310.033 433.563 309.48 cv
433.563 308.929 434.011 308.48 434.563 308.48 cv
435.115 308.48 435.563 308.929 435.563 309.48 cv
f
401.243 308.401 mo
401.243 308.953 400.795 309.401 400.243 309.401 cv
399.691 309.401 399.243 308.953 399.243 308.401 cv
399.243 307.849 399.691 307.401 400.243 307.401 cv
400.795 307.401 401.243 307.849 401.243 308.401 cv
f
366.923 299.881 mo
366.923 300.433 366.475 300.881 365.923 300.881 cv
365.371 300.881 364.923 300.433 364.923 299.881 cv
364.923 299.329 365.371 298.881 365.923 298.881 cv
366.475 298.881 366.923 299.329 366.923 299.881 cv
f
332.603 288.721 mo
332.603 289.272 332.155 289.721 331.603 289.721 cv
331.051 289.721 330.603 289.272 330.603 288.721 cv
330.603 288.169 331.051 287.721 331.603 287.721 cv
332.155 287.721 332.603 288.169 332.603 288.721 cv
f
298.283 282.241 mo
298.283 282.793 297.835 283.241 297.283 283.241 cv
296.731 283.241 296.283 282.793 296.283 282.241 cv
296.283 281.688 296.731 281.241 297.283 281.241 cv
297.835 281.241 298.283 281.688 298.283 282.241 cv
f
263.723 269.881 mo
263.723 270.433 263.275 270.881 262.723 270.881 cv
262.171 270.881 261.723 270.433 261.723 269.881 cv
261.723 269.329 262.171 268.881 262.723 268.881 cv
263.275 268.881 263.723 269.329 263.723 269.881 cv
f
229.403 251.281 mo
229.403 251.833 228.955 252.281 228.403 252.281 cv
227.851 252.281 227.403 251.833 227.403 251.281 cv
227.403 250.729 227.851 250.281 228.403 250.281 cv
228.955 250.281 229.403 250.729 229.403 251.281 cv
f
195.083 227.161 mo
195.083 227.713 194.635 228.161 194.083 228.161 cv
193.531 228.161 193.083 227.713 193.083 227.161 cv
193.083 226.609 193.531 226.161 194.083 226.161 cv
194.635 226.161 195.083 226.609 195.083 227.161 cv
f
160.763 198.001 mo
160.763 198.553 160.315 199.001 159.763 199.001 cv
159.211 199.001 158.763 198.553 158.763 198.001 cv
158.763 197.449 159.211 197.001 159.763 197.001 cv
160.315 197.001 160.763 197.449 160.763 198.001 cv
f
126.443 42.9609 mo
126.443 43.5127 125.995 43.9609 125.443 43.9609 cv
124.891 43.9609 124.443 43.5127 124.443 42.9609 cv
124.443 42.4092 124.891 41.9609 125.443 41.9609 cv
125.995 41.9609 126.443 42.4092 126.443 42.9609 cv
f
92.0029 21.6011 mo
92.0029 22.1528 91.5552 22.6011 91.0029 22.6011 cv
90.4512 22.6011 90.0029 22.1528 90.0029 21.6011 cv
90.0029 21.0488 90.4512 20.6011 91.0029 20.6011 cv
91.5552 20.6011 92.0029 21.0488 92.0029 21.6011 cv
f
538.763 348.961 mo
538.763 349.513 538.315 349.961 537.763 349.961 cv
537.211 349.961 536.763 349.513 536.763 348.961 cv
536.763 348.409 537.211 347.961 537.763 347.961 cv
538.315 347.961 538.763 348.409 538.763 348.961 cv
f
504.443 334.321 mo
504.443 334.873 503.995 335.321 503.443 335.321 cv
502.891 335.321 502.443 334.873 502.443 334.321 cv
502.443 333.769 502.891 333.321 503.443 333.321 cv
503.995 333.321 504.443 333.769 504.443 334.321 cv
f
470.003 320.041 mo
470.003 320.593 469.555 321.041 469.003 321.041 cv
468.451 321.041 468.003 320.593 468.003 320.041 cv
468.003 319.489 468.451 319.041 469.003 319.041 cv
469.555 319.041 470.003 319.489 470.003 320.041 cv
f
435.563 306.48 mo
435.563 307.033 435.115 307.48 434.563 307.48 cv
434.011 307.48 433.563 307.033 433.563 306.48 cv
433.563 305.929 434.011 305.48 434.563 305.48 cv
435.115 305.48 435.563 305.929 435.563 306.48 cv
f
401.243 311.521 mo
401.243 312.073 400.795 312.521 400.243 312.521 cv
399.691 312.521 399.243 312.073 399.243 311.521 cv
399.243 310.969 399.691 310.521 400.243 310.521 cv
400.795 310.521 401.243 310.969 401.243 311.521 cv
f
366.923 296.401 mo
366.923 296.953 366.475 297.401 365.923 297.401 cv
365.371 297.401 364.923 296.953 364.923 296.401 cv
364.923 295.849 365.371 295.401 365.923 295.401 cv
366.475 295.401 366.923 295.849 366.923 296.401 cv
f
332.603 295.681 mo
332.603 296.233 332.155 296.681 331.603 296.681 cv
331.051 296.681 330.603 296.233 330.603 295.681 cv
330.603 295.129 331.051 294.681 331.603 294.681 cv
332.155 294.681 332.603 295.129 332.603 295.681 cv
f
298.283 283.321 mo
298.283 283.873 297.835 284.321 297.283 284.321 cv
296.731 284.321 296.283 283.873 296.283 283.321 cv
296.283 282.769 296.731 282.321 297.283 282.321 cv
297.835 282.321 298.283 282.769 298.283 283.321 cv
f
263.723 275.281 mo
263.723 275.833 263.275 276.281 262.723 276.281 cv
262.171 276.281 261.723 275.833 261.723 275.281 cv
261.723 274.729 262.171 274.281 262.723 274.281 cv
263.275 274.281 263.723 274.729 263.723 275.281 cv
f
229.403 239.281 mo
229.403 239.833 228.955 240.281 228.403 240.281 cv
227.851 240.281 227.403 239.833 227.403 239.281 cv
227.403 238.729 227.851 238.281 228.403 238.281 cv
228.955 238.281 229.403 238.729 229.403 239.281 cv
f
195.083 222.601 mo
195.083 223.153 194.635 223.601 194.083 223.601 cv
193.531 223.601 193.083 223.153 193.083 222.601 cv
193.083 222.049 193.531 221.601 194.083 221.601 cv
194.635 221.601 195.083 222.049 195.083 222.601 cv
f
160.763 183.721 mo
160.763 184.273 160.315 184.721 159.763 184.721 cv
159.211 184.721 158.763 184.273 158.763 183.721 cv
158.763 183.169 159.211 182.721 159.763 182.721 cv
160.315 182.721 160.763 183.169 160.763 183.721 cv
f
126.443 34.3208 mo
126.443 34.873 125.995 35.3208 125.443 35.3208 cv
124.891 35.3208 124.443 34.873 124.443 34.3208 cv
124.443 33.769 124.891 33.3208 125.443 33.3208 cv
125.995 33.3208 126.443 33.769 126.443 34.3208 cv
f
92.0029 21.8408 mo
92.0029 22.3931 91.5552 22.8408 91.0029 22.8408 cv
90.4512 22.8408 90.0029 22.3931 90.0029 21.8408 cv
90.0029 21.2891 90.4512 20.8408 91.0029 20.8408 cv
91.5552 20.8408 92.0029 21.2891 92.0029 21.8408 cv
f
538.763 336.961 mo
538.763 337.513 538.315 337.961 537.763 337.961 cv
537.211 337.961 536.763 337.513 536.763 336.961 cv
536.763 336.409 537.211 335.961 537.763 335.961 cv
538.315 335.961 538.763 336.409 538.763 336.961 cv
f
504.443 350.881 mo
504.443 351.433 503.995 351.881 503.443 351.881 cv
502.891 351.881 502.443 351.433 502.443 350.881 cv
502.443 350.329 502.891 349.881 503.443 349.881 cv
503.995 349.881 504.443 350.329 504.443 350.881 cv
f
470.003 315.48 mo
470.003 316.033 469.555 316.48 469.003 316.48 cv
468.451 316.48 468.003 316.033 468.003 315.48 cv
468.003 314.929 468.451 314.48 469.003 314.48 cv
469.555 314.48 470.003 314.929 470.003 315.48 cv
f
435.563 309.601 mo
435.563 310.153 435.115 310.601 434.563 310.601 cv
434.011 310.601 433.563 310.153 433.563 309.601 cv
433.563 309.049 434.011 308.601 434.563 308.601 cv
435.115 308.601 435.563 309.049 435.563 309.601 cv
f
401.243 302.761 mo
401.243 303.313 400.795 303.761 400.243 303.761 cv
399.691 303.761 399.243 303.313 399.243 302.761 cv
399.243 302.209 399.691 301.761 400.243 301.761 cv
400.795 301.761 401.243 302.209 401.243 302.761 cv
f
366.923 297.121 mo
366.923 297.673 366.475 298.121 365.923 298.121 cv
365.371 298.121 364.923 297.673 364.923 297.121 cv
364.923 296.569 365.371 296.121 365.923 296.121 cv
366.475 296.121 366.923 296.569 366.923 297.121 cv
f
332.603 292.321 mo
332.603 292.873 332.155 293.321 331.603 293.321 cv
331.051 293.321 330.603 292.873 330.603 292.321 cv
330.603 291.769 331.051 291.321 331.603 291.321 cv
332.155 291.321 332.603 291.769 332.603 292.321 cv
f
298.283 282.001 mo
298.283 282.553 297.835 283.001 297.283 283.001 cv
296.731 283.001 296.283 282.553 296.283 282.001 cv
296.283 281.449 296.731 281.001 297.283 281.001 cv
297.835 281.001 298.283 281.449 298.283 282.001 cv
f
263.723 268.801 mo
263.723 269.353 263.275 269.801 262.723 269.801 cv
262.171 269.801 261.723 269.353 261.723 268.801 cv
261.723 268.249 262.171 267.801 262.723 267.801 cv
263.275 267.801 263.723 268.249 263.723 268.801 cv
f
229.403 257.521 mo
229.403 258.073 228.955 258.521 228.403 258.521 cv
227.851 258.521 227.403 258.073 227.403 257.521 cv
227.403 256.969 227.851 256.521 228.403 256.521 cv
228.955 256.521 229.403 256.969 229.403 257.521 cv
f
195.083 227.281 mo
195.083 227.833 194.635 228.281 194.083 228.281 cv
193.531 228.281 193.083 227.833 193.083 227.281 cv
193.083 226.729 193.531 226.281 194.083 226.281 cv
194.635 226.281 195.083 226.729 195.083 227.281 cv
f
160.763 190.561 mo
160.763 191.113 160.315 191.561 159.763 191.561 cv
159.211 191.561 158.763 191.113 158.763 190.561 cv
158.763 190.009 159.211 189.561 159.763 189.561 cv
160.315 189.561 160.763 190.009 160.763 190.561 cv
f
126.443 45.1211 mo
126.443 45.6729 125.995 46.1211 125.443 46.1211 cv
124.891 46.1211 124.443 45.6729 124.443 45.1211 cv
124.443 44.5688 124.891 44.1211 125.443 44.1211 cv
125.995 44.1211 126.443 44.5688 126.443 45.1211 cv
f
92.0029 21.8408 mo
92.0029 22.3931 91.5552 22.8408 91.0029 22.8408 cv
90.4512 22.8408 90.0029 22.3931 90.0029 21.8408 cv
90.0029 21.2891 90.4512 20.8408 91.0029 20.8408 cv
91.5552 20.8408 92.0029 21.2891 92.0029 21.8408 cv
f
538.763 331.441 mo
538.763 331.993 538.315 332.441 537.763 332.441 cv
537.211 332.441 536.763 331.993 536.763 331.441 cv
536.763 330.889 537.211 330.441 537.763 330.441 cv
538.315 330.441 538.763 330.889 538.763 331.441 cv
f
504.443 318.48 mo
504.443 319.033 503.995 319.48 503.443 319.48 cv
502.891 319.48 502.443 319.033 502.443 318.48 cv
502.443 317.929 502.891 317.48 503.443 317.48 cv
503.995 317.48 504.443 317.929 504.443 318.48 cv
f
470.003 318.841 mo
470.003 319.393 469.555 319.841 469.003 319.841 cv
468.451 319.841 468.003 319.393 468.003 318.841 cv
468.003 318.289 468.451 317.841 469.003 317.841 cv
469.555 317.841 470.003 318.289 470.003 318.841 cv
f
435.563 308.401 mo
435.563 308.953 435.115 309.401 434.563 309.401 cv
434.011 309.401 433.563 308.953 433.563 308.401 cv
433.563 307.849 434.011 307.401 434.563 307.401 cv
435.115 307.401 435.563 307.849 435.563 308.401 cv
f
401.243 312.48 mo
401.243 313.033 400.795 313.48 400.243 313.48 cv
399.691 313.48 399.243 313.033 399.243 312.48 cv
399.243 311.929 399.691 311.48 400.243 311.48 cv
400.795 311.48 401.243 311.929 401.243 312.48 cv
f
366.923 300.361 mo
366.923 300.913 366.475 301.361 365.923 301.361 cv
365.371 301.361 364.923 300.913 364.923 300.361 cv
364.923 299.809 365.371 299.361 365.923 299.361 cv
366.475 299.361 366.923 299.809 366.923 300.361 cv
f
332.603 299.161 mo
332.603 299.713 332.155 300.161 331.603 300.161 cv
331.051 300.161 330.603 299.713 330.603 299.161 cv
330.603 298.609 331.051 298.161 331.603 298.161 cv
332.155 298.161 332.603 298.609 332.603 299.161 cv
f
298.283 280.321 mo
298.283 280.873 297.835 281.321 297.283 281.321 cv
296.731 281.321 296.283 280.873 296.283 280.321 cv
296.283 279.769 296.731 279.321 297.283 279.321 cv
297.835 279.321 298.283 279.769 298.283 280.321 cv
f
263.723 274.081 mo
263.723 274.633 263.275 275.081 262.723 275.081 cv
262.171 275.081 261.723 274.633 261.723 274.081 cv
261.723 273.529 262.171 273.081 262.723 273.081 cv
263.275 273.081 263.723 273.529 263.723 274.081 cv
f
229.403 250.921 mo
229.403 251.473 228.955 251.921 228.403 251.921 cv
227.851 251.921 227.403 251.473 227.403 250.921 cv
227.403 250.369 227.851 249.921 228.403 249.921 cv
228.955 249.921 229.403 250.369 229.403 250.921 cv
f
195.083 200.761 mo
195.083 201.313 194.635 201.761 194.083 201.761 cv
193.531 201.761 193.083 201.313 193.083 200.761 cv
193.083 200.209 193.531 199.761 194.083 199.761 cv
194.635 199.761 195.083 200.209 195.083 200.761 cv
f
160.763 195.721 mo
160.763 196.273 160.315 196.721 159.763 196.721 cv
159.211 196.721 158.763 196.273 158.763 195.721 cv
158.763 195.169 159.211 194.721 159.763 194.721 cv
160.315 194.721 160.763 195.169 160.763 195.721 cv
f
126.443 43.6812 mo
126.443 44.2329 125.995 44.6812 125.443 44.6812 cv
124.891 44.6812 124.443 44.2329 124.443 43.6812 cv
124.443 43.1289 124.891 42.6812 125.443 42.6812 cv
125.995 42.6812 126.443 43.1289 126.443 43.6812 cv
f
92.0029 21.6011 mo
92.0029 22.1528 91.5552 22.6011 91.0029 22.6011 cv
90.4512 22.6011 90.0029 22.1528 90.0029 21.6011 cv
90.0029 21.0488 90.4512 20.6011 91.0029 20.6011 cv
91.5552 20.6011 92.0029 21.0488 92.0029 21.6011 cv
f
538.763 349.681 mo
538.763 350.233 538.315 350.681 537.763 350.681 cv
537.211 350.681 536.763 350.233 536.763 349.681 cv
536.763 349.129 537.211 348.681 537.763 348.681 cv
538.315 348.681 538.763 349.129 538.763 349.681 cv
f
504.443 333.721 mo
504.443 334.272 503.995 334.721 503.443 334.721 cv
502.891 334.721 502.443 334.272 502.443 333.721 cv
502.443 333.169 502.891 332.721 503.443 332.721 cv
503.995 332.721 504.443 333.169 504.443 333.721 cv
f
470.003 336.361 mo
470.003 336.913 469.555 337.361 469.003 337.361 cv
468.451 337.361 468.003 336.913 468.003 336.361 cv
468.003 335.809 468.451 335.361 469.003 335.361 cv
469.555 335.361 470.003 335.809 470.003 336.361 cv
f
435.563 310.921 mo
435.563 311.473 435.115 311.921 434.563 311.921 cv
434.011 311.921 433.563 311.473 433.563 310.921 cv
433.563 310.369 434.011 309.921 434.563 309.921 cv
435.115 309.921 435.563 310.369 435.563 310.921 cv
f
401.243 284.881 mo
401.243 285.433 400.795 285.881 400.243 285.881 cv
399.691 285.881 399.243 285.433 399.243 284.881 cv
399.243 284.329 399.691 283.881 400.243 283.881 cv
400.795 283.881 401.243 284.329 401.243 284.881 cv
f
366.923 304.801 mo
366.923 305.353 366.475 305.801 365.923 305.801 cv
365.371 305.801 364.923 305.353 364.923 304.801 cv
364.923 304.249 365.371 303.801 365.923 303.801 cv
366.475 303.801 366.923 304.249 366.923 304.801 cv
f
332.603 289.321 mo
332.603 289.873 332.155 290.321 331.603 290.321 cv
331.051 290.321 330.603 289.873 330.603 289.321 cv
330.603 288.769 331.051 288.321 331.603 288.321 cv
332.155 288.321 332.603 288.769 332.603 289.321 cv
f
298.283 281.041 mo
298.283 281.593 297.835 282.041 297.283 282.041 cv
296.731 282.041 296.283 281.593 296.283 281.041 cv
296.283 280.489 296.731 280.041 297.283 280.041 cv
297.835 280.041 298.283 280.489 298.283 281.041 cv
f
263.723 268.321 mo
263.723 268.873 263.275 269.321 262.723 269.321 cv
262.171 269.321 261.723 268.873 261.723 268.321 cv
261.723 267.769 262.171 267.321 262.723 267.321 cv
263.275 267.321 263.723 267.769 263.723 268.321 cv
f
229.403 258.001 mo
229.403 258.553 228.955 259.001 228.403 259.001 cv
227.851 259.001 227.403 258.553 227.403 258.001 cv
227.403 257.449 227.851 257.001 228.403 257.001 cv
228.955 257.001 229.403 257.449 229.403 258.001 cv
f
195.083 226.801 mo
195.083 227.353 194.635 227.801 194.083 227.801 cv
193.531 227.801 193.083 227.353 193.083 226.801 cv
193.083 226.249 193.531 225.801 194.083 225.801 cv
194.635 225.801 195.083 226.249 195.083 226.801 cv
f
160.763 182.281 mo
160.763 182.833 160.315 183.281 159.763 183.281 cv
159.211 183.281 158.763 182.833 158.763 182.281 cv
158.763 181.729 159.211 181.281 159.763 181.281 cv
160.315 181.281 160.763 181.729 160.763 182.281 cv
f
126.443 43.6812 mo
126.443 44.2329 125.995 44.6812 125.443 44.6812 cv
124.891 44.6812 124.443 44.2329 124.443 43.6812 cv
124.443 43.1289 124.891 42.6812 125.443 42.6812 cv
125.995 42.6812 126.443 43.1289 126.443 43.6812 cv
f
92.0029 21.481 mo
92.0029 22.0327 91.5552 22.481 91.0029 22.481 cv
90.4512 22.481 90.0029 22.0327 90.0029 21.481 cv
90.0029 20.9287 90.4512 20.481 91.0029 20.481 cv
91.5552 20.481 92.0029 20.9287 92.0029 21.481 cv
f
538.763 353.401 mo
538.763 353.953 538.315 354.401 537.763 354.401 cv
537.211 354.401 536.763 353.953 536.763 353.401 cv
536.763 352.849 537.211 352.401 537.763 352.401 cv
538.315 352.401 538.763 352.849 538.763 353.401 cv
f
504.443 327.361 mo
504.443 327.913 503.995 328.361 503.443 328.361 cv
502.891 328.361 502.443 327.913 502.443 327.361 cv
502.443 326.809 502.891 326.361 503.443 326.361 cv
503.995 326.361 504.443 326.809 504.443 327.361 cv
f
470.003 324.241 mo
470.003 324.793 469.555 325.241 469.003 325.241 cv
468.451 325.241 468.003 324.793 468.003 324.241 cv
468.003 323.688 468.451 323.241 469.003 323.241 cv
469.555 323.241 470.003 323.688 470.003 324.241 cv
f
435.563 311.041 mo
435.563 311.593 435.115 312.041 434.563 312.041 cv
434.011 312.041 433.563 311.593 433.563 311.041 cv
433.563 310.489 434.011 310.041 434.563 310.041 cv
435.115 310.041 435.563 310.489 435.563 311.041 cv
f
401.243 309.001 mo
401.243 309.553 400.795 310.001 400.243 310.001 cv
399.691 310.001 399.243 309.553 399.243 309.001 cv
399.243 308.449 399.691 308.001 400.243 308.001 cv
400.795 308.001 401.243 308.449 401.243 309.001 cv
f
366.923 295.561 mo
366.923 296.113 366.475 296.561 365.923 296.561 cv
365.371 296.561 364.923 296.113 364.923 295.561 cv
364.923 295.009 365.371 294.561 365.923 294.561 cv
366.475 294.561 366.923 295.009 366.923 295.561 cv
f
332.603 300.721 mo
332.603 301.272 332.155 301.721 331.603 301.721 cv
331.051 301.721 330.603 301.272 330.603 300.721 cv
330.603 300.169 331.051 299.721 331.603 299.721 cv
332.155 299.721 332.603 300.169 332.603 300.721 cv
f
298.283 280.561 mo
298.283 281.113 297.835 281.561 297.283 281.561 cv
296.731 281.561 296.283 281.113 296.283 280.561 cv
296.283 280.009 296.731 279.561 297.283 279.561 cv
297.835 279.561 298.283 280.009 298.283 280.561 cv
f
263.723 273.601 mo
263.723 274.153 263.275 274.601 262.723 274.601 cv
262.171 274.601 261.723 274.153 261.723 273.601 cv
261.723 273.049 262.171 272.601 262.723 272.601 cv
263.275 272.601 263.723 273.049 263.723 273.601 cv
f
229.403 249.961 mo
229.403 250.513 228.955 250.961 228.403 250.961 cv
227.851 250.961 227.403 250.513 227.403 249.961 cv
227.403 249.409 227.851 248.961 228.403 248.961 cv
228.955 248.961 229.403 249.409 229.403 249.961 cv
f
195.083 222.001 mo
195.083 222.553 194.635 223.001 194.083 223.001 cv
193.531 223.001 193.083 222.553 193.083 222.001 cv
193.083 221.449 193.531 221.001 194.083 221.001 cv
194.635 221.001 195.083 221.449 195.083 222.001 cv
f
160.763 183.721 mo
160.763 184.273 160.315 184.721 159.763 184.721 cv
159.211 184.721 158.763 184.273 158.763 183.721 cv
158.763 183.169 159.211 182.721 159.763 182.721 cv
160.315 182.721 160.763 183.169 160.763 183.721 cv
f
126.443 36.481 mo
126.443 37.0327 125.995 37.481 125.443 37.481 cv
124.891 37.481 124.443 37.0327 124.443 36.481 cv
124.443 35.9287 124.891 35.481 125.443 35.481 cv
125.995 35.481 126.443 35.9287 126.443 36.481 cv
f
538.763 353.761 mo
538.763 354.313 538.315 354.761 537.763 354.761 cv
537.211 354.761 536.763 354.313 536.763 353.761 cv
536.763 353.209 537.211 352.761 537.763 352.761 cv
538.315 352.761 538.763 353.209 538.763 353.761 cv
f
504.443 342.961 mo
504.443 343.513 503.995 343.961 503.443 343.961 cv
502.891 343.961 502.443 343.513 502.443 342.961 cv
502.443 342.409 502.891 341.961 503.443 341.961 cv
503.995 341.961 504.443 342.409 504.443 342.961 cv
f
470.003 317.041 mo
470.003 317.593 469.555 318.041 469.003 318.041 cv
468.451 318.041 468.003 317.593 468.003 317.041 cv
468.003 316.489 468.451 316.041 469.003 316.041 cv
469.555 316.041 470.003 316.489 470.003 317.041 cv
f
435.563 329.281 mo
435.563 329.833 435.115 330.281 434.563 330.281 cv
434.011 330.281 433.563 329.833 433.563 329.281 cv
433.563 328.729 434.011 328.281 434.563 328.281 cv
435.115 328.281 435.563 328.729 435.563 329.281 cv
f
401.243 308.881 mo
401.243 309.433 400.795 309.881 400.243 309.881 cv
399.691 309.881 399.243 309.433 399.243 308.881 cv
399.243 308.329 399.691 307.881 400.243 307.881 cv
400.795 307.881 401.243 308.329 401.243 308.881 cv
f
366.923 312.241 mo
366.923 312.793 366.475 313.241 365.923 313.241 cv
365.371 313.241 364.923 312.793 364.923 312.241 cv
364.923 311.688 365.371 311.241 365.923 311.241 cv
366.475 311.241 366.923 311.688 366.923 312.241 cv
f
332.603 291.841 mo
332.603 292.393 332.155 292.841 331.603 292.841 cv
331.051 292.841 330.603 292.393 330.603 291.841 cv
330.603 291.289 331.051 290.841 331.603 290.841 cv
332.155 290.841 332.603 291.289 332.603 291.841 cv
f
298.283 282.001 mo
298.283 282.553 297.835 283.001 297.283 283.001 cv
296.731 283.001 296.283 282.553 296.283 282.001 cv
296.283 281.449 296.731 281.001 297.283 281.001 cv
297.835 281.001 298.283 281.449 298.283 282.001 cv
f
263.723 268.921 mo
263.723 269.473 263.275 269.921 262.723 269.921 cv
262.171 269.921 261.723 269.473 261.723 268.921 cv
261.723 268.369 262.171 267.921 262.723 267.921 cv
263.275 267.921 263.723 268.369 263.723 268.921 cv
f
229.403 254.641 mo
229.403 255.193 228.955 255.641 228.403 255.641 cv
227.851 255.641 227.403 255.193 227.403 254.641 cv
227.403 254.089 227.851 253.641 228.403 253.641 cv
228.955 253.641 229.403 254.089 229.403 254.641 cv
f
195.083 229.081 mo
195.083 229.633 194.635 230.081 194.083 230.081 cv
193.531 230.081 193.083 229.633 193.083 229.081 cv
193.083 228.529 193.531 228.081 194.083 228.081 cv
194.635 228.081 195.083 228.529 195.083 229.081 cv
f
160.763 184.201 mo
160.763 184.753 160.315 185.201 159.763 185.201 cv
159.211 185.201 158.763 184.753 158.763 184.201 cv
158.763 183.649 159.211 183.201 159.763 183.201 cv
160.315 183.201 160.763 183.649 160.763 184.201 cv
f
126.443 39.001 mo
126.443 39.5527 125.995 40.001 125.443 40.001 cv
124.891 40.001 124.443 39.5527 124.443 39.001 cv
124.443 38.4487 124.891 38.001 125.443 38.001 cv
125.995 38.001 126.443 38.4487 126.443 39.001 cv
f
92.0029 21.8408 mo
92.0029 22.3931 91.5552 22.8408 91.0029 22.8408 cv
90.4512 22.8408 90.0029 22.3931 90.0029 21.8408 cv
90.0029 21.2891 90.4512 20.8408 91.0029 20.8408 cv
91.5552 20.8408 92.0029 21.2891 92.0029 21.8408 cv
f
538.763 353.761 mo
538.763 354.313 538.315 354.761 537.763 354.761 cv
537.211 354.761 536.763 354.313 536.763 353.761 cv
536.763 353.209 537.211 352.761 537.763 352.761 cv
538.315 352.761 538.763 353.209 538.763 353.761 cv
f
504.443 324.601 mo
504.443 325.153 503.995 325.601 503.443 325.601 cv
502.891 325.601 502.443 325.153 502.443 324.601 cv
502.443 324.049 502.891 323.601 503.443 323.601 cv
503.995 323.601 504.443 324.049 504.443 324.601 cv
f
470.003 318.48 mo
470.003 319.033 469.555 319.48 469.003 319.48 cv
468.451 319.48 468.003 319.033 468.003 318.48 cv
468.003 317.929 468.451 317.48 469.003 317.48 cv
469.555 317.48 470.003 317.929 470.003 318.48 cv
f
435.563 310.201 mo
435.563 310.753 435.115 311.201 434.563 311.201 cv
434.011 311.201 433.563 310.753 433.563 310.201 cv
433.563 309.649 434.011 309.201 434.563 309.201 cv
435.115 309.201 435.563 309.649 435.563 310.201 cv
f
401.243 315.001 mo
401.243 315.553 400.795 316.001 400.243 316.001 cv
399.691 316.001 399.243 315.553 399.243 315.001 cv
399.243 314.449 399.691 314.001 400.243 314.001 cv
400.795 314.001 401.243 314.449 401.243 315.001 cv
f
366.923 295.561 mo
366.923 296.113 366.475 296.561 365.923 296.561 cv
365.371 296.561 364.923 296.113 364.923 295.561 cv
364.923 295.009 365.371 294.561 365.923 294.561 cv
366.475 294.561 366.923 295.009 366.923 295.561 cv
f
332.603 293.641 mo
332.603 294.193 332.155 294.641 331.603 294.641 cv
331.051 294.641 330.603 294.193 330.603 293.641 cv
330.603 293.089 331.051 292.641 331.603 292.641 cv
332.155 292.641 332.603 293.089 332.603 293.641 cv
f
298.283 282.48 mo
298.283 283.033 297.835 283.48 297.283 283.48 cv
296.731 283.48 296.283 283.033 296.283 282.48 cv
296.283 281.929 296.731 281.48 297.283 281.48 cv
297.835 281.48 298.283 281.929 298.283 282.48 cv
f
263.723 267.121 mo
263.723 267.673 263.275 268.121 262.723 268.121 cv
262.171 268.121 261.723 267.673 261.723 267.121 cv
261.723 266.569 262.171 266.121 262.723 266.121 cv
263.275 266.121 263.723 266.569 263.723 267.121 cv
f
229.403 230.401 mo
229.403 230.953 228.955 231.401 228.403 231.401 cv
227.851 231.401 227.403 230.953 227.403 230.401 cv
227.403 229.849 227.851 229.401 228.403 229.401 cv
228.955 229.401 229.403 229.849 229.403 230.401 cv
f
195.083 234.721 mo
195.083 235.272 194.635 235.721 194.083 235.721 cv
193.531 235.721 193.083 235.272 193.083 234.721 cv
193.083 234.169 193.531 233.721 194.083 233.721 cv
194.635 233.721 195.083 234.169 195.083 234.721 cv
f
160.763 192.601 mo
160.763 193.153 160.315 193.601 159.763 193.601 cv
159.211 193.601 158.763 193.153 158.763 192.601 cv
158.763 192.049 159.211 191.601 159.763 191.601 cv
160.315 191.601 160.763 192.049 160.763 192.601 cv
f
126.443 33.1211 mo
126.443 33.6729 125.995 34.1211 125.443 34.1211 cv
124.891 34.1211 124.443 33.6729 124.443 33.1211 cv
124.443 32.5688 124.891 32.1211 125.443 32.1211 cv
125.995 32.1211 126.443 32.5688 126.443 33.1211 cv
f
538.763 339.241 mo
538.763 339.793 538.315 340.241 537.763 340.241 cv
537.211 340.241 536.763 339.793 536.763 339.241 cv
536.763 338.688 537.211 338.241 537.763 338.241 cv
538.315 338.241 538.763 338.688 538.763 339.241 cv
f
504.443 336.721 mo
504.443 337.272 503.995 337.721 503.443 337.721 cv
502.891 337.721 502.443 337.272 502.443 336.721 cv
502.443 336.169 502.891 335.721 503.443 335.721 cv
503.995 335.721 504.443 336.169 504.443 336.721 cv
f
470.003 331.321 mo
470.003 331.873 469.555 332.321 469.003 332.321 cv
468.451 332.321 468.003 331.873 468.003 331.321 cv
468.003 330.769 468.451 330.321 469.003 330.321 cv
469.555 330.321 470.003 330.769 470.003 331.321 cv
f
435.563 313.201 mo
435.563 313.753 435.115 314.201 434.563 314.201 cv
434.011 314.201 433.563 313.753 433.563 313.201 cv
433.563 312.649 434.011 312.201 434.563 312.201 cv
435.115 312.201 435.563 312.649 435.563 313.201 cv
f
401.243 302.281 mo
401.243 302.833 400.795 303.281 400.243 303.281 cv
399.691 303.281 399.243 302.833 399.243 302.281 cv
399.243 301.729 399.691 301.281 400.243 301.281 cv
400.795 301.281 401.243 301.729 401.243 302.281 cv
f
366.923 297.361 mo
366.923 297.913 366.475 298.361 365.923 298.361 cv
365.371 298.361 364.923 297.913 364.923 297.361 cv
364.923 296.809 365.371 296.361 365.923 296.361 cv
366.475 296.361 366.923 296.809 366.923 297.361 cv
f
332.603 292.801 mo
332.603 293.353 332.155 293.801 331.603 293.801 cv
331.051 293.801 330.603 293.353 330.603 292.801 cv
330.603 292.249 331.051 291.801 331.603 291.801 cv
332.155 291.801 332.603 292.249 332.603 292.801 cv
f
298.283 280.201 mo
298.283 280.753 297.835 281.201 297.283 281.201 cv
296.731 281.201 296.283 280.753 296.283 280.201 cv
296.283 279.649 296.731 279.201 297.283 279.201 cv
297.835 279.201 298.283 279.649 298.283 280.201 cv
f
263.723 270.961 mo
263.723 271.513 263.275 271.961 262.723 271.961 cv
262.171 271.961 261.723 271.513 261.723 270.961 cv
261.723 270.409 262.171 269.961 262.723 269.961 cv
263.275 269.961 263.723 270.409 263.723 270.961 cv
f
229.403 255.361 mo
229.403 255.913 228.955 256.361 228.403 256.361 cv
227.851 256.361 227.403 255.913 227.403 255.361 cv
227.403 254.809 227.851 254.361 228.403 254.361 cv
228.955 254.361 229.403 254.809 229.403 255.361 cv
f
195.083 229.441 mo
195.083 229.993 194.635 230.441 194.083 230.441 cv
193.531 230.441 193.083 229.993 193.083 229.441 cv
193.083 228.889 193.531 228.441 194.083 228.441 cv
194.635 228.441 195.083 228.889 195.083 229.441 cv
f
160.763 174.001 mo
160.763 174.553 160.315 175.001 159.763 175.001 cv
159.211 175.001 158.763 174.553 158.763 174.001 cv
158.763 173.449 159.211 173.001 159.763 173.001 cv
160.315 173.001 160.763 173.449 160.763 174.001 cv
f
126.443 40.2012 mo
126.443 40.7529 125.995 41.2012 125.443 41.2012 cv
124.891 41.2012 124.443 40.7529 124.443 40.2012 cv
124.443 39.6489 124.891 39.2012 125.443 39.2012 cv
125.995 39.2012 126.443 39.6489 126.443 40.2012 cv
f
538.763 334.801 mo
538.763 335.353 538.315 335.801 537.763 335.801 cv
537.211 335.801 536.763 335.353 536.763 334.801 cv
536.763 334.249 537.211 333.801 537.763 333.801 cv
538.315 333.801 538.763 334.249 538.763 334.801 cv
f
504.443 328.561 mo
504.443 329.113 503.995 329.561 503.443 329.561 cv
502.891 329.561 502.443 329.113 502.443 328.561 cv
502.443 328.009 502.891 327.561 503.443 327.561 cv
503.995 327.561 504.443 328.009 504.443 328.561 cv
f
470.003 318.841 mo
470.003 319.393 469.555 319.841 469.003 319.841 cv
468.451 319.841 468.003 319.393 468.003 318.841 cv
468.003 318.289 468.451 317.841 469.003 317.841 cv
469.555 317.841 470.003 318.289 470.003 318.841 cv
f
435.563 316.561 mo
435.563 317.113 435.115 317.561 434.563 317.561 cv
434.011 317.561 433.563 317.113 433.563 316.561 cv
433.563 316.009 434.011 315.561 434.563 315.561 cv
435.115 315.561 435.563 316.009 435.563 316.561 cv
f
401.243 304.561 mo
401.243 305.113 400.795 305.561 400.243 305.561 cv
399.691 305.561 399.243 305.113 399.243 304.561 cv
399.243 304.009 399.691 303.561 400.243 303.561 cv
400.795 303.561 401.243 304.009 401.243 304.561 cv
f
366.923 296.401 mo
366.923 296.953 366.475 297.401 365.923 297.401 cv
365.371 297.401 364.923 296.953 364.923 296.401 cv
364.923 295.849 365.371 295.401 365.923 295.401 cv
366.475 295.401 366.923 295.849 366.923 296.401 cv
f
332.603 297.601 mo
332.603 298.153 332.155 298.601 331.603 298.601 cv
331.051 298.601 330.603 298.153 330.603 297.601 cv
330.603 297.049 331.051 296.601 331.603 296.601 cv
332.155 296.601 332.603 297.049 332.603 297.601 cv
f
298.283 283.921 mo
298.283 284.473 297.835 284.921 297.283 284.921 cv
296.731 284.921 296.283 284.473 296.283 283.921 cv
296.283 283.369 296.731 282.921 297.283 282.921 cv
297.835 282.921 298.283 283.369 298.283 283.921 cv
f
263.723 268.321 mo
263.723 268.873 263.275 269.321 262.723 269.321 cv
262.171 269.321 261.723 268.873 261.723 268.321 cv
261.723 267.769 262.171 267.321 262.723 267.321 cv
263.275 267.321 263.723 267.769 263.723 268.321 cv
f
229.403 260.881 mo
229.403 261.433 228.955 261.881 228.403 261.881 cv
227.851 261.881 227.403 261.433 227.403 260.881 cv
227.403 260.329 227.851 259.881 228.403 259.881 cv
228.955 259.881 229.403 260.329 229.403 260.881 cv
f
195.083 206.761 mo
195.083 207.313 194.635 207.761 194.083 207.761 cv
193.531 207.761 193.083 207.313 193.083 206.761 cv
193.083 206.209 193.531 205.761 194.083 205.761 cv
194.635 205.761 195.083 206.209 195.083 206.761 cv
f
160.763 158.641 mo
160.763 159.193 160.315 159.641 159.763 159.641 cv
159.211 159.641 158.763 159.193 158.763 158.641 cv
158.763 158.089 159.211 157.641 159.763 157.641 cv
160.315 157.641 160.763 158.089 160.763 158.641 cv
f
126.443 37.4409 mo
126.443 37.9932 125.995 38.4409 125.443 38.4409 cv
124.891 38.4409 124.443 37.9932 124.443 37.4409 cv
124.443 36.8892 124.891 36.4409 125.443 36.4409 cv
125.995 36.4409 126.443 36.8892 126.443 37.4409 cv
f
92.0029 21.6011 mo
92.0029 22.1528 91.5552 22.6011 91.0029 22.6011 cv
90.4512 22.6011 90.0029 22.1528 90.0029 21.6011 cv
90.0029 21.0488 90.4512 20.6011 91.0029 20.6011 cv
91.5552 20.6011 92.0029 21.0488 92.0029 21.6011 cv
f
538.763 351.361 mo
538.763 351.913 538.315 352.361 537.763 352.361 cv
537.211 352.361 536.763 351.913 536.763 351.361 cv
536.763 350.809 537.211 350.361 537.763 350.361 cv
538.315 350.361 538.763 350.809 538.763 351.361 cv
f
504.443 338.401 mo
504.443 338.953 503.995 339.401 503.443 339.401 cv
502.891 339.401 502.443 338.953 502.443 338.401 cv
502.443 337.849 502.891 337.401 503.443 337.401 cv
503.995 337.401 504.443 337.849 504.443 338.401 cv
f
470.003 320.401 mo
470.003 320.953 469.555 321.401 469.003 321.401 cv
468.451 321.401 468.003 320.953 468.003 320.401 cv
468.003 319.849 468.451 319.401 469.003 319.401 cv
469.555 319.401 470.003 319.849 470.003 320.401 cv
f
435.563 318.48 mo
435.563 319.033 435.115 319.48 434.563 319.48 cv
434.011 319.48 433.563 319.033 433.563 318.48 cv
433.563 317.929 434.011 317.48 434.563 317.48 cv
435.115 317.48 435.563 317.929 435.563 318.48 cv
f
401.243 305.761 mo
401.243 306.313 400.795 306.761 400.243 306.761 cv
399.691 306.761 399.243 306.313 399.243 305.761 cv
399.243 305.209 399.691 304.761 400.243 304.761 cv
400.795 304.761 401.243 305.209 401.243 305.761 cv
f
366.923 295.201 mo
366.923 295.753 366.475 296.201 365.923 296.201 cv
365.371 296.201 364.923 295.753 364.923 295.201 cv
364.923 294.649 365.371 294.201 365.923 294.201 cv
366.475 294.201 366.923 294.649 366.923 295.201 cv
f
332.603 289.921 mo
332.603 290.473 332.155 290.921 331.603 290.921 cv
331.051 290.921 330.603 290.473 330.603 289.921 cv
330.603 289.369 331.051 288.921 331.603 288.921 cv
332.155 288.921 332.603 289.369 332.603 289.921 cv
f
298.283 283.921 mo
298.283 284.473 297.835 284.921 297.283 284.921 cv
296.731 284.921 296.283 284.473 296.283 283.921 cv
296.283 283.369 296.731 282.921 297.283 282.921 cv
297.835 282.921 298.283 283.369 298.283 283.921 cv
f
263.723 273.601 mo
263.723 274.153 263.275 274.601 262.723 274.601 cv
262.171 274.601 261.723 274.153 261.723 273.601 cv
261.723 273.049 262.171 272.601 262.723 272.601 cv
263.275 272.601 263.723 273.049 263.723 273.601 cv
f
229.403 249.961 mo
229.403 250.513 228.955 250.961 228.403 250.961 cv
227.851 250.961 227.403 250.513 227.403 249.961 cv
227.403 249.409 227.851 248.961 228.403 248.961 cv
228.955 248.961 229.403 249.409 229.403 249.961 cv
f
195.083 227.761 mo
195.083 228.313 194.635 228.761 194.083 228.761 cv
193.531 228.761 193.083 228.313 193.083 227.761 cv
193.083 227.209 193.531 226.761 194.083 226.761 cv
194.635 226.761 195.083 227.209 195.083 227.761 cv
f
160.763 198.721 mo
160.763 199.273 160.315 199.721 159.763 199.721 cv
159.211 199.721 158.763 199.273 158.763 198.721 cv
158.763 198.169 159.211 197.721 159.763 197.721 cv
160.315 197.721 160.763 198.169 160.763 198.721 cv
f
126.443 34.4409 mo
126.443 34.9932 125.995 35.4409 125.443 35.4409 cv
124.891 35.4409 124.443 34.9932 124.443 34.4409 cv
124.443 33.8892 124.891 33.4409 125.443 33.4409 cv
125.995 33.4409 126.443 33.8892 126.443 34.4409 cv
f
92.0029 21.8408 mo
92.0029 22.3931 91.5552 22.8408 91.0029 22.8408 cv
90.4512 22.8408 90.0029 22.3931 90.0029 21.8408 cv
90.0029 21.2891 90.4512 20.8408 91.0029 20.8408 cv
91.5552 20.8408 92.0029 21.2891 92.0029 21.8408 cv
f
538.763 339.601 mo
538.763 340.153 538.315 340.601 537.763 340.601 cv
537.211 340.601 536.763 340.153 536.763 339.601 cv
536.763 339.049 537.211 338.601 537.763 338.601 cv
538.315 338.601 538.763 339.049 538.763 339.601 cv
f
504.443 350.881 mo
504.443 351.433 503.995 351.881 503.443 351.881 cv
502.891 351.881 502.443 351.433 502.443 350.881 cv
502.443 350.329 502.891 349.881 503.443 349.881 cv
503.995 349.881 504.443 350.329 504.443 350.881 cv
f
470.003 323.281 mo
470.003 323.833 469.555 324.281 469.003 324.281 cv
468.451 324.281 468.003 323.833 468.003 323.281 cv
468.003 322.729 468.451 322.281 469.003 322.281 cv
469.555 322.281 470.003 322.729 470.003 323.281 cv
f
435.563 328.921 mo
435.563 329.473 435.115 329.921 434.563 329.921 cv
434.011 329.921 433.563 329.473 433.563 328.921 cv
433.563 328.369 434.011 327.921 434.563 327.921 cv
435.115 327.921 435.563 328.369 435.563 328.921 cv
f
401.243 303.961 mo
401.243 304.513 400.795 304.961 400.243 304.961 cv
399.691 304.961 399.243 304.513 399.243 303.961 cv
399.243 303.409 399.691 302.961 400.243 302.961 cv
400.795 302.961 401.243 303.409 401.243 303.961 cv
f
366.923 302.401 mo
366.923 302.953 366.475 303.401 365.923 303.401 cv
365.371 303.401 364.923 302.953 364.923 302.401 cv
364.923 301.849 365.371 301.401 365.923 301.401 cv
366.475 301.401 366.923 301.849 366.923 302.401 cv
f
332.603 295.201 mo
332.603 295.753 332.155 296.201 331.603 296.201 cv
331.051 296.201 330.603 295.753 330.603 295.201 cv
330.603 294.649 331.051 294.201 331.603 294.201 cv
332.155 294.201 332.603 294.649 332.603 295.201 cv
f
298.283 284.761 mo
298.283 285.313 297.835 285.761 297.283 285.761 cv
296.731 285.761 296.283 285.313 296.283 284.761 cv
296.283 284.209 296.731 283.761 297.283 283.761 cv
297.835 283.761 298.283 284.209 298.283 284.761 cv
f
263.723 272.401 mo
263.723 272.953 263.275 273.401 262.723 273.401 cv
262.171 273.401 261.723 272.953 261.723 272.401 cv
261.723 271.849 262.171 271.401 262.723 271.401 cv
263.275 271.401 263.723 271.849 263.723 272.401 cv
f
229.403 255.601 mo
229.403 256.153 228.955 256.601 228.403 256.601 cv
227.851 256.601 227.403 256.153 227.403 255.601 cv
227.403 255.049 227.851 254.601 228.403 254.601 cv
228.955 254.601 229.403 255.049 229.403 255.601 cv
f
195.083 216.961 mo
195.083 217.513 194.635 217.961 194.083 217.961 cv
193.531 217.961 193.083 217.513 193.083 216.961 cv
193.083 216.409 193.531 215.961 194.083 215.961 cv
194.635 215.961 195.083 216.409 195.083 216.961 cv
f
160.763 183.721 mo
160.763 184.273 160.315 184.721 159.763 184.721 cv
159.211 184.721 158.763 184.273 158.763 183.721 cv
158.763 183.169 159.211 182.721 159.763 182.721 cv
160.315 182.721 160.763 183.169 160.763 183.721 cv
f
126.443 40.6812 mo
126.443 41.2329 125.995 41.6812 125.443 41.6812 cv
124.891 41.6812 124.443 41.2329 124.443 40.6812 cv
124.443 40.1289 124.891 39.6812 125.443 39.6812 cv
125.995 39.6812 126.443 40.1289 126.443 40.6812 cv
f
538.763 324.48 mo
538.763 325.033 538.315 325.48 537.763 325.48 cv
537.211 325.48 536.763 325.033 536.763 324.48 cv
536.763 323.929 537.211 323.48 537.763 323.48 cv
538.315 323.48 538.763 323.929 538.763 324.48 cv
f
504.443 323.281 mo
504.443 323.833 503.995 324.281 503.443 324.281 cv
502.891 324.281 502.443 323.833 502.443 323.281 cv
502.443 322.729 502.891 322.281 503.443 322.281 cv
503.995 322.281 504.443 322.729 504.443 323.281 cv
f
470.003 310.081 mo
470.003 310.633 469.555 311.081 469.003 311.081 cv
468.451 311.081 468.003 310.633 468.003 310.081 cv
468.003 309.529 468.451 309.081 469.003 309.081 cv
469.555 309.081 470.003 309.529 470.003 310.081 cv
f
435.563 307.801 mo
435.563 308.353 435.115 308.801 434.563 308.801 cv
434.011 308.801 433.563 308.353 433.563 307.801 cv
433.563 307.249 434.011 306.801 434.563 306.801 cv
435.115 306.801 435.563 307.249 435.563 307.801 cv
f
401.243 301.681 mo
401.243 302.233 400.795 302.681 400.243 302.681 cv
399.691 302.681 399.243 302.233 399.243 301.681 cv
399.243 301.129 399.691 300.681 400.243 300.681 cv
400.795 300.681 401.243 301.129 401.243 301.681 cv
f
366.923 296.401 mo
366.923 296.953 366.475 297.401 365.923 297.401 cv
365.371 297.401 364.923 296.953 364.923 296.401 cv
364.923 295.849 365.371 295.401 365.923 295.401 cv
366.475 295.401 366.923 295.849 366.923 296.401 cv
f
332.603 291.361 mo
332.603 291.913 332.155 292.361 331.603 292.361 cv
331.051 292.361 330.603 291.913 330.603 291.361 cv
330.603 290.809 331.051 290.361 331.603 290.361 cv
332.155 290.361 332.603 290.809 332.603 291.361 cv
f
298.283 282.001 mo
298.283 282.553 297.835 283.001 297.283 283.001 cv
296.731 283.001 296.283 282.553 296.283 282.001 cv
296.283 281.449 296.731 281.001 297.283 281.001 cv
297.835 281.001 298.283 281.449 298.283 282.001 cv
f
263.723 258.961 mo
263.723 259.513 263.275 259.961 262.723 259.961 cv
262.171 259.961 261.723 259.513 261.723 258.961 cv
261.723 258.409 262.171 257.961 262.723 257.961 cv
263.275 257.961 263.723 258.409 263.723 258.961 cv
f
229.403 252.721 mo
229.403 253.273 228.955 253.721 228.403 253.721 cv
227.851 253.721 227.403 253.273 227.403 252.721 cv
227.403 252.169 227.851 251.721 228.403 251.721 cv
228.955 251.721 229.403 252.169 229.403 252.721 cv
f
195.083 222.361 mo
195.083 222.913 194.635 223.361 194.083 223.361 cv
193.531 223.361 193.083 222.913 193.083 222.361 cv
193.083 221.809 193.531 221.361 194.083 221.361 cv
194.635 221.361 195.083 221.809 195.083 222.361 cv
f
160.763 166.081 mo
160.763 166.633 160.315 167.081 159.763 167.081 cv
159.211 167.081 158.763 166.633 158.763 166.081 cv
158.763 165.529 159.211 165.081 159.763 165.081 cv
160.315 165.081 160.763 165.529 160.763 166.081 cv
f
126.443 36.001 mo
126.443 36.5527 125.995 37.001 125.443 37.001 cv
124.891 37.001 124.443 36.5527 124.443 36.001 cv
124.443 35.4487 124.891 35.001 125.443 35.001 cv
125.995 35.001 126.443 35.4487 126.443 36.001 cv
f
92.0029 21.481 mo
92.0029 22.0327 91.5552 22.481 91.0029 22.481 cv
90.4512 22.481 90.0029 22.0327 90.0029 21.481 cv
90.0029 20.9287 90.4512 20.481 91.0029 20.481 cv
91.5552 20.481 92.0029 20.9287 92.0029 21.481 cv
f
538.763 329.041 mo
538.763 329.593 538.315 330.041 537.763 330.041 cv
537.211 330.041 536.763 329.593 536.763 329.041 cv
536.763 328.489 537.211 328.041 537.763 328.041 cv
538.315 328.041 538.763 328.489 538.763 329.041 cv
f
504.443 325.801 mo
504.443 326.353 503.995 326.801 503.443 326.801 cv
502.891 326.801 502.443 326.353 502.443 325.801 cv
502.443 325.249 502.891 324.801 503.443 324.801 cv
503.995 324.801 504.443 325.249 504.443 325.801 cv
f
470.003 317.761 mo
470.003 318.313 469.555 318.761 469.003 318.761 cv
468.451 318.761 468.003 318.313 468.003 317.761 cv
468.003 317.209 468.451 316.761 469.003 316.761 cv
469.555 316.761 470.003 317.209 470.003 317.761 cv
f
435.563 313.561 mo
435.563 314.113 435.115 314.561 434.563 314.561 cv
434.011 314.561 433.563 314.113 433.563 313.561 cv
433.563 313.009 434.011 312.561 434.563 312.561 cv
435.115 312.561 435.563 313.009 435.563 313.561 cv
f
401.243 302.161 mo
401.243 302.713 400.795 303.161 400.243 303.161 cv
399.691 303.161 399.243 302.713 399.243 302.161 cv
399.243 301.609 399.691 301.161 400.243 301.161 cv
400.795 301.161 401.243 301.609 401.243 302.161 cv
f
366.923 297.601 mo
366.923 298.153 366.475 298.601 365.923 298.601 cv
365.371 298.601 364.923 298.153 364.923 297.601 cv
364.923 297.049 365.371 296.601 365.923 296.601 cv
366.475 296.601 366.923 297.049 366.923 297.601 cv
f
332.603 290.881 mo
332.603 291.433 332.155 291.881 331.603 291.881 cv
331.051 291.881 330.603 291.433 330.603 290.881 cv
330.603 290.329 331.051 289.881 331.603 289.881 cv
332.155 289.881 332.603 290.329 332.603 290.881 cv
f
298.283 286.801 mo
298.283 287.353 297.835 287.801 297.283 287.801 cv
296.731 287.801 296.283 287.353 296.283 286.801 cv
296.283 286.249 296.731 285.801 297.283 285.801 cv
297.835 285.801 298.283 286.249 298.283 286.801 cv
f
263.723 266.161 mo
263.723 266.713 263.275 267.161 262.723 267.161 cv
262.171 267.161 261.723 266.713 261.723 266.161 cv
261.723 265.609 262.171 265.161 262.723 265.161 cv
263.275 265.161 263.723 265.609 263.723 266.161 cv
f
229.403 249.961 mo
229.403 250.513 228.955 250.961 228.403 250.961 cv
227.851 250.961 227.403 250.513 227.403 249.961 cv
227.403 249.409 227.851 248.961 228.403 248.961 cv
228.955 248.961 229.403 249.409 229.403 249.961 cv
f
195.083 223.201 mo
195.083 223.753 194.635 224.201 194.083 224.201 cv
193.531 224.201 193.083 223.753 193.083 223.201 cv
193.083 222.648 193.531 222.201 194.083 222.201 cv
194.635 222.201 195.083 222.648 195.083 223.201 cv
f
160.763 199.081 mo
160.763 199.633 160.315 200.081 159.763 200.081 cv
159.211 200.081 158.763 199.633 158.763 199.081 cv
158.763 198.529 159.211 198.081 159.763 198.081 cv
160.315 198.081 160.763 198.529 160.763 199.081 cv
f
126.443 35.2808 mo
126.443 35.833 125.995 36.2808 125.443 36.2808 cv
124.891 36.2808 124.443 35.833 124.443 35.2808 cv
124.443 34.729 124.891 34.2808 125.443 34.2808 cv
125.995 34.2808 126.443 34.729 126.443 35.2808 cv
f
92.0029 21.481 mo
92.0029 22.0327 91.5552 22.481 91.0029 22.481 cv
90.4512 22.481 90.0029 22.0327 90.0029 21.481 cv
90.0029 20.9287 90.4512 20.481 91.0029 20.481 cv
91.5552 20.481 92.0029 20.9287 92.0029 21.481 cv
f
538.763 345.601 mo
538.763 346.153 538.315 346.601 537.763 346.601 cv
537.211 346.601 536.763 346.153 536.763 345.601 cv
536.763 345.049 537.211 344.601 537.763 344.601 cv
538.315 344.601 538.763 345.049 538.763 345.601 cv
f
504.443 325.921 mo
504.443 326.473 503.995 326.921 503.443 326.921 cv
502.891 326.921 502.443 326.473 502.443 325.921 cv
502.443 325.369 502.891 324.921 503.443 324.921 cv
503.995 324.921 504.443 325.369 504.443 325.921 cv
f
470.003 313.681 mo
470.003 314.233 469.555 314.681 469.003 314.681 cv
468.451 314.681 468.003 314.233 468.003 313.681 cv
468.003 313.129 468.451 312.681 469.003 312.681 cv
469.555 312.681 470.003 313.129 470.003 313.681 cv
f
435.563 309.721 mo
435.563 310.272 435.115 310.721 434.563 310.721 cv
434.011 310.721 433.563 310.272 433.563 309.721 cv
433.563 309.169 434.011 308.721 434.563 308.721 cv
435.115 308.721 435.563 309.169 435.563 309.721 cv
f
401.243 305.521 mo
401.243 306.073 400.795 306.521 400.243 306.521 cv
399.691 306.521 399.243 306.073 399.243 305.521 cv
399.243 304.969 399.691 304.521 400.243 304.521 cv
400.795 304.521 401.243 304.969 401.243 305.521 cv
f
366.923 301.921 mo
366.923 302.473 366.475 302.921 365.923 302.921 cv
365.371 302.921 364.923 302.473 364.923 301.921 cv
364.923 301.369 365.371 300.921 365.923 300.921 cv
366.475 300.921 366.923 301.369 366.923 301.921 cv
f
332.603 295.441 mo
332.603 295.993 332.155 296.441 331.603 296.441 cv
331.051 296.441 330.603 295.993 330.603 295.441 cv
330.603 294.889 331.051 294.441 331.603 294.441 cv
332.155 294.441 332.603 294.889 332.603 295.441 cv
f
298.283 278.281 mo
298.283 278.833 297.835 279.281 297.283 279.281 cv
296.731 279.281 296.283 278.833 296.283 278.281 cv
296.283 277.729 296.731 277.281 297.283 277.281 cv
297.835 277.281 298.283 277.729 298.283 278.281 cv
f
263.723 271.201 mo
263.723 271.753 263.275 272.201 262.723 272.201 cv
262.171 272.201 261.723 271.753 261.723 271.201 cv
261.723 270.649 262.171 270.201 262.723 270.201 cv
263.275 270.201 263.723 270.649 263.723 271.201 cv
f
229.403 246.001 mo
229.403 246.553 228.955 247.001 228.403 247.001 cv
227.851 247.001 227.403 246.553 227.403 246.001 cv
227.403 245.449 227.851 245.001 228.403 245.001 cv
228.955 245.001 229.403 245.449 229.403 246.001 cv
f
195.083 222.601 mo
195.083 223.153 194.635 223.601 194.083 223.601 cv
193.531 223.601 193.083 223.153 193.083 222.601 cv
193.083 222.049 193.531 221.601 194.083 221.601 cv
194.635 221.601 195.083 222.049 195.083 222.601 cv
f
160.763 195.241 mo
160.763 195.793 160.315 196.241 159.763 196.241 cv
159.211 196.241 158.763 195.793 158.763 195.241 cv
158.763 194.689 159.211 194.241 159.763 194.241 cv
160.315 194.241 160.763 194.689 160.763 195.241 cv
f
126.443 36.9609 mo
126.443 37.5127 125.995 37.9609 125.443 37.9609 cv
124.891 37.9609 124.443 37.5127 124.443 36.9609 cv
124.443 36.4092 124.891 35.9609 125.443 35.9609 cv
125.995 35.9609 126.443 36.4092 126.443 36.9609 cv
f
538.763 343.921 mo
538.763 344.473 538.315 344.921 537.763 344.921 cv
537.211 344.921 536.763 344.473 536.763 343.921 cv
536.763 343.369 537.211 342.921 537.763 342.921 cv
538.315 342.921 538.763 343.369 538.763 343.921 cv
f
504.443 320.401 mo
504.443 320.953 503.995 321.401 503.443 321.401 cv
502.891 321.401 502.443 320.953 502.443 320.401 cv
502.443 319.849 502.891 319.401 503.443 319.401 cv
503.995 319.401 504.443 319.849 504.443 320.401 cv
f
470.003 321.001 mo
470.003 321.553 469.555 322.001 469.003 322.001 cv
468.451 322.001 468.003 321.553 468.003 321.001 cv
468.003 320.449 468.451 320.001 469.003 320.001 cv
469.555 320.001 470.003 320.449 470.003 321.001 cv
f
435.563 313.921 mo
435.563 314.473 435.115 314.921 434.563 314.921 cv
434.011 314.921 433.563 314.473 433.563 313.921 cv
433.563 313.369 434.011 312.921 434.563 312.921 cv
435.115 312.921 435.563 313.369 435.563 313.921 cv
f
401.243 301.441 mo
401.243 301.993 400.795 302.441 400.243 302.441 cv
399.691 302.441 399.243 301.993 399.243 301.441 cv
399.243 300.889 399.691 300.441 400.243 300.441 cv
400.795 300.441 401.243 300.889 401.243 301.441 cv
f
366.923 303.841 mo
366.923 304.393 366.475 304.841 365.923 304.841 cv
365.371 304.841 364.923 304.393 364.923 303.841 cv
364.923 303.289 365.371 302.841 365.923 302.841 cv
366.475 302.841 366.923 303.289 366.923 303.841 cv
f
332.603 291.48 mo
332.603 292.033 332.155 292.48 331.603 292.48 cv
331.051 292.48 330.603 292.033 330.603 291.48 cv
330.603 290.929 331.051 290.48 331.603 290.48 cv
332.155 290.48 332.603 290.929 332.603 291.48 cv
f
298.283 279.601 mo
298.283 280.153 297.835 280.601 297.283 280.601 cv
296.731 280.601 296.283 280.153 296.283 279.601 cv
296.283 279.049 296.731 278.601 297.283 278.601 cv
297.835 278.601 298.283 279.049 298.283 279.601 cv
f
263.723 268.321 mo
263.723 268.873 263.275 269.321 262.723 269.321 cv
262.171 269.321 261.723 268.873 261.723 268.321 cv
261.723 267.769 262.171 267.321 262.723 267.321 cv
263.275 267.321 263.723 267.769 263.723 268.321 cv
f
229.403 249.961 mo
229.403 250.513 228.955 250.961 228.403 250.961 cv
227.851 250.961 227.403 250.513 227.403 249.961 cv
227.403 249.409 227.851 248.961 228.403 248.961 cv
228.955 248.961 229.403 249.409 229.403 249.961 cv
f
195.083 222.601 mo
195.083 223.153 194.635 223.601 194.083 223.601 cv
193.531 223.601 193.083 223.153 193.083 222.601 cv
193.083 222.049 193.531 221.601 194.083 221.601 cv
194.635 221.601 195.083 222.049 195.083 222.601 cv
f
160.763 174.961 mo
160.763 175.513 160.315 175.961 159.763 175.961 cv
159.211 175.961 158.763 175.513 158.763 174.961 cv
158.763 174.409 159.211 173.961 159.763 173.961 cv
160.315 173.961 160.763 174.409 160.763 174.961 cv
f
126.443 45.1211 mo
126.443 45.6729 125.995 46.1211 125.443 46.1211 cv
124.891 46.1211 124.443 45.6729 124.443 45.1211 cv
124.443 44.5688 124.891 44.1211 125.443 44.1211 cv
125.995 44.1211 126.443 44.5688 126.443 45.1211 cv
f
538.763 340.321 mo
538.763 340.873 538.315 341.321 537.763 341.321 cv
537.211 341.321 536.763 340.873 536.763 340.321 cv
536.763 339.769 537.211 339.321 537.763 339.321 cv
538.315 339.321 538.763 339.769 538.763 340.321 cv
f
504.443 333.241 mo
504.443 333.793 503.995 334.241 503.443 334.241 cv
502.891 334.241 502.443 333.793 502.443 333.241 cv
502.443 332.688 502.891 332.241 503.443 332.241 cv
503.995 332.241 504.443 332.688 504.443 333.241 cv
f
470.003 325.321 mo
470.003 325.873 469.555 326.321 469.003 326.321 cv
468.451 326.321 468.003 325.873 468.003 325.321 cv
468.003 324.769 468.451 324.321 469.003 324.321 cv
469.555 324.321 470.003 324.769 470.003 325.321 cv
f
435.563 311.041 mo
435.563 311.593 435.115 312.041 434.563 312.041 cv
434.011 312.041 433.563 311.593 433.563 311.041 cv
433.563 310.489 434.011 310.041 434.563 310.041 cv
435.115 310.041 435.563 310.489 435.563 311.041 cv
f
401.243 308.041 mo
401.243 308.593 400.795 309.041 400.243 309.041 cv
399.691 309.041 399.243 308.593 399.243 308.041 cv
399.243 307.489 399.691 307.041 400.243 307.041 cv
400.795 307.041 401.243 307.489 401.243 308.041 cv
f
366.923 299.161 mo
366.923 299.713 366.475 300.161 365.923 300.161 cv
365.371 300.161 364.923 299.713 364.923 299.161 cv
364.923 298.609 365.371 298.161 365.923 298.161 cv
366.475 298.161 366.923 298.609 366.923 299.161 cv
f
332.603 291.841 mo
332.603 292.393 332.155 292.841 331.603 292.841 cv
331.051 292.841 330.603 292.393 330.603 291.841 cv
330.603 291.289 331.051 290.841 331.603 290.841 cv
332.155 290.841 332.603 291.289 332.603 291.841 cv
f
298.283 281.761 mo
298.283 282.313 297.835 282.761 297.283 282.761 cv
296.731 282.761 296.283 282.313 296.283 281.761 cv
296.283 281.209 296.731 280.761 297.283 280.761 cv
297.835 280.761 298.283 281.209 298.283 281.761 cv
f
263.723 270.841 mo
263.723 271.393 263.275 271.841 262.723 271.841 cv
262.171 271.841 261.723 271.393 261.723 270.841 cv
261.723 270.289 262.171 269.841 262.723 269.841 cv
263.275 269.841 263.723 270.289 263.723 270.841 cv
f
229.403 248.401 mo
229.403 248.953 228.955 249.401 228.403 249.401 cv
227.851 249.401 227.403 248.953 227.403 248.401 cv
227.403 247.849 227.851 247.401 228.403 247.401 cv
228.955 247.401 229.403 247.849 229.403 248.401 cv
f
195.083 233.761 mo
195.083 234.313 194.635 234.761 194.083 234.761 cv
193.531 234.761 193.083 234.313 193.083 233.761 cv
193.083 233.209 193.531 232.761 194.083 232.761 cv
194.635 232.761 195.083 233.209 195.083 233.761 cv
f
160.763 192.841 mo
160.763 193.393 160.315 193.841 159.763 193.841 cv
159.211 193.841 158.763 193.393 158.763 192.841 cv
158.763 192.289 159.211 191.841 159.763 191.841 cv
160.315 191.841 160.763 192.289 160.763 192.841 cv
f
126.443 39.6011 mo
126.443 40.1528 125.995 40.6011 125.443 40.6011 cv
124.891 40.6011 124.443 40.1528 124.443 39.6011 cv
124.443 39.0488 124.891 38.6011 125.443 38.6011 cv
125.995 38.6011 126.443 39.0488 126.443 39.6011 cv
f
538.763 357.121 mo
538.763 357.673 538.315 358.121 537.763 358.121 cv
537.211 358.121 536.763 357.673 536.763 357.121 cv
536.763 356.569 537.211 356.121 537.763 356.121 cv
538.315 356.121 538.763 356.569 538.763 357.121 cv
f
504.443 327.48 mo
504.443 328.033 503.995 328.48 503.443 328.48 cv
502.891 328.48 502.443 328.033 502.443 327.48 cv
502.443 326.929 502.891 326.48 503.443 326.48 cv
503.995 326.48 504.443 326.929 504.443 327.48 cv
f
470.003 334.921 mo
470.003 335.473 469.555 335.921 469.003 335.921 cv
468.451 335.921 468.003 335.473 468.003 334.921 cv
468.003 334.369 468.451 333.921 469.003 333.921 cv
469.555 333.921 470.003 334.369 470.003 334.921 cv
f
435.563 316.561 mo
435.563 317.113 435.115 317.561 434.563 317.561 cv
434.011 317.561 433.563 317.113 433.563 316.561 cv
433.563 316.009 434.011 315.561 434.563 315.561 cv
435.115 315.561 435.563 316.009 435.563 316.561 cv
f
401.243 304.801 mo
401.243 305.353 400.795 305.801 400.243 305.801 cv
399.691 305.801 399.243 305.353 399.243 304.801 cv
399.243 304.249 399.691 303.801 400.243 303.801 cv
400.795 303.801 401.243 304.249 401.243 304.801 cv
f
366.923 299.521 mo
366.923 300.073 366.475 300.521 365.923 300.521 cv
365.371 300.521 364.923 300.073 364.923 299.521 cv
364.923 298.969 365.371 298.521 365.923 298.521 cv
366.475 298.521 366.923 298.969 366.923 299.521 cv
f
332.603 293.881 mo
332.603 294.433 332.155 294.881 331.603 294.881 cv
331.051 294.881 330.603 294.433 330.603 293.881 cv
330.603 293.329 331.051 292.881 331.603 292.881 cv
332.155 292.881 332.603 293.329 332.603 293.881 cv
f
298.283 277.201 mo
298.283 277.753 297.835 278.201 297.283 278.201 cv
296.731 278.201 296.283 277.753 296.283 277.201 cv
296.283 276.649 296.731 276.201 297.283 276.201 cv
297.835 276.201 298.283 276.649 298.283 277.201 cv
f
263.723 267.601 mo
263.723 268.153 263.275 268.601 262.723 268.601 cv
262.171 268.601 261.723 268.153 261.723 267.601 cv
261.723 267.049 262.171 266.601 262.723 266.601 cv
263.275 266.601 263.723 267.049 263.723 267.601 cv
f
229.403 255.601 mo
229.403 256.153 228.955 256.601 228.403 256.601 cv
227.851 256.601 227.403 256.153 227.403 255.601 cv
227.403 255.049 227.851 254.601 228.403 254.601 cv
228.955 254.601 229.403 255.049 229.403 255.601 cv
f
195.083 222.601 mo
195.083 223.153 194.635 223.601 194.083 223.601 cv
193.531 223.601 193.083 223.153 193.083 222.601 cv
193.083 222.049 193.531 221.601 194.083 221.601 cv
194.635 221.601 195.083 222.049 195.083 222.601 cv
f
160.763 165.481 mo
160.763 166.033 160.315 166.481 159.763 166.481 cv
159.211 166.481 158.763 166.033 158.763 165.481 cv
158.763 164.929 159.211 164.481 159.763 164.481 cv
160.315 164.481 160.763 164.929 160.763 165.481 cv
f
126.443 39.1211 mo
126.443 39.6729 125.995 40.1211 125.443 40.1211 cv
124.891 40.1211 124.443 39.6729 124.443 39.1211 cv
124.443 38.5688 124.891 38.1211 125.443 38.1211 cv
125.995 38.1211 126.443 38.5688 126.443 39.1211 cv
f
92.0029 21.481 mo
92.0029 22.0327 91.5552 22.481 91.0029 22.481 cv
90.4512 22.481 90.0029 22.0327 90.0029 21.481 cv
90.0029 20.9287 90.4512 20.481 91.0029 20.481 cv
91.5552 20.481 92.0029 20.9287 92.0029 21.481 cv
f
gsave
91.0396 21.4976 mo
91.0396 373.748 li
537.873 373.748 li
537.873 21.4976 li
91.0396 21.4976 li
cp
clp
2 lw
537.79 339.664 mo
503.373 328.498 li
469.04 320.331 li
434.623 310.998 li
400.29 305.081 li
365.957 299.498 li
331.54 291.914 li
297.207 281.998 li
262.79 270.081 li
228.457 249.998 li
194.123 222.581 li
159.707 183.748 li
125.373 38.9976 li
91.0396 21.4976 li
1 0 0 rgb
@
grestore
%ADOBeginSubsetFont: Helvetica Initial
%ADOt1write: (1.0.24)%%Copyright: Copyright 2011 Adobe System Incorporated. All rights reserved.12 dict dup begin/FontType 1 def/FontName /Helvetica def/FontInfo 5 dict dup begin/ItalicAngle 0 def/FSType 0 defend def/PaintType 0 def/FontMatrix [0.001 0 0 0.001 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 48 /zero putdup 49 /one putdup 50 /two putdup 51 /three putdup 52 /four putdup 54 /six putdup 56 /eight putdup 127 /minus putdef/FontBBox {-951 -481 1446 1122} defendsystemdict begindup /Private7 dict dup begin/|- {def} def/| {put} def/BlueValues [0 0] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings9 dict dup begin/.notdef <1C60D8A8C9B66F631635D26BA635582B3FDE9B3DD75794781396E648A7CA97DB1343CA> |-/zero <1C60D8A8C9B7EF322BB70D1045F9F84CF5A9E636DA48B0B84345CFB17CDCD64AA529BD23C358113A6F12A7F927F67801E7716DEDB8FBB50D28956279879C3943A67386E5304D963AB3E064E7022317006AA79A8777799C5D39502A7CB330EAEEC28837821C5437B109C741C1D7BCD8EEC785ED017624EE945A52A677F5B0E3B0C4781A3901> |-/one <1C60D8A8C9B7EF322B8DEEDAE6F72EF3709E16C7A593AF17F17D72A3907C7468090579C66DE0263BFE> |-/two <1C60D8A8C9B7EF327699F81B0CD59DC4BD38D48AF11B5B9C1D7787A22BDC09D7BCED9A76C2312055A28AC829584109043EE366AF8632D6D62E9BBD6A4357093750D4015EA59C9F538C44C55AD0DB14FEE0C7267845EB7EFBD514024AA1A03530A8941AD7B5F508335B2FDCA37E6B0627146A6F144DB9DD7DCA6BE86290FB46DD6A2918F4C2C2BDEECA159D78> |-/three <1C60D8A8C9B7EF322B8D6E3793F9C339FF2D01F55F75395A69A42725328E1B8E66EAFF6BAC335B6E345906CE7152DDCE6F991DD2E99A50D14EF5FE716864AD89B92005EB56184F6465E294CACBF73EC4E77A27D9ACFF3348FE551D23745FD8C1F5363E223D2FE146B2E36748D97805004E8C37168D3D6622BBF76ADD739801325A4BB7457A49C531154E36C58F381AB30F164CAE6510100AF5FE6405CBE42D3AEC01131A86CADB27645F055DEC901ADBC964660F336098380F7A314362D92502B680C534E053458ABD592A4A4D87F9589307764B161F9884> |-/four <1C60D8A8C9B7EF32298E3DD46F18108137336D1A5C627A90D059BB18158BA2A55FF5DE20CE460964DAF45C08A7D9820A784F4A44F7E1> |-/six <1C60D8A8C9B7EF322BACEC3D6ABEF2D493EDC493AA22ED42125C47DF2396DE843240A24151C3116F0DCEE068EC75B404A70B0E3A92C2307D093030C4F08B5CC0A75F4F4D7C70C5CD3B07E718D5DA84710CE02FF093BE8B5ED477F329DF9AC8554D46651B2A99890C549B5152AB0899BB31DC610CEE59FE1F4C3BE037BFF7F7AE7EDC6D596E9E9398287209A7C703150F7EA84F1C65DCD68CCC47A3B7F9EF77F610D53784F89B61AB4160F9D214F618A6C0032B66C3DB575FE49E073B7AB1C1C6CA> |-/eight <1C60D8A8C9B7EF322BB1E6B7658B273FB04B6EA2FDD83BE014315CEA310C9045661E4654F5FAA18E921C35D5D5266AB0AB839D962ABE974A291E63893114CACA79253F9F2FA5DBD832A15E9A146C3FAF70E186074467C5FF9BFF3446DA2979E197C33ECF2E6672D0ABB4DD84DADA6F0875D027C1012708E022D3B91B078729D3EB37FF9AB4379F6AE8761C6A64E65D5782F4A15C32B5788322C1277C7EEACA49FCEF1A946497EBAE7710FA41A32E95C02F9037E734AB7501DA6FA4D1255B1B5E2A30AD357C72139096879BB9225AA54D6163D99B65B907C933335C31755E7599F49EDF67E30B707AA1BB3DFB155476D77FA4345C2EDAF4F74461> |-/minus <1C60D8A8C9B7F374C6243061E982D378A14DF0A305> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
/CKODAQ+Helvetica /Helvetica findfont ct_VMDictPut/CKODAQ+Helvetica*1 [48{/.notdef}rp /zero /one /two /three /four /.notdef /six /.notdef /eight 70{/.notdef}rp /minus 128{/.notdef}rp]CKODAQ+Helvetica nfCKODAQ+Helvetica*1 [36 0 0 -36 0 0 ]msf173.042 403.083 mo(20)[20.0215 0 ]xsh288.542 402.083 mo(40)[20.021 0 ]xsh401.12 403.083 mo(60)[20.0215 0 ]xsh517.706 403.083 mo(80)[20.0215 0 ]xsh47.3779 309.582 mo(\1774)[21.0234 0 ]xsh45.3779 239.161 mo(\1773)[21.0234 0 ]xsh46.3774 168.747 mo(\1772)[21.0234 0 ]xsh49.3784 98.333 mo(\1771)[21.0234 0 ]xsh64.0415 30.9111 mo(0)sh80.7061 400.911 mo(0)shgsave
39.0986 283.852 mo
39.0986 121.441 li
0 121.441 li
0 283.852 li
39.0986 283.852 li
cp
clp
2.55664 277.685 mo
2.98926 283.197 li
4.20996 283.197 li
4.20996 280.545 4.47852 280.242 6.3291 280.242 cv
25.9697 280.242 li
27.6699 280.242 27.6699 280.659 27.6699 283.197 cv
28.873 283.197 li
28.835 281.939 28.7588 279.923 28.7588 278.972 cv
28.7588 278.02 28.833 276.154 28.873 274.746 cv
27.6699 274.746 li
27.6699 277.272 27.6699 277.685 25.9639 277.685 cv
f
20.7734 255.881 mo
15.9092 255.881 11.8809 259.683 11.8809 264.283 cv
11.8809 269.034 16.0234 272.721 20.7734 272.721 cv
25.6758 272.721 29.3242 268.767 29.3242 264.32 cv
29.3242 259.72 25.5996 255.879 20.7734 255.879 cv
20.7734 255.881 li
cp
28.4189 264.283 mo
28.4189 265.916 27.623 267.588 25.877 268.613 cv
24.2061 269.563 21.8916 269.563 20.5244 269.563 cv
19.0449 269.563 16.9951 269.563 15.3262 268.65 cv
13.5801 267.625 12.7822 265.838 12.7822 264.32 cv
12.7822 262.647 13.6182 261.014 15.249 260.027 cv
16.8818 259.037 19.082 259.037 20.5244 259.037 cv
21.8916 259.037 23.9404 259.037 25.6113 259.875 cv
27.3193 260.711 28.4189 262.383 28.4189 264.283 cv
f
22.4072 246.406 mo
22.4072 249.712 18.6328 249.712 17.7637 249.712 cv
16.7441 249.712 15.5371 249.676 14.5947 249.105 cv
14.1426 248.802 13.083 247.926 13.083 246.406 cv
13.083 243.098 16.8584 243.098 17.7256 243.098 cv
18.7441 243.098 19.9521 243.138 20.8975 243.707 cv
21.3496 244.01 22.4072 244.887 22.4072 246.406 cv
cp
22.0518 250.146 mo
23.1865 248.667 23.3086 247.11 23.3086 246.39 cv
23.3086 242.861 20.6758 240.241 17.7373 240.241 cv
16.3242 240.241 14.9111 240.838 14.0352 241.77 cv
12.7363 240.398 12.5459 239.027 12.5459 238.343 cv
12.5459 238.266 12.5459 238.075 12.584 237.961 cv
12.7363 238.38 13.1553 238.57 13.6133 238.57 cv
14.2637 238.57 14.7207 238.075 14.7207 237.466 cv
14.7207 237.086 14.4531 236.362 13.5752 236.362 cv
12.9248 236.362 11.7031 236.824 11.7031 238.313 cv
11.7031 239.074 11.9629 240.75 13.543 242.352 cv
12.292 243.953 12.1787 245.556 12.1787 246.394 cv
12.1787 249.938 14.79 252.569 17.7021 252.569 cv
19.3672 252.569 20.8027 251.731 21.5996 250.778 cv
22.166 251.274 23.415 251.96 24.7393 251.96 cv
25.9111 251.96 27.3506 251.465 28.1055 250.284 cv
28.75 252.569 30.376 253.771 31.8877 253.771 cv
34.6104 253.771 36.6934 250.01 36.6934 245.371 cv
36.6934 240.888 34.7393 236.931 31.7539 236.931 cv
30.4141 236.931 28.46 237.464 27.3887 239.398 cv
26.3164 241.41 26.3164 243.613 26.3164 245.93 cv
26.3164 246.879 26.3164 248.512 26.3164 248.777 cv
26.166 249.991 25.0059 250.788 23.8096 250.788 cv
23.6611 250.788 22.8008 250.788 22.0518 250.144 cv
22.0518 250.146 li
cp
35.79 245.335 mo
35.79 249.188 33.8535 251.818 31.8389 251.818 cv
30.0918 251.818 28.6885 250.369 28.5723 248.692 cv
28.5723 246.442 li
28.5723 243.162 28.5723 238.889 31.8389 238.889 cv
33.8916 238.889 35.79 241.6 35.79 245.338 cv
f
21.1982 226.854 mo
20.4814 226.854 20.4512 226.907 20.4512 227.648 cv
22.0811 229.338 22.1055 231.741 22.1055 232.823 cv
23.0078 232.823 li
23.0078 232.186 23.0078 230.427 22.3398 228.963 cv
35.918 228.963 li
36.7959 228.963 37.1426 228.963 37.1426 231.625 cv
37.1426 232.638 li
38.0439 232.638 li
38.0176 232.157 37.9385 228.881 37.9385 227.895 cv
37.9385 227.069 38.0176 223.711 38.0439 223.125 cv
37.1426 223.125 li
37.1426 224.153 li
37.1426 226.857 36.7959 226.857 35.9189 226.857 cv
f
29.6309 206.856 mo
26.7041 206.856 24.6045 207.203 22.7422 208.425 cv
21.5166 209.249 20.4541 210.896 20.4541 213.021 cv
20.4541 219.188 27.7158 219.188 29.6318 219.188 cv
31.5479 219.188 38.6504 219.188 38.6504 213.021 cv
38.6504 206.856 31.5479 206.856 29.6318 206.856 cv
29.6309 206.856 li
cp
37.8965 213.021 mo
37.8965 214.248 37.1777 215.873 34.998 216.405 cv
33.4297 216.778 31.252 216.778 29.2842 216.778 cv
27.3447 216.778 25.3252 216.778 23.8643 216.378 cv
21.7637 215.819 21.2012 214.114 21.2012 213.021 cv
21.2012 211.582 22.084 210.194 23.624 209.716 cv
25.0596 209.288 26.9746 209.261 29.2842 209.261 cv
31.252 209.261 33.2168 209.261 34.8926 209.61 cv
37.3105 210.143 37.8965 211.954 37.8965 213.021 cv
f
37.9697 190.946 mo
37.8545 190.946 37.7803 190.946 37.1367 191.591 cv
32.3604 196.322 25.2002 197.534 19.4043 197.534 cv
12.8115 197.534 6.21777 196.096 1.48145 191.44 cv
1.02637 190.948 0.950195 190.948 0.836914 190.948 cv
0.571289 190.948 0.450195 191.102 0.450195 191.33 cv
0.450195 191.712 3.03418 195.141 7.84668 197.389 cv
12.0137 199.331 16.2197 199.789 19.4043 199.789 cv
22.3604 199.789 26.9434 199.369 31.2236 197.272 cv
35.8848 194.987 38.3477 191.709 38.3477 191.327 cv
38.3477 191.1 38.2334 190.946 37.9697 190.946 cv
f
19.0957 163.837 mo
19.0957 164.792 li
24.9141 165.744 27.6699 166.619 27.6699 173.164 cv
27.6699 178.226 li
27.6699 180.015 27.4043 180.089 26.1602 180.089 cv
16.0918 180.089 li
16.0918 176.672 li
16.0918 172.989 17.2979 172.57 20.498 172.57 cv
20.498 171.668 li
10.4541 171.668 li
10.4541 172.57 li
13.7129 172.57 14.8896 172.989 14.8896 176.672 cv
14.8896 180.089 li
5.73535 180.089 li
4.47852 180.089 4.20898 180.015 4.20898 178.226 cv
4.20898 173.317 li
4.20898 167.496 6.31445 166.468 11.6279 165.858 cv
11.6279 164.905 li
3.10156 165.972 li
3.10156 187.404 li
4.20898 187.404 li
4.20898 186.507 li
4.20898 183.624 4.62988 183.55 5.99805 183.55 cv
25.8857 183.55 li
27.2529 183.55 27.6699 183.624 27.6699 186.507 cv
27.6699 187.404 li
28.873 187.404 li
28.873 165.438 li
f
25.9082 156.18 mo
20.1338 156.18 li
16.4229 156.18 13.083 154.604 13.083 151.75 cv
13.083 151.486 13.083 151.412 13.083 151.336 cv
13.1201 151.458 13.5605 152.269 14.5195 152.269 cv
15.5488 152.269 16.1006 151.461 16.1006 150.614 cv
16.1006 149.921 15.6533 148.96 14.459 148.96 cv
13.2637 148.96 12.1797 150.139 12.1797 151.773 cv
12.1797 154.549 14.6836 155.915 16.29 156.447 cv
12.1797 156.447 li
12.6143 161.729 li
13.8359 161.729 li
13.8359 159.043 14.1025 158.737 15.9385 158.737 cv
25.9844 158.737 li
27.6719 158.737 27.6719 159.159 27.6719 161.729 cv
28.874 161.729 li
28.8359 160.244 28.7598 158.456 28.7598 157.39 cv
28.7598 155.866 28.7598 154.076 28.874 152.555 cv
27.6719 152.555 li
27.6719 153.34 li
27.6719 156.105 27.2588 156.18 25.9082 156.18 cv
f
25.9082 141.293 mo
20.1338 141.293 li
16.4229 141.293 13.083 139.717 13.083 136.862 cv
13.083 136.6 13.083 136.524 13.083 136.448 cv
13.1201 136.57 13.5605 137.382 14.5195 137.382 cv
15.5488 137.382 16.1006 136.573 16.1006 135.727 cv
16.1006 135.033 15.6533 134.072 14.459 134.072 cv
13.2637 134.072 12.1797 135.252 12.1797 136.887 cv
12.1797 139.661 14.6836 141.027 16.29 141.56 cv
12.1797 141.56 li
12.6143 146.842 li
13.8359 146.842 li
13.8359 144.155 14.1025 143.85 15.9385 143.85 cv
25.9844 143.85 li
27.6719 143.85 27.6719 144.271 27.6719 146.842 cv
28.874 146.842 li
28.8359 145.356 28.7598 143.567 28.7598 142.501 cv
28.7598 140.979 28.7598 139.188 28.874 137.666 cv
27.6719 137.666 li
27.6719 138.452 li
27.6719 141.218 27.2588 141.293 25.9082 141.293 cv
f
19.4023 122.04 mo
16.4473 122.04 11.8613 122.461 7.58008 124.549 cv
2.9209 126.826 0.450195 130.091 0.450195 130.471 cv
0.450195 130.697 0.609375 130.85 0.836914 130.85 cv
0.950195 130.85 1.02637 130.85 1.70703 130.134 cv
5.45996 126.442 11.4834 124.296 19.4043 124.296 cv
25.8828 124.296 32.5518 125.69 37.3262 130.36 cv
37.7803 130.85 37.8564 130.85 37.9707 130.85 cv
38.1982 130.85 38.3496 130.697 38.3496 130.471 cv
38.3496 130.091 35.7734 126.675 30.9619 124.436 cv
26.7949 122.498 22.5859 122.04 19.4053 122.04 cv
f
grestore
gsave
75.5132 449.02 mo
550.712 449.02 li
550.712 409.92 li
75.5132 409.92 li
75.5132 449.02 li
cp
clp
94.2964 423.503 mo
94.2583 423.386 94.1069 423.074 94.1069 422.957 cv
94.1069 422.917 94.7876 422.372 95.2036 422.061 cv
101.817 416.799 li
105.37 414.108 106.843 413.954 107.977 413.833 cv
108.279 413.793 108.657 413.755 108.657 413.056 cv
108.657 412.899 108.543 412.63 108.24 412.63 cv
107.409 412.63 106.463 412.747 105.557 412.747 cv
104.196 412.747 102.723 412.63 101.363 412.63 cv
101.099 412.63 100.645 412.63 100.645 413.405 cv
100.645 413.676 100.833 413.793 101.099 413.833 cv
101.931 413.914 102.271 414.108 102.271 414.652 cv
102.271 415.355 101.137 416.252 100.911 416.447 cv
86.1733 428.144 li
89.1958 415.627 li
89.5356 414.224 89.6118 413.829 92.3706 413.829 cv
93.3149 413.829 93.6548 413.829 93.6548 413.055 cv
93.6548 412.704 93.3521 412.627 93.1245 412.627 cv
92.0659 412.627 89.3452 412.744 88.2876 412.744 cv
87.1919 412.744 84.5083 412.627 83.4126 412.627 cv
83.1479 412.627 82.6567 412.627 82.6567 413.364 cv
82.6567 413.828 82.9976 413.828 83.7534 413.828 cv
84.2456 413.828 84.9243 413.873 85.3794 413.911 cv
85.9839 413.99 86.2114 414.108 86.2114 414.537 cv
86.2114 414.692 86.1733 414.81 86.061 415.278 cv
80.9956 436.21 li
80.6177 437.731 80.5415 438.043 77.5562 438.043 cv
76.9146 438.043 76.4985 438.043 76.4985 438.777 cv
76.4985 439.243 76.9517 439.243 77.0649 439.243 cv
78.1235 439.243 80.8062 439.126 81.8638 439.126 cv
82.6567 439.126 83.4878 439.165 84.2817 439.165 cv
85.1128 439.165 85.9448 439.243 86.7378 439.243 cv
87.0034 439.243 87.4937 439.243 87.4937 438.467 cv
87.4937 438.04 87.1538 438.04 86.4351 438.04 cv
85.0366 438.04 83.9771 438.04 83.9771 437.339 cv
83.9771 437.067 84.2056 436.21 84.3179 435.624 cv
84.8472 433.599 85.3394 431.534 85.8296 429.509 cv
91.4595 424.985 li
92.4419 427.326 94.8989 433.13 95.8423 435.47 cv
96.2974 436.521 96.2974 436.599 96.2974 436.833 cv
96.2974 438.001 94.6733 438.04 94.3315 438.04 cv
93.9155 438.04 93.4995 438.04 93.4995 438.816 cv
93.4995 439.243 93.9536 439.243 94.0288 439.243 cv
95.5405 439.243 97.1284 439.126 98.6401 439.126 cv
99.4722 439.126 101.512 439.243 102.344 439.243 cv
102.532 439.243 103.023 439.243 103.023 438.467 cv
103.023 438.04 102.607 438.04 102.267 438.04 cv
100.717 438.001 100.226 437.65 99.6597 436.287 cv
f
124.2 411.556 mo
124.389 411.05 124.389 410.893 124.389 410.856 cv
124.389 410.428 124.05 410.073 123.637 410.073 cv
123.375 410.073 123.113 410.194 123 410.428 cv
109.986 447.54 li
109.797 448.047 109.797 448.2 109.797 448.24 cv
109.797 448.669 110.136 449.02 110.548 449.02 cv
111.036 449.02 111.148 448.748 111.374 448.086 cv
f
153.106 416.72 mo
153.483 415.161 154.165 413.951 157.187 413.829 cv
157.375 413.829 157.83 413.792 157.83 413.055 cv
157.83 413.015 157.83 412.627 157.337 412.627 cv
156.091 412.627 154.768 412.744 153.521 412.744 cv
152.237 412.744 150.913 412.627 149.667 412.627 cv
149.44 412.627 148.987 412.627 148.987 413.404 cv
148.987 413.829 149.365 413.829 149.667 413.829 cv
151.82 413.873 152.237 414.69 152.237 415.548 cv
152.237 415.666 152.161 416.251 152.124 416.368 cv
147.892 433.714 li
139.541 413.37 li
139.238 412.669 139.2 412.627 138.332 412.627 cv
133.267 412.627 li
132.511 412.627 132.171 412.627 132.171 413.404 cv
132.171 413.829 132.511 413.829 133.23 413.829 cv
133.419 413.829 135.8 413.829 135.8 414.186 cv
130.735 435.118 li
130.358 436.678 129.714 437.925 126.654 438.043 cv
126.426 438.043 126.012 438.081 126.012 438.817 cv
126.012 439.089 126.201 439.245 126.503 439.245 cv
127.712 439.245 129.037 439.128 130.283 439.128 cv
131.569 439.128 132.928 439.245 134.176 439.245 cv
134.365 439.245 134.855 439.245 134.855 438.47 cv
134.855 438.081 134.515 438.043 134.099 438.043 cv
131.908 437.964 131.604 437.106 131.604 436.328 cv
131.604 436.056 131.642 435.859 131.754 435.432 cv
136.744 414.859 li
136.894 415.093 136.894 415.17 137.083 415.56 cv
146.492 438.503 li
146.757 439.165 146.87 439.243 147.209 439.243 cv
147.625 439.243 147.625 439.126 147.814 438.425 cv
f
165.666 438.622 mo
165.704 438.622 165.739 438.664 165.739 439.245 cv
165.739 441.728 164.708 444.09 163.084 445.912 cv
162.864 446.144 162.828 446.184 162.828 446.337 cv
162.828 446.608 163.015 446.765 163.206 446.765 cv
163.658 446.765 166.641 443.703 166.641 439.245 cv
166.641 436.772 165.735 435.186 164.225 435.186 cv
162.903 435.186 162.223 436.222 162.223 437.217 cv
162.223 438.212 162.852 439.245 164.184 439.245 cv
164.777 439.245 165.22 439.011 165.592 438.699 cv
f
208.019 411.554 mo
208.246 411.204 208.321 411.087 208.321 410.853 cv
208.321 410.423 207.979 410.07 207.564 410.07 cv
207.185 410.07 206.998 410.342 206.77 410.611 cv
204.879 413.239 202.346 414.279 199.586 414.279 cv
196.94 414.279 194.595 413.313 192.516 411.308 cv
191.797 410.651 191.002 410.07 189.794 410.07 cv
186.92 410.07 184.236 413.334 184.236 417.872 cv
184.236 422.568 186.973 425.71 189.823 425.71 cv
192.596 425.71 194.763 422.249 194.763 417.892 cv
194.763 417.349 194.763 415.52 193.923 413.497 cv
196.378 414.982 198.269 415.182 199.63 415.182 cv
202.503 415.182 204.429 413.932 204.656 413.771 cv
204.694 413.813 li
187.726 439.937 li
187.386 440.442 187.386 440.64 187.386 440.717 cv
187.386 441.146 187.764 441.5 188.143 441.5 cv
188.52 441.5 188.596 441.343 188.898 440.914 cv
208.019 411.554 li
cp
189.91 424.81 mo
189.151 424.81 186.643 424.31 186.643 417.912 cv
186.643 411.478 189.113 410.974 189.91 410.974 cv
191.923 410.974 193.86 413.825 193.86 417.872 cv
193.86 422.032 191.884 424.809 189.91 424.809 cv
189.91 424.81 li
cp
206.603 440.595 mo
205.844 440.595 203.336 440.091 203.336 433.625 cv
203.336 427.121 205.806 426.612 206.603 426.612 cv
208.618 426.612 210.554 429.496 210.554 433.585 cv
210.554 437.792 208.578 440.595 206.603 440.595 cv
cp
211.457 433.626 mo
211.457 429.12 209.214 425.712 206.515 425.712 cv
203.628 425.712 200.929 429.003 200.929 433.587 cv
200.929 438.326 203.667 441.5 206.515 441.5 cv
209.292 441.5 211.457 438.015 211.457 433.626 cv
f
243.938 430.925 mo
243.938 425.934 240.168 421.801 235.609 421.801 cv
230.899 421.801 227.245 426.052 227.245 430.925 cv
227.245 435.952 231.163 439.694 235.573 439.694 cv
240.132 439.694 243.939 435.875 243.939 430.925 cv
243.938 430.925 li
cp
235.61 438.794 mo
234 438.794 232.351 437.975 231.341 436.179 cv
230.404 434.46 230.404 432.078 230.404 430.673 cv
230.404 429.15 230.404 427.041 231.303 425.324 cv
232.316 423.526 234.075 422.705 235.573 422.705 cv
237.221 422.705 238.832 423.567 239.805 425.246 cv
240.78 426.924 240.78 429.19 240.78 430.673 cv
240.78 432.08 240.78 434.188 239.957 435.905 cv
239.132 437.663 237.484 438.794 235.612 438.794 cv
f
251.757 423.605 mo
256.026 423.605 li
256.026 422.401 li
251.605 422.401 li
251.605 417.903 li
251.605 414.489 253.418 412.626 255.082 412.626 cv
255.194 412.626 255.76 412.626 256.328 412.927 cv
255.882 413.084 255.215 413.589 255.215 414.561 cv
255.215 415.456 255.824 416.234 256.85 416.234 cv
257.954 416.234 258.524 415.442 258.524 414.494 cv
258.524 413.03 257.115 411.725 255.098 411.725 cv
252.434 411.725 249.199 413.792 249.199 417.922 cv
249.199 422.401 li
246.236 422.401 li
246.236 423.605 li
249.199 423.605 li
249.199 436.282 li
249.199 438.043 248.787 438.043 246.274 438.043 cv
246.274 439.246 li
247.748 439.206 249.523 439.128 250.583 439.128 cv
252.093 439.128 253.87 439.128 255.38 439.246 cv
255.38 438.043 li
254.595 438.043 li
251.831 438.043 251.755 437.614 251.755 436.205 cv
f
280.025 428.973 mo
279.988 428.896 279.797 428.659 279.797 428.541 cv
279.797 428.387 282.488 426.04 282.866 425.727 cv
285.251 423.734 286.843 423.654 287.637 423.617 cv
287.637 422.401 li
286.541 422.521 286.047 422.521 284.987 422.521 cv
283.624 422.521 281.274 422.441 280.745 422.401 cv
280.745 423.619 li
281.466 423.657 281.843 424.089 281.843 424.599 cv
281.843 425.383 281.314 425.853 281.009 426.127 cv
275.667 430.908 li
275.667 412.177 li
270.258 412.609 li
270.258 413.828 li
272.818 413.828 273.111 414.106 273.111 416.015 cv
273.111 436.285 li
273.111 438.039 272.708 438.039 270.258 438.039 cv
270.258 439.241 li
271.505 439.203 273.285 439.124 274.378 439.124 cv
275.512 439.124 277.023 439.164 278.535 439.241 cv
278.535 438.039 li
276.001 438.039 275.587 438.039 275.587 436.285 cv
275.587 432.272 li
278.004 430.128 li
280.916 434.26 282.502 436.442 282.502 437.146 cv
282.502 437.884 281.86 438.04 281.143 438.04 cv
281.143 439.243 li
282.2 439.203 284.429 439.126 285.223 439.126 cv
286.32 439.126 287.415 439.165 288.51 439.243 cv
288.51 438.04 li
287.105 438.04 286.275 438.04 284.834 435.969 cv
f
302.848 430.222 mo
303.675 430.222 303.791 430.222 303.791 429.32 cv
303.791 425.522 301.755 421.801 297.044 421.801 cv
292.67 421.801 289.202 425.817 289.202 430.689 cv
289.202 435.912 293.162 439.694 297.497 439.694 cv
302.093 439.694 303.791 435.354 303.791 434.611 cv
303.791 434.22 303.488 434.141 303.3 434.141 cv
302.962 434.141 302.887 434.38 302.813 434.698 cv
301.496 438.793 298.113 438.793 297.737 438.793 cv
295.857 438.793 294.353 437.606 293.489 436.146 cv
292.36 434.251 292.36 431.645 292.36 430.222 cv
302.848 430.222 li
cp
292.36 429.32 mo
292.583 423.654 295.73 422.703 297.003 422.703 cv
300.859 422.703 301.232 427.837 301.232 429.32 cv
f
311.457 426.115 mo
312.551 424.133 314.401 423.003 316.325 423.003 cv
319.079 423.003 321.382 426.427 321.382 430.821 cv
321.382 435.528 318.74 438.794 315.948 438.794 cv
314.438 438.794 313.003 438.016 311.984 436.422 cv
311.457 435.605 311.457 435.565 311.457 434.79 cv
311.457 426.115 li
cp
311.457 436.946 mo
311.647 437.575 313.235 439.695 316.109 439.695 cv
320.608 439.695 324.542 435.892 324.542 430.88 cv
324.542 425.946 320.872 422.101 316.636 422.101 cv
313.688 422.101 312.101 423.767 311.344 424.599 cv
311.344 422.101 li
305.9 422.534 li
305.9 423.755 li
308.629 423.755 308.9 423.989 308.9 425.693 cv
308.9 443.82 li
308.9 445.563 308.476 445.563 305.9 445.563 cv
305.9 446.767 li
307.184 446.729 309.148 446.649 310.13 446.649 cv
311.152 446.649 313.078 446.729 314.403 446.767 cv
314.403 445.563 li
311.872 445.563 311.457 445.563 311.457 443.817 cv
311.457 437.298 li
f
332.361 423.605 mo
337.838 423.605 li
337.838 422.401 li
332.361 422.401 li
332.361 415.334 li
331.427 415.334 li
331.39 418.489 330.27 422.606 326.612 422.759 cv
326.612 423.603 li
329.802 423.603 li
329.802 434.41 li
329.802 439.227 333.299 439.694 334.653 439.694 cv
337.323 439.694 338.377 436.915 338.377 434.409 cv
338.377 432.177 li
337.476 432.177 li
337.476 434.356 li
337.476 437.288 336.332 438.793 334.917 438.793 cv
332.361 438.793 332.361 435.214 332.361 434.544 cv
f
367.814 430.222 mo
368.64 430.222 368.754 430.222 368.754 429.32 cv
368.754 425.522 366.72 421.801 362.007 421.801 cv
357.634 421.801 354.166 425.817 354.166 430.689 cv
354.166 435.912 358.124 439.694 362.46 439.694 cv
367.059 439.694 368.754 435.354 368.754 434.611 cv
368.754 434.22 368.453 434.141 368.265 434.141 cv
367.927 434.141 367.852 434.38 367.775 434.698 cv
366.46 438.793 363.076 438.793 362.701 438.793 cv
360.821 438.793 359.316 437.606 358.453 436.146 cv
357.326 434.251 357.326 431.645 357.326 430.222 cv
367.814 430.222 li
cp
357.326 429.32 mo
357.549 423.654 360.695 422.703 361.967 422.703 cv
365.823 422.703 366.197 427.837 366.197 429.32 cv
f
376.724 422.101 mo
371.356 422.534 li
371.356 423.755 li
373.827 423.755 374.168 423.989 374.168 425.887 cv
374.168 436.3 li
374.168 438.043 373.75 438.043 371.204 438.043 cv
371.204 439.246 li
372.414 439.206 374.455 439.128 375.361 439.128 cv
376.685 439.128 378.006 439.206 379.292 439.246 cv
379.292 438.043 li
376.874 438.043 376.726 437.85 376.726 436.337 cv
376.724 422.101 li
cp
376.875 415.109 mo
376.875 413.884 375.917 413.078 374.843 413.078 cv
373.657 413.078 372.814 414.112 372.814 415.109 cv
372.814 416.142 373.657 417.137 374.843 417.137 cv
375.915 417.137 376.875 416.334 376.875 415.109 cv
f
388.905 432.478 mo
385.597 432.478 385.597 428.642 385.597 427.761 cv
385.597 426.725 385.633 425.497 386.203 424.538 cv
386.506 424.079 387.382 423.003 388.904 423.003 cv
392.21 423.003 392.21 426.84 392.21 427.724 cv
392.21 428.758 392.173 429.985 391.603 430.944 cv
391.299 431.404 390.422 432.478 388.904 432.478 cv
388.905 432.478 li
cp
385.135 432.232 mo
386.62 433.269 388.181 433.379 388.904 433.379 cv
392.443 433.379 395.07 430.704 395.07 427.724 cv
395.07 426.288 394.437 424.854 393.446 423.964 cv
394.808 422.646 396.165 422.453 396.847 422.453 cv
396.923 422.453 397.113 422.453 397.224 422.493 cv
396.809 422.646 396.621 423.073 396.621 423.538 cv
396.621 424.198 397.113 424.662 397.716 424.662 cv
398.095 424.662 398.813 424.392 398.813 423.5 cv
398.813 422.841 398.359 421.599 396.884 421.599 cv
396.127 421.599 394.463 421.873 392.875 423.503 cv
391.288 422.218 389.699 422.101 388.865 422.101 cv
385.348 422.101 382.739 424.778 382.739 427.763 cv
382.739 429.467 383.57 430.938 384.515 431.755 cv
384.024 432.336 383.343 433.614 383.343 434.972 cv
383.343 436.173 383.835 437.645 385.003 438.42 cv
382.739 439.077 381.535 440.744 381.535 442.294 cv
381.535 445.083 385.266 447.216 389.86 447.216 cv
394.306 447.216 398.227 445.235 398.227 442.205 cv
398.227 440.846 397.699 438.865 395.778 437.779 cv
393.781 436.688 391.601 436.688 389.304 436.688 cv
388.365 436.688 386.746 436.688 386.482 436.688 cv
385.278 436.532 384.488 435.321 384.488 434.07 cv
384.488 433.913 384.488 433.016 385.132 432.232 cv
385.135 432.232 li
cp
389.902 446.313 mo
386.093 446.313 383.492 444.335 383.492 442.278 cv
383.492 440.497 384.925 439.062 386.583 438.942 cv
388.806 438.942 li
392.049 438.942 396.27 438.942 396.27 442.278 cv
396.27 444.374 393.593 446.313 389.899 446.313 cv
f
413.98 430.222 mo
414.807 430.222 414.921 430.222 414.921 429.32 cv
414.921 425.522 412.885 421.801 408.174 421.801 cv
403.8 421.801 400.333 425.817 400.333 430.689 cv
400.333 435.912 404.291 439.694 408.626 439.694 cv
413.225 439.694 414.921 435.354 414.921 434.611 cv
414.921 434.22 414.62 434.141 414.432 434.141 cv
414.093 434.141 414.017 434.38 413.942 434.698 cv
412.626 438.793 409.243 438.793 408.867 438.793 cv
406.987 438.793 405.484 437.606 404.619 436.146 cv
403.492 434.251 403.492 431.645 403.492 430.222 cv
413.98 430.222 li
cp
403.492 429.32 mo
403.715 423.654 406.862 422.703 408.132 422.703 cv
411.99 422.703 412.364 427.837 412.364 429.32 cv
f
420.332 425.926 mo
420.332 436.3 li
420.332 438.043 419.907 438.043 417.332 438.043 cv
417.332 439.246 li
418.653 439.206 420.582 439.128 421.601 439.128 cv
422.584 439.128 424.547 439.206 425.833 439.246 cv
425.833 438.043 li
423.303 438.043 422.887 438.043 422.887 436.304 cv
422.887 429.19 li
422.887 425.171 425.593 423.004 428.035 423.004 cv
430.437 423.004 430.857 425.093 430.857 427.297 cv
430.857 436.304 li
430.857 438.043 430.43 438.043 427.835 438.043 cv
427.835 439.246 li
429.158 439.206 431.086 439.128 432.105 439.128 cv
433.089 439.128 435.052 439.206 436.339 439.246 cv
436.339 438.043 li
434.39 438.043 433.452 438.043 433.414 436.879 cv
433.414 429.472 li
433.414 426.137 433.414 424.936 432.247 423.537 cv
431.72 422.879 430.48 422.101 428.298 422.101 cv
425.555 422.101 423.787 423.747 422.736 426.119 cv
422.736 422.101 li
417.329 422.534 li
417.329 423.755 li
420.021 423.755 420.329 424.029 420.329 425.926 cv
f
451.891 426.229 mo
452.232 425.33 452.875 423.646 455.372 423.605 cv
455.372 422.401 li
454.501 422.48 453.405 422.521 452.535 422.521 cv
451.627 422.521 449.886 422.441 449.244 422.401 cv
449.244 423.605 li
450.643 423.646 451.058 424.545 451.058 425.288 cv
451.058 425.64 450.983 425.797 450.831 426.228 cv
446.971 436.208 li
442.735 425.288 li
442.507 424.779 442.507 424.702 442.507 424.624 cv
442.507 423.605 443.983 423.605 444.663 423.605 cv
444.663 422.401 li
443.527 422.441 441.41 422.521 440.539 422.521 cv
439.517 422.521 438.003 422.48 436.869 422.401 cv
436.869 423.605 li
439.252 423.605 439.405 423.842 439.896 425.056 cv
445.343 438.951 li
445.571 439.498 445.648 439.695 446.14 439.695 cv
446.632 439.695 446.783 439.345 446.936 438.951 cv
f
469.621 430.222 mo
470.448 430.222 470.562 430.222 470.562 429.32 cv
470.562 425.522 468.526 421.801 463.815 421.801 cv
459.441 421.801 455.974 425.817 455.974 430.689 cv
455.974 435.912 459.931 439.694 464.267 439.694 cv
468.866 439.694 470.562 435.354 470.562 434.611 cv
470.562 434.22 470.26 434.141 470.072 434.141 cv
469.734 434.141 469.658 434.38 469.583 434.698 cv
468.267 438.793 464.883 438.793 464.507 438.793 cv
462.627 438.793 461.125 437.606 460.259 436.146 cv
459.13 434.251 459.13 431.645 459.13 430.222 cv
469.621 430.222 li
cp
459.13 429.32 mo
459.356 423.654 462.501 422.703 463.775 422.703 cv
467.629 422.703 468.004 427.837 468.004 429.32 cv
f
485.331 424.208 mo
483.726 424.326 483.491 425.501 483.491 426.013 cv
483.491 427.03 484.167 427.813 485.221 427.813 cv
486.198 427.813 486.95 427.151 486.95 425.979 cv
486.95 423.326 484.077 421.801 481.166 421.801 cv
476.441 421.801 472.962 426.013 472.962 430.847 cv
472.962 435.835 476.726 439.694 481.135 439.694 cv
486.226 439.694 487.445 435.001 487.445 434.611 cv
487.445 434.22 487.062 434.22 486.95 434.22 cv
486.609 434.22 486.533 434.377 486.458 434.617 cv
485.355 438.314 482.886 438.793 481.48 438.793 cv
479.466 438.793 476.125 437.101 476.125 430.768 cv
476.125 424.356 479.242 422.702 481.259 422.702 cv
481.601 422.702 483.997 422.743 485.331 424.205 cv
f
495.072 423.605 mo
500.547 423.605 li
500.547 422.401 li
495.072 422.401 li
495.072 415.334 li
494.138 415.334 li
494.101 418.489 492.98 422.606 489.323 422.759 cv
489.323 423.603 li
492.514 423.603 li
492.514 434.41 li
492.514 439.227 496.011 439.694 497.366 439.694 cv
500.033 439.694 501.089 436.915 501.089 434.409 cv
501.089 432.177 li
500.187 432.177 li
500.187 434.356 li
500.187 437.288 499.041 438.793 497.629 438.793 cv
495.072 438.793 495.072 435.214 495.072 434.544 cv
f
521.087 430.925 mo
521.087 425.934 517.318 421.801 512.758 421.801 cv
508.048 421.801 504.394 426.052 504.394 430.925 cv
504.394 435.952 508.313 439.694 512.723 439.694 cv
517.281 439.694 521.089 435.875 521.089 430.925 cv
521.087 430.925 li
cp
512.759 438.794 mo
511.15 438.794 509.501 437.975 508.492 436.179 cv
507.554 434.46 507.554 432.078 507.554 430.673 cv
507.554 429.15 507.554 427.041 508.454 425.324 cv
509.466 423.526 511.224 422.705 512.723 422.705 cv
514.371 422.705 515.982 423.567 516.955 425.246 cv
517.929 426.924 517.929 429.19 517.929 430.673 cv
517.929 432.08 517.929 434.188 517.107 435.905 cv
516.282 437.663 514.634 438.794 512.761 438.794 cv
f
528.607 436.226 mo
528.607 430.272 li
528.607 426.444 530.204 423.003 533.096 423.003 cv
533.362 423.003 533.438 423.003 533.515 423.003 cv
533.404 423.04 532.667 423.497 532.667 424.486 cv
532.667 425.548 533.476 426.119 534.321 426.119 cv
535.013 426.119 535.978 425.658 535.978 424.437 cv
535.978 423.212 534.797 422.101 533.164 422.101 cv
530.388 422.101 529.018 424.667 528.485 426.314 cv
528.485 422.101 li
523.2 422.534 li
523.2 423.755 li
525.759 423.755 526.05 424.029 526.05 425.926 cv
526.05 436.302 li
526.05 438.045 525.648 438.045 523.2 438.045 cv
523.2 439.247 li
524.672 439.21 526.449 439.13 527.508 439.13 cv
529.02 439.13 530.794 439.13 532.306 439.247 cv
532.306 438.045 li
531.504 438.045 li
528.683 438.045 528.607 437.618 528.607 436.229 cv
f
544.832 431.68 mo
545.661 431.837 548.757 432.458 548.757 435.256 cv
548.757 437.239 547.435 438.794 544.492 438.794 cv
541.323 438.794 539.964 436.58 539.249 433.284 cv
539.134 432.778 539.098 432.623 538.721 432.623 cv
538.23 432.623 538.23 432.899 538.23 433.602 cv
538.23 438.758 li
538.23 439.421 538.23 439.694 538.642 439.694 cv
538.833 439.694 538.871 439.655 539.585 438.904 cv
539.662 438.825 539.662 438.747 540.34 437.996 cv
542 439.653 543.697 439.694 544.489 439.694 cv
548.825 439.694 550.562 437.083 550.562 434.278 cv
550.562 432.215 549.426 431.047 548.975 430.579 cv
547.728 429.332 546.258 429.021 544.674 428.71 cv
542.56 428.281 540.034 427.774 540.034 425.516 cv
540.034 424.151 541.018 422.551 544.275 422.551 cv
548.443 422.551 548.632 426.044 548.707 427.247 cv
548.746 427.597 549.085 427.597 549.16 427.597 cv
549.655 427.597 549.655 427.402 549.655 426.661 cv
549.655 422.732 li
549.655 422.072 549.655 421.798 549.239 421.798 cv
549.048 421.798 548.975 421.798 548.483 422.267 cv
548.371 422.424 547.992 422.773 547.838 422.891 cv
546.402 421.798 544.849 421.798 544.281 421.798 cv
539.666 421.798 538.226 424.407 538.226 426.584 cv
538.226 427.946 538.828 429.033 539.848 429.89 cv
541.055 430.901 542.111 431.134 544.827 431.677 cv
f
grestore
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
/CKODAQ+Helvetica*1 uf/CKODAQ+Helvetica uf/Helvetica ufAdobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnduserdict /AI9_read_buffer 256 string putuserdict begin/ai9_skip_data{	mark	{		currentfile AI9_read_buffer { readline } stopped		{		}		{			not			{				exit			} if			(%AI9_PrivateDataEnd) eq			{				exit			} if		} ifelse	} loop	cleartomark} defenduserdict /ai9_skip_data get exec%AI9_PrivateDataBegin%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 13.0%%AI8_CreatorVersion: 13.0.0%%For: (Gabriel Peyr\616) ()%%Title: (sin-cpxity20-error-log.eps)%%CreationDate: 2/21/11 10:34 PM%AI9_DataStream%Gb"-6l$D@#dO>%L!;?Ib80AK5KX!<hAtFe'd%,gi8a$^.$u>=>J"1:=.`nu,H,'jSoR>-^H9I1:>cs5^V,C;b-,no`m\nTJFl&&4%J$2AojI@4?eYjf4d@@:-ipluuATK!28=>u_l3K)=b&RtXk;/!+U,S<qMFu62j_fM=ea*^jqqZR>0IV(uh>UeFH;])[Ksg,mZeb'K%.p?c@lCT&<[G)QCW;U?*YNE&hYAoW+7_N-?eSM`]$4"-)C9-0lG5GXS@FWLl:aR^=`DN\l3$!F\2Z)g=N]IlTcaYG`"&tEU./lu!%%m'CWW6m^t2/5#Z^<km@4NKbImoRcm&@ESlL;mNe(&<$T7j\(?ipj>MhAQh"[:-,jq3<4]YFAn4G&>mM]TY4k\u9*'R=%2r#sU"d%e.dheH7ks3W'f-0,GXN2l5!)a*7o4.h,H2ARa71!(pf]][@7*s2V20(@<_3,>'o,+'/gU%_lM@<:r=#8b34_>]$/B0P^H4RcS%fU%B)eaW!Y48UQit5s\']$P[Tck6m2@[2Zs..7"Q6lBIr>gZgiV9q@)[HAOK:sN4-"*+2u<[bS,%H_CNckm\%(:1W.@fO2kWd!4&K/+%kG%dB&lj$I6]Yu>781](XVq3M^d(aA^;S>p\"31rn#amH<O)Jn?GG#u?("cg#5Q&WcPYI;-N0Q9'")pCCj)mP,M=Q;0KbM_3Op=:%Y!8#XF_WL9Q@eTu>1>f[.3c=dP\\1j3pJ`TK`1&JUW(!'+CYu[VlK6clgSVWn6%6g;H8FcWX;O%'qVETH!7>egZ0ql#:Nl5?b-_D%\dhQJ?EI+qV?nrR#r!_&#B-(Y5a`ra_)M,lW)<qp8gS_g<.ZKo'#7JIn?cBLFa1N%L$-u9H&'n:e<e[?:aAiq:&8*`M?Q0E$JGWT%!!R56/LA`97IUU;cm&7<G#M.tGG.b#$,<-%n-PHfT*T%B&UZpWi@gE^Rt)jE-D:rHcn>(rQtdAYB`C?B$',B/$('S6]Lc:%C/=+i%l:.^>c"S7s#kAM!TRH;9Qq.aN<g.0la5AU962P=+'<[F@TmcD:^S#_Fs5B0k*(o-&TV-`&8U?Li$/mD.%htuO5g?;+cor]I,?tI%%_DfURdW/64W&^gnTh@)grZVpG+2C/-W+86\i,-nWneBd_T)_=@)qmf,6JdDlJ:Z9?i`*5JfHHb0'Spj0)5a]+V%%07,_a;@*>c(Y%$/\>A#hKAg_DeDRm1J&1;KmYce-U<h5']p&Od_Jr8YhdH3T1F`:rWHjr3F^FhMK28BOrEHnqkIPO_uZC9`Ese-:;mNZX0M6B)M]e%U7?nG))l57BmhF9JsX,!b7adZIu.3jXac3pT!5ujT;Ib.lnA/NM<AoTK`*4snp0eqr?_IPKD[V99&$TL'aj".qb-o'MrZho9E%B>%jYA8nJ'#GtL&>P4aZmoH8+\h6*IO$!-,8[tne\]0d7RTF>*e8b[9utWq(hlm.6.Q[/*@M2PrpK]^P_LiIR@fMbsnLfPTU8('Ye4B%kN#4KC_ho);?<'C?[s)e6,0/NJnHQ^WoG#UJ+RZY:f<4M%QP3SX[M)AeY5dp-qaiLWKgF^;F)V7=`?P,/>r^16b)V!1rI0d6j:uH%hCB0H3U8iWJl^hh/h(2l@^R24k9[12L@ktJbIA9BiKjEHVQGKXQ6hO!)n88mZQP,@>n))[\-]AJ2o;Z3HVeeO?'Wj^QZ60U/lSm]%$\W/grC@<pgp833&R'kBO#`n,\>D:a]Zf<,QG@R[*^gB^Oo,ag/R,m1<M83Y-<;d_k7VYO]IfBsT6,qJQHQYT'XQ?iN&pBL;Y+.Y%80Gtb80kR&8?,X_SBP-#JP5cp$1.qW>EXarj8)fU`0)#ON['r<fLW+on2>,6a>j/h3(.LRqkHi1#k%a7neQ,P7f"31QS4Qm_HL)?%iENJ'l<n$W/4h^$3IM!ESL]ln7'PWgp`3S!&8gW+KO73-.d%-=A]n^$_c&0trkZ[tft;iY'?mDI8lUfV<V2$+3CVg1rG0.WgaA8"%8Os`n]1V@=iQ4'cjbr+P1scJ(o:0O:",=5Q'T"HHqSomWP-b"m7.J&06Y1M\QO8]+3D1kNWhjtJp(N)D-EG1g3lr-_j[1Y=aUFFS%Wss*@nqYed8.=GkP6VIV#JF"d@>kCL;Y!Y*1(&hBA%X;RCu4:kBsgqSU7V`;ZHJo[d+:9a"tc7nkia4%pamM-</+7A,o+S1.[:'.%)e4^Pn):OlhH!1jnHcN_X\fR.l0KST.:pq3ZGH0\Z##D<M855#C2l6%W!SSS1+Oc;%S/),.L#.gU0`p1"R0(9*,N84>SWu;F9AJj%3g3EuYQ,B3JuE+KV%kC*$VQoQ27Z?T!&\7aV<'8QCe9[;dhrZZbEKCA8,0?f=OMbf>LmmGQfr;AVmqMeT$\f5/QC:@=Rn/7loM*l%NUTju;X"=e=n5EjXguSBZA.+;@^D;NoiYV1k%^0g%up$-d2N3\eVJ+\f^Ph*n7<*)_Wjb'VF'%!l"8IAKf?(ol;V)h*8o7-*?3WX%/3nVV#ZS!jG:i&HDlOG@DeZCZFk#fH#kJeb"?6\c]FM@Ne.q7edA2(LLS%Q;M!$,Z:8s'+Z"+Pgb0gKobnWPMq>o>,aJ-UXed)aH%hPd7PIs%<AmsLP1P0sDGiM]n#W)d=OK^rD=g)*sL"[[cB#A?$:;8&f9M<.rK.VM7CeK17i2nZ8NFNagS?'XYVgk%"k!MpBb_mf\+%U`F==<$+c#n#2Q'oEoN("lQIg[<jH#k8au3F'.uAMoA?E:.$<c-_AA[g9A&.Rhp@M=f`uNbI8UA__Z8^q*1F2^&OukZU!^BM;R=M%%XO%J71k:"hqg3RCdBlqrhV<lNG=,;>g<q.J_CmF2(J/j:Z=/):95"Aq9%?*,JF5NTs0"I\q+%FQF=g%.s],)%#FQ[;.'0h6<Z7N%l:GSNcqd'ea9o>.!#fW`RC:brq/ef#Cjg'q/\&e5i<O&8K#)dsKViTbEM\mDY-UaS8+a@:0pu34KH@s'kn1U>fs4Ueh,AX<`[)<M%%P!F4$oc!oi.sQE:TRkZW5$?]P0W%32M-o^+R)#2qV7AMR-4r*-[(!_Uq]K,M*/"kpZtJ>g*c@r4=@g6[4(&nd9V4,8EJVUNQgg@%G>4(5db1#@E5W9pC^lrh-nn8tXu5T-<2gq(/K[hA'+\9O/K4b$=Wp70Yq9)$:*Qel(t<FKdR%nW2FYa9EX&Y0Csk&=aJ9o[\n]1+%V(F"!8G+*Vj'+sOcl%C:pRE;0r)9X;3Ee'#-IPM`R<\,9q'e^\/1o!uOJc4+F(>D]01)Es6D0/D;4S4;UAkn\<!s7d;Z,*j61#tA%#a%*(T3=e(Rj6;0c6Sj6g/3a0)k!<k[2/;h.;i/ogf#-=)e;Xrnks$D_hpOCbdns:1oA.a:Xu+AMmf3q2h<.g)Qa*e7O3r,`AA)C%,uf@r(;(rY<-'gSL<#ZND1/'O]iHV&<6FH-,8ua=4/##G8#1iZS*qqXglPj9j\1"7h84Jtl";4'[`*,<n!`N@1<+"ND=1C1BBY;i%`Xe1Y.Z6\uGT!A7!TaF6.r5ntq5'7sqLmCik;[gToGNiD2@IsI[5E,m[`/'/l"Vse;5l2c<&a@mOm5NpHD2^]a$e29Z;td+hX]s3%Piq`R9:BSPnbSuqXBr&1e8A^kJjIRZ4'MV&=MWLTY>WV@HpOR!X_7]k%7fFJ8uD^UB&m0qqZY05"1k4MhX@nbn)To8*C%)L%S+4R%@mi2\hkTVD3G<QlgWc[rBA`To^RDAdQRt$tbs$G/a;4X9EOJhb2HoKk/R,4)8&Js4FP(=eRb9J((<PFcDq#%`%:dT4lE,M`o_$dQ%r]==o0]`0N7UE"6S+t6![RjeBEj%Cg='GfUMnl\ZR$J31_<<,s/qNC&fIdE`[:-\C.O,!U,+p.b)Te"UfLG9,^"L^i:^*?5C`W%-%3uBmQD.pn]=bl\*m-CV+D@X"d=s#`NqoGKj^1s4YCE%8mNu,VE[RR^^mJYjZ]mgHs_g\`8r2TESZ_S'h\P/n_Cc(%TKhD&Td&mgA%,'Hhe4W8^U3[4hss8Lj@AA:TCEPr#Ns*":![jFGll87Js=)CbU[G_>oW1e6iqY-pKJ4;H.s6=-as/rhH?hc.7Y#`6e7PED4]sYJN%F5>Ak+/,iTIW^G5k1c!r,+N>TgT;O(I*eqES(Rl-N.N?let5RC$Sp.ETIONB?hb-IAAhr9Pl;dbnLmp<$6-+^=s+qGdqkW5gY^la%2:A7b;88$)MFWP0Du:!<Me(^KW54dE+Ni@YU=3t0JDe.Rj6X03B\F3>57m&JUH9A:&W($+S;:4UmfamQ't\K$_O:R)I_^m-JIQ]d%JBeGI)2F9]qi!eq&;V8HbmesJJ=[Yf>$:91dLfioH6;4]h]uU;3Z\iC8<XW+aaT10n$W/YX'HYRd5^K9R\/8Z%D<RgY2K6b\\mUr%_<@r1*^)q&adrsCVCJ-_(\ZC\8"]/X/_npCa"/ad1'"WGiqe3K6Fr5PM-fpHc0N,kc,cZ]bLR5bb'>k&=OI$fe_95BSo&W,cqkSY%bmc@?4pF:KYuu\hKc^o[OC=ZQEB\3hg5X\<>8FX,$h&#UpA3UbW/e5M$Xk$,5""NC1OJiGI'5s`ZC/n15n@HP.\$6MXbU6X[oEgb%aHi=_@4eM#RO+nGJGlD!H#H.e9`j62'&D`O^V=*emH6%rlY(R(Yj`O8oGmN/m)=dNp>CetI,5p<7sk4&W-?U6lUDM@7ea;.4g,;Z%U;]#/<eFr4.O.0Qj:,(7h"n'CatgA*0,]T7\e"[ShP4_e^QDtn03\VHgXW5[ClV#-<JTrfrFiH#)LOrV]A9o$5Na9'RT;-q"o/*-%)X$mLc<5pAg.fZj&1J@j_uDbI#hkmPHMHBV]i7@_%%`kkFY<e;cYZ;8f`]6nm979HhT%kFh[j7R7s8\;`MAVH3=!f-D`=m!7M`tp%G\lL(>IXXOYmm%#3e'$Ah&]Wh]*-ALd3#cF0*jFW'@N6W1d^\VAo-g_ojDECo]i4&CZ=Uh5H5Rk.YJYJCRnWnMT]k$TRN"#,(8TQ%8YjR"RKKtDX1l!L@%Cto-a3Vjpc$XpOmGpM=Z,tEF<+A\dm^(<VmW^?1`a\E[D%_(VGF&P)>a@r6FZe_dC[0@O$iR$2_+Z*</[>9%++Hl0"tI<u`,Kp6VC1c`Ld[B2Im\]KBLZQ)qEoAd5=ATK6ZgjC6s'7QFE;qfY5X4?k5Puuit'Nprs2ojcO;&Yc\s(.cO;#Xc\s%-%cO:uWc\s",cO:rfccl.GT:,,l5;V&`In!)!In!)!In!)!In!)!In!)!In!)!s2VOs,:]gTg;@9-#h.i^q!YA?$4qnb?8ElR.V87b%TrBgH,396';'a8\DHF1V]%4/_Xg(f[]KkW-NV*\*C[L8'fYhnsIgoah0sM0HqsHZ\=2N^;4`Xl9lTrWeig:c3FF4n7RY_'BnUP2-%4<i_f5kG"Y`<_T&k_%Zj.o!Jt$WGASqAW!1r+b2HHEI3+q0dI-I+iEo4WeQ0'EA&HGL5BXg2P\_]oIil5nXJD!\O'A[Jr$2k('(V%WdhD0NIJ3$@$G?u!--#-$6R1#+]neA'?cr_o3\p)?iuCrX!*/HSY1J_g*6q4jT?U7%N;5Jbc8e#n`tZQGEDf>L1!]e>Q8Lt_Jk5r%VZ1JE?<]CY=:W_:,TKn1i@/Z_q"F7)F6``B3?\WJ,#nGD[F]RXN8TcaeNZ1Cl_D;#qt3_op&@TeD#LQaN<@PsUAW?ZiVK2O-4nCH%BS_?Wa+&JATXt%;<TX78;*&t!f73=,r.g'DT\ZXJ:Y3Rr>TOd^7P:.CCt@>>D>dP:1&M=+_\V1&<Pk2:Art=o[T+DDfZb&+=VUGQ%[L5ZCZ.f_$ctdi]B%>r(gQ7qK&Z0:1GQ)D'fo\%"HLKab1sV_2%QtV@9On&3e!RoM/#IftpTD*&I_CTa!rCsK5FSGJF;;NY_cd/1%6aP@]S?X,n%4hDh7[uGGr:8l>ZdB\>7G2*4&GE^"[-HjLMQLh?b>C@DJbR_bXV5]CrTJOA3G8ntbj2Q7(.;5uD`1u6!;h7'UYW\R%r>n@-/.%Vi?KdE(YY-c5D#SbuN4Rk`oqM+3=K)7[_?SM--RA,rYi#DT6V3RhX"snBILUJ-Y5QnP&%hf(CTUn.e=1=WEg3jgg-Y_=%%@baHfLptnKOFpBM/%a]JJgUb%R-VR(jG:13/GRs6m2?P%W^Z.)kue3qZq_POotO5B\5ZP_<;WG]k2B=YB:&_)A:9jh["/$&KS7X%6WI;BVrftk>(?>$Xn<Whl#"?N)7=N"()1p<>3'a^VAT<:$AWdUkTjj=1^Z"HZ8SNFk_O:0bL]9CUQn;a=F4nm>Jn5C?DCuj)EGjG%cMOR6hMe%MHaN+Wkt/9q_Hs@l&1$582Y\!O2!B(;!`Z;XZD9NW41WaSALqW=.RC3'gUa(t&1riq?!Cdn!cCJS[2p4rK@\YQ?"6bX%qf:&qH-Rl)WnH74%2"qe]Cf>HoZ."spR9rTfE9cLHr/rKq8_+FOTAJY#dL_mm5LICGD2dEe*bTQ=QZ+.kq[r-D0<(Okmm2HYQ,E\%ktWO^3#bb&@b;<,Z]_00/pV<"B<k,p8RH%IM..t*MTMQ-#kT0Sa9>.gD/Vi<#l;?16c_p@TI+)?,.rTJ?$p?K$fl!_r$j6.#d?N,%gotFW1;Dh63R92W(7JA/Hr=jE\&PaiN:8.K'6'8jI+dBRf4Thkdb\/E.YJu%q;$H>[YFD`.APN"WXH2]Hinh<NZD,5m[Cp>J$&AK%A)R4=9$nL&*`A$#c<Jm)o;O#SiQXjdm4AG)$DE$+h-OdI54\bA5SL?DRTFmQ+UMc=XE=eV]@J-5\QXc=k%jA7-#]>_VU=i)hn$J6%k3fcG"r(PhngFQdG`Y39+"XH&!p,0!$hE2g9YW4h*B[$/+Q#UY+1QX+K66q9@8R6E&aRdcA&$D5A<;M)A:U'SDN83\C/#0Brfl_U%)/:JL^]+6)-d2U7LEFci!5j/393q=V"dfKsEjas4WI?MB6#`>laIBn?I./CYDS@92dYPX:*A."iImIoR[2""[3A$g)Y:e>C+,I+V%-R/Wt>J?df.8lnc]"&E]qjB,0G#60SND-h]SdDL2"nNPnR<V(.OO;RR\AlDa'i8r[e8*\9%M2GF;st-H=GgL@Xg[WhpaZ+@/Ei.G%_:j%e*7Un?dAtDXJN:<['4rqEV6*Y/'j&$C=0ipGg0Ru;Ws=5uRdXo&r%"`%TLq:5]_EEGe!<;YenC>^4!)o=8$)g6EWQ$98$irY%9t'F7W'uL)l_ce+i>/AE]=iN7%)=!Yknp'JRO!D,]H01cM6\1FlCemnL9>Y[eGiuiY7#*8(.L?U8SR02F-VU]BYGZ0\2Hato4R(J%a4^:7AFqN$\41^XkVCmhnKnE"HS$!<i\iq'iU4//,R;t1]"@GBL2AuF@)%On:h,k!Y?C@rO2AQYCB3POS^<Ye2*rN8h.FF\4j;7u%dXm+ga4d7G+LC;0k?7r/flI0M/qFb=3PUsq)1I3M:d)qU.=erg$F=093G?*M`n9qaLcb=\MB;ZfOU]A<E$3$Oi3bH?WWd&U!$s=-%CdaZ)WU\U+#$JS=Ba4iKi?\<Y.C%V4B6"EU!"es4]oR(25?9>Y#7AKoG[*Ej"KGnBef/OC=E"<7!M4'I`pSR%%>3;(JV$?oi'm50%eZW7*3!0cP_l`urVnXn\5qtuA4E#/oNC=;9/S$*?#A=nR)go)?8.mraOoSmO:#6sKJT-.u%Zm?%CW!"c[h$*SOA3gdRc>W,^VIhu%GDk-4;WjoHTL1V!!qYW^8/BAD'&[6XWcW2fjN:1nU4>,/SU8JVG&CZn;Dr['RbIQSWpia12D<W]qn\!b%6rKAGHQ_?nsd2a\\EC"%<@bgUpY5C?-+.lpJ&Dt\X%T_iak_@j*_Y$>kHVBl/]CW"RkZA(Fe?UJEj8O565q>*'3(+bVm^[?ZE4lOe^,E1YD:B1QYJJZ6^8SV%WO2]\/G8np[E`+Up@i@mjlE.489_,68A+MgZuDAf00C3hp@XtSom0-?gW^3e#O(Qm05:IJ]OV[=,8J2"P*/Im,YRn1dbEX)=Q/W2%qPLi,d=0P&*tS3rAPe;]*YO7TQG)bS=J?sM@V]%,\$7f#9o>c3IUC.HMYA#G/\sA?94,QFU:a\)=hr;72YWPe$On#mI]\j"Q0j8\%ILq>lTM0N:lmY#SqbQG=?<_.qhj=/-D%(=Z5MO2?PguoBAIbiI(V`mm0+nT`RbZj?%QtM_pOAH/G;JNh0hQ<O`KjXs@%pj!nuC_?%oVqlVq;]VQkgiDpHaP50U62rN[f<-fSGNoS?YmJh+2!GJ`Z>AC\+f&l6mM5QENupW]j?"IoP//VUTSJ1&ChR5D]__qhF+dK#H:nV%cS/3Q?A,a><.>i[*HgDtMl9U'X7,ou>un?0MAK.>08OF3g=trNHS`2.IA<%0?fU?=XXg^Of?2^V7J(t=7Hd[XJ"-DP6mH[sP-5U5%Y<MZ0Q#AC0PO;c-IVH^Dc'gT=hYs2bd7>7@ePE$$7829bBYFFVaEQK/:FiK(htlQTMs+QR=0,l*TZ:;Sh;;'jnq/ku/U<uBB]#>+%&m_HeEaD-G("0-Q(I]DMl\k;'Ok]CLHN,Nr]@YZk7/*"UQB.LW2\FABQ1chh>JFM#?XAY%8?^1$T:]-(TNOeq<d)po+M,^O+tA94%rpppHX8/>Xo_@A:QUUOq/KqJXT?Cad]SUA67HsU5,*/Z^a]_(C(.Q=6IGOB<HId!%q[u'7I.u%j;4p7s5,P-Vj6r*hd3J>K\6@^F%GnReSBH?j\]fOQE?gq=be^hdHF=TMBhF*FV(9\\'WuIWuDkFHB!`;Y1,(#em554u2Sk))sG)AIO/#aW&7_e"UoHAY]KLVeF>CS;2%*uB?]rm[cO[?m+:dF4T9kBd%_c%njK*8.6f]4YKFh<%Jlh2gcVoMR\%HP<O<aH?87h=0F>X0)@"l.Vk#oMnTmK-k04<`DDm[P6KX%c8=kcO]mouBGqOQD;iR-D'cog.X/L\kZ2&\C"BojBoD2Q\LJ/M^HF3^@A6Ba?9W>.LJ&o7Q.*c:+M6c:Kr8^.VC;tn?EI1UB*cnU%6m_4CRep3$Ub&(40!1J#?l%d&@5G<&S3@#%XIH.0?eDsIha^'F@fk&F;EXi\Lot)qKU,*e^Um^8:I96fk4mTN?o5q&roiA+c*GPQ%@r(iS;q=%65#4\l0t$Q%ZY!b"F"N4Qc$$8SrO/$Y,@NQGq)h*s7:l(l6Cuo[1=Iof>LN&EWo3&X"okeO*FJ5JISU@"ET9UaH\uVV%kp5u?n9\K(cKYY$ISZT4X4$1XkNQJ[]"21+=WI$XSrp1":D/+pkG4U"GK0M/ZKD%Z=PeAhV3CYMgRHh2GqKR`%9[JUmqY"6:QM=o%94l$/kp`@t6a)aPStAXdMtp_/:Oc$PmN,DWT)Qr,^OEqo.EC5i:$LnS6hPeQ=*iGi9qS?0I6"W[PS9WDNn"cJq4aDS]`#Di(RLbo%IS[0.UPjgnT;V?7C<Pk>ddh\?8BU\AO-[JOk+4Wc)k4_Mn#+=d4LUD84LI/'I$qpeo6DLFg#(W*cX"+X)7F%Eg>Qu=VcrY(C/]Dm%&=tY;-%DaL2ngoTkG>T:95U=S?!rZ#h+KT-;oS1_P\@8fX^7N=bpkrI7:4XTXRR;kNZ?.UE%1DQjbN."Fnq`:R6bC^[8bB"9;Q+k%."u!?l<,dS`7n*-Q-eP>0<-PT*@9"V9s=N:chlB/UU,Q"aL`%-GE?ingU(8T`GB>U22Of\63TA2lfSahh-WuZ[a*L'ZZC<,.;PD$%[`3A1X7=G:Q`4blW-3[R:NW;aaSHO7Wn52ta1Ta-'cG#(Xco1qd?aj-HYXru['@9VLl#<dG^lrh)VAn,"U8ad+3,=bk[*#[hLu).%<4c=C7/N_q3THM$D6ei2+Dj;1OZ/,ELS*Ek[JNHIU0&dQ#(J(.D7(4>Hj=#Qi&`dnLc-tbHertR(!Z7bGQ("H*q<epfH\]D;&GQ6%faClb0!;*(o(\\#kNa;M2AdDTqgOX\cf7h=[H'?!,MGIEet$5%nG'Me>9+k_IH@_E8Up-5M![F$>UX7<Lu4KH2fdXOGiW.Y.mDI(%g6OCk%\U>m_J\,kb?_%ff^`+U]P7N=LUhXLImA5Wi!j@4Qj_HA9RPnN#,:`"G:^/2GB8dn0#t)Tg)XgE$Sa[Fr)f78^BT$iF6s;:%Q0eqW8=su1GDOL>eM1h?P/*65JT_;2<OnLqBU7]JJHU!`3abr30dX)&2NV#i>+8-QHs$:lnX9id?9HD$(^,3F!DLNU<r9*smb,>G%=E+-]EP%X*_*&')p;siDHQK<;p(;e1[#`o<Q;H8*m),pOrO7nunnH?Xj-UR3/0.(0,@SMR[CpeARp<7d>Zkp[OsRf`$hmS??JrF<%Us=FWORl@Pc/=Od30Xqj:o<PV4nn34K7Md(+4Z!U0q[=$5Vr*n'R#`^W[G?9V:(iWpZ\A*.UD_`\fH9&]Yd$:&)L<8hT#KC[bn#/%NfQ]ZG3#FY.@We=0kf@r@L-"-c1B0MFt^DZoB,T"q3P0`a=P>AI[RRc>IQgsUupV,a5d\M8huPMk8^1AbPC#BZ='^p\uD27fOE0l%P;24QJ!QCh_jd_R3Lh?.s2G`*lX1oI:/p#I_m'T[k8JQJb4e<ac>V34+TQXmNIC90HlfC4>ONhSCSc]F=Oa@nY>Oi2[lYW%^/]Fk%`-.2Pe39cGF<F3m'3:CnHDQ#PrE<3I.qKcM)L6MbAVKr'$0i)hRmaA!?1M_%K6;$5eUq%J8&U0%0?POu,O=5M;6,T'''`cl`5D4c%@o'6ZXmAht4ZUR^V\pGoXKC)BLajjm#P6;\Y-dL.`h`Jg(O`@&\dj3Xia[?)F",J?=:ET,6mqG_1[.5ecc2R+X?GGHW0e#M0s]]]%gT^>pj!=u!F$c:tOg$/BaPKt3n)hPC&$'SoNkMPB*p1Hs6).0*81Uj^i\8:;Do$EnMK_jK=fc+:S+h?8qL"f!QU0q#61;_Vb^QdA%*FT/\VlbIfoXQZR;7R3Q-qBI\b+>)*0R)$CNMC!72n%6QOuj>eI2m0M9*oV$3>4H4i7A_tV;N=H5#lT',dc1?.Y?@u<+V"(#ZVI*%W/.p"3JJnkL:udgY(,1aN%d[0[g0ct2pO4t9:@EMNQ&qaA'M=U=?mhUkP##*!jtXF!^8mZjk$.=o=&/@e;)o]q0asBm'(<L0U3P/%cCt<;[RB$YF&N(R%g3%ihV\'Eh_;GN<b%?h`P5;W[R-)*H<]seQ:-!HY82Uhk93eHideDL,X9>ia!X):`nSi.8Z&tm[Bn&?=VD9b%+1DJWKrjgdL:Dk=c68d!&+Hbi4MXPW#C5-8UJ'n#qSGRd#YADTiTi25cO1PPV/taY9EGCX+sc29ZD_L.MU41tm"Z"5Hl]4K\(;u@%Kf>O6#B<bfDe[e4cQT$'gLUiRH@N4)M0!E>grF%CgQ<"::5qG+g]uJp)].fR<ImrYjtJJq_b9Qp&8Mi9Bkt5]T+;*(>2?`GNsR.B%o\bRe0rB:f1WR]`EE"#?*a#$gQ7r:\M:3S[.8;i8p5YXViH4*kk@Q5)T%/C4hE)>s5CSkFF>Oo(j>#i12l8lK_0SX5Or\C?"`VCl%4)Tar)TE$rSL7Xg6l1\9CY"h6cA?H*4QNq^3D4&id9^):Q=A7N&h6P!L:\gR@Bh*8?-Qf+@dj6<GIFiQULE1_J1ND2l4n1/o.1HY%aTnF\WA&#H:c^U5<h\-.M%C:A$%Z`3er`nJ&bomOAitSim>E8'T*3KoA?gW2hK.a\:h5tCOh&BhaeZ="iikE2Y43FJ4B<:1.XSa8%]5G99@>O.Pl4pPej1!%k@mg;!'lbO7SG>`6RPg!`NV=1K]&]$+7RLbQh'k4M&0\TrR>48D'iqA8&+;B_7RP6`C:)(7'dSHKArR!5%B(2eF4SE2,hHpqM+8bK^&)h<Aq(ER\(`bBG2PTc0@dOojaa1MjAEi3NS(aSlAD%#<=$!D`IM*QHV?/knId&QPBqncL^$OPqi:F%-%S%;F!R#W#u!*d<%+qDVkTs9p:h/0BZ-*d!ECA-61WXi.9?>H`pD#2ruF>2VHQnM/ZGo?bgHHj""aWCo<0`H;D1@9LpLas_!iX'e,%,GFXdgE.5BOupZI7Q._Xoa7.2pJQ5gFQg!`_X[BEp,r]G%q.)\b2WRGCSGJXVW'ZV,%MAApHC<65W66&s!BD[jtVeE(/F!IM]k2k%N7[U-RDTLYN+]F]*>_KenAl9fLAl6;lEI\3Gk)!DTf!Xh-do0.E'9=lp=O2f+f`WDd!+difOJah'\c1=g]$l!lru+J/"(DB^\W\T%KpcH$$l/&o\VtEbb]dn#mBmG^Qp/&FkUjoT05naTW]l=9NeOW!,?H%sdg9"m,8$&_nF.&;-Dbs2^EtpSY+66dj2o"Kds[=A2K%]H%bMPfIqsY%_mnPjP8f;bX]57S:s3sB14X!mF!8/&Qm)QC.L#km"N)W&<d`o72@^$!'cX;5C"Dtm7-%]>q#cuNO?P=p5?<(Y)iWG3q%WBPZdZdf<ACmMDg^%Q=1\\-Q3<N>30mSie)qn1pX5o5C(-\j;hQpG@t%*b/,(S!c]cL.&_LX&VYc_0mN(7Zk0/i\KDSD>oH%\4D5%Q9e#(^0,O@JhuWWZTDdCU%9OEB@(p:$Vm9\(S!c]<d89'TaT/=_e2B]+bq[0K+?3\F3(&M.`4?#:9\-HCe,%,HOJWoijB$J5837-%asm^[?<!nD)n/VSU%5$"+XXiW1?Hg8a0O1joa)+]MY*LD9XL/AIuWp%m+eg"4eIBY)eZ<ed@0)UQRa0r/C],2LG\i&0*p7@I9<2t%GMe=s]imC@qgq6m1.e=6K@<6eX5qEN*#H-mW02YQ*6[C]QS]LRf0!'G@YZ!dLW:Z:SbY>%r`_ZN4hf('@:QL<@?5U00"!E.qmdOf%Xr`F\96PCEKUaMHYm:+%1Id<HfkjEu.hX%*<=-&._^mcTD2B)CYSi+<7)le]JBFFT`V,:P8*8TY[Jd+I"XClC<'7E\IT8kt7^(S2%p"nGU.ePo9$Y@Bne#F-]RZD@t0hB9mOYC*h6>+#`6a1[]c7m?]0W)_IFr1l+X]RIS!bSm6/24\C)#1!`S6I&ldqHrHposY^p;H&U%\)k$_g]R"PWMXSH9UO<r/crd(Zj6TsdN_30^]2=BJIeBn2qF.a+HK<S?qqpTf'[WF2C?7P!m/"g=3Orc(6]j[PA`5pa8B!lVVmj)%IfJXNWQrL<BAf*r0^76RoY0d*X#o^R:q#`ipnZ_G+WjC:>E6spF/*[tE%;n_o+@%$H0jaDh[f&>Z$<RHZT$YGmAKh)=<;[,b?,J5%")6!,.(#UpF%3f@jX0=;f?-X7cf:MS2KlT.AcuY@KoRh]1;c!rfh"\_lj0n%TKub;#5Q6XKrt90EaR%JrAAgAL35;),T0=I'88%9%1UZ-dMFkZHrY\R!-H8IIf^FHL7Qf^ogE&_0>+Q7s`#V7po>rAm,Da.faAnVO\?T$Xrl`.QZ](F29i.*;Ua]sm$fKK%&K0K^ktnA$%+u50.3?p:`6hf7SOHMG]Ls4HoMo\T*92/\q:Fq3ZaB1I8IW!'^Hm1>uhu>a-Gm=prR[3G[)Rn=E>T2<)&K-ldGW;-P+p2OmT%em'%)6%-;o;7Ac#]Y=7cO6)21G1ZmnV.L_5Y2Hn9-W[[Q?u+sA(bq\GSjrdBVJf!IMuhs@a#%RY`=ILF-Bu$O2FX*e2[lm3?*g1M*7T1%-"kmV8*6-_hikr)bcC?g\fbMkNm4VoDUU0*nNgL;Qn9]Eo'0I/,bCF@j#;cZEh34R<Na`-D9JTSH:UQ/Lg0OKfbe-/-9>N6AZkiJ%JT:\"jhjf5rn-l=E/plKSImgLI(3m6W(ropkIn';hYD,sB+'IIAJb`9#sN]"S227TB#MqU+-+<Kpl)^#fA'X,E;la<bVL=nigCDA%R0,-C5+Lhpq(:q!h0.tC=Uu2$Qr]"!'8]P2.M'"*).HAe6KZ%W1VrMOe\Y=B's$7tV45gn+iiWR%?V)[Aq_&]EB;EEe],b<Qj7j5%rFTIKr)epoHj6fn3W[!%.1X8<cg=_P(fl*OJf3d_[d(-oL,rcr),XY.*N,B%Yr-gg43Yd&K\Ms.ipABoArW.oDJ^5W1,t?DJ2*Wl%__B_i`HYu:L:>#BSFWa#N+ZC=\9OI.ml'K9f+Bh!:7Lg59&$7$U)(?60LD2VV4Pu+0&`"R0?5=lN+_(0H"NlOQtJnRO*P93rqr?\%7]O,*2OBA%KP(c4WAn7$%f-uV1QRJoKI>h8d%8p+cBo4QOFT\s-f/Bee,pbF!gVsJI"n>V$7G,D8[EQVV8CXHVr7@.XJp.kNr:3%%E7;`WSK&$$723nJS2h=ES3_6537H0E$HGXO6=cN[R0k=]a22]*6h=r@@WJ(H5A!C!(H4lYH6U#>*ci>R4S=8?JEg?DrpbpqL'Sn(%Z=/PkF=8*j?9DbC]#=j>,s`/JLaARads46EB76[?XN/=-2`nuO4R7@lG#i6te=%GGa^2n5H[*nY>_.@7P_ZleY@>RZ3ej]PT4=ol%)fdK8^AJR9h`b=7ij&,sj#XVp?-qQb3C&m>CIc]2.=:fW\#,q&mO)@Q)KBdE]-Vh<^u0D&o;olOfo^J:=BXq[Q_um.h%HnaQ_-H#%[j?M.A_8S6T@SCHibPrMM!BnYZm^-Qh,@.U>:er5'J@qEM2JiG/F1ON/"I+J'p&K?Z$XS)'p@D2WbF,\oKL"F+0.Q>'X7J-A@Hd)%Q`*m^[3(WA(]V_9^A8GD"VBLRf"Hmnp[Pp=0)@8(?]=qge8K_T$"N4mQ6%S=,OhX5@DK&)$K,hZ(N7e7HJ]\0CpE44L[8OU\T"tl%$\>QIHN*!SAYI@$6^/'coPQ_K\6TS$HB;&_I`nj$_4E<0i>!PchKMCfVbZXD$"53R2%)$Oid[$>DX^NJigq\#8r^NZ-!Z`X[suV?%6ct'@aa$n.EMgnRkgK6qjMFCFc;teD_^@@eLYUJtmLhO`.X=G@VS>MO\:)YLho8q['"35Jk&?C[aW['9p7;l!9$imgmuIi@?DP&?%m:W@inPRWS/thfooM2#Q2dm\<b%s*Le%L?/cC\l1SY)H8heY?WQlm>$o?*s%1AiNGHlSJIk7rmkGM:B7:$7d7-_*CZLMT")<8i!d%:QeF2nVfS12P'Trlb'Rgr)ZAMR8)k09/ga,cfEc$?En\2]ff;,ds:''NB^KQdVLrtj2O,UBo^kg?Fb0\e)k;gVW4];3n\b,flUQ?%W=\<b6T1K:s#FtaRS,Q0="^'<S\h^Dds7XE`93[c(PZG+B@D.fd`p&l0q3&IN_Pp9kEBC5kA30qJld*PBj8k-S'Hk@jO/$(nsm#M%]N.[A95/:sF917a*4+mW=%;>@9c#LubV>U40/c#OCcX4]d!HDgQVHXS7=*b02nK1%4qJ]!l[H,7,`)8&;Ak=<Y2&k$5)%7pF[U<+%f#=`beT"RrZn>t&YKfd)*NPpKHl@@<XXB_XQY;ucYJJ93#s=^`Ghk_;Aj)3SP[1,jWU#Qo"l:lp^4^[@.VY*;EYcHg^tWKb1e^02%oI3aOags-^<_?XQ5I4+GkYUo-gtSpJ7-5]`&/X/VaB8o-0+eL40qR?m4-/.Xg_\d@hDF2[42:YCa!K0YiUgsVU:Vin`+$<o\'+uP%.8=d+>sLf??$&#27KUULCZU!0_ed4rF#PH?/_&blRMQ`lgDo@GX.q];=nIa:Zpb9YD%=*=8"oWc398O5Z[Vis(3]/?^O2b><s??Z%b!`i1H[gJ,9$!^tho$*j^MnR$>.@:;^n#j$8Ig$`<l45P6RL[BM9^B)Pg<;6U%t)h]<'gbW1r"5k]#21:tXp&f5<",rBIWI+b!3L%pq6/*nNr%A]M+7(s#=s*9-b4C8a^cph:VsVAfZF*Mbb\31K/OG/iu?W6"6tW\cY8mXSpsK\.WS,2oi!GH,\@I:B^l3TkpDVBj\WE%X5[H>nT1$M/$D"JXRs9r2/j*!Xa<VUb5?EZqfq+LH`1438#FI'\XD=aL,\_:_=/d>,"%0kJ(pOlU2$$]KJ-Z$fpoi[!dAc^JnOdU%!XPB#DlY4OdQ'5p3PD61p8Xhf&i,Rmj9dQG^"gL:Q%_nB(__HRc0'gCTJE]Zk^UM+jS)\NF2OPmk2X\':q5J%[[Zj)jqE`f.;pgt%gkhr!9oCBDh]>"sN6;a"re<M,qd/YOm^SB8a[QXekZ%/eTAO]]ljClQR4tmH?3lf(9>%'?M7)okbdXC3bf=>biEP7r++k'H$%'r4%`\V`oM`W0Ca'96mIs>gPo(9o@isEeFpI\o3rSj$umb1o%iH9E^&<^&@'p$TsO=YMf4Fr2[@Y-DI-V@kU9Zaj:9k(uG=SO^"g;m@Q%bJ?<sG.^Vm-]MhOlQa>k_(]agfJ$O%+\$%!9=XD;IJ:k^b3/cb8PH8m4MEs5@&BL=0LSnBn(Te$0R8]EX17.]b.o\>5.)hENbe0f%1%OX4U'`+4#pnM!]#j[!0iiVRA$:Nq?2'.O625\P6nqAqlg#\gBW=X?Qr7NiGg\N1l#jJnF83)*I)b?_0]`IM4cdp/79'[>&J9M)%Om.E77,,89N[Huj%upnn^+rs!;Y1IDHcYTdL6(.]4I3![%O&*\KX:P2lERm1GM]W%4mSR^26B*)j*cB(3`=G6"_HNN@i*F;fTpsW%iVK=9N.2IHC/]BoDk+]`L>Ki1J%M:qrt':sh/Cu5W)S1,]lM2]E"AFcpg!P<g'G9FXa%es-(/"CQK-spP:8aOpM]qUl-!tDO:R]M%:VoKch,55]?VJ?n--t@2P3$raV*+Q"iJHfRAD`*ci.:#dF>*T5lUu>rRE0mQ-/iF*pV)JuGfM>K7/MV+m?fQSf^>rNCOTn4,24qg%"n4IO,EemY`g<IpIGg\d?_(RaS6r6KIQpj#cGj>;I9:N&9p:Y_o<TPVSMVOSpgR1"^#Q7VlME(WH_LnYD,OUJZ>MB)]5]TFDD$RF%<V6\Rq+!sWDT25%>3/s7ch78-KNkMT':Z"SE@9q)>bW\Q?%Tr6?pd>F*m5_8<r$nZkDPTQgfbGS!4F@:=4:fYNS1#iO<uaO#9e0W%e!dptE$n^qA*ffZYZZ06]<pqp&t\>$m:KSalnN^\K(`nQ;C.`BVRYGu;BPYi=Jrb$3"5DXiY>spim*e2jN#Yof_kL.@B]nS2RnI@%GoI-4_I3]T\2'CNT)5oM>AD0ua"#XIn*J/6JP4SQcF(YpJ27<bXhCKk"W6Bhd]karL!CJRkI"7jGA2bgO#].YaR6I,=64e!S;5QI%[HbDPjB$IicnJD%H:(AFb[FRZq^qc@.Yq6Q3.L.RS]rl4Wq'lr`+rr&!944UM!0]aq-%["-^'>\=\O=j_5H7AcGAR%<j.^WF5X']%4hlB5roY8SYf7\`q@L.$F8"7^WIR`l+.12B/>[kr^i<EoL[%+:p1j6?-L-7"L44rjd_[4JH]*n7]/BrJ3+$50NfD<F$/\:WQ-6-e%2YK>*8N7KIOQK.Op9bCZ<n)H</AOO:ONRYEIh#%H(18Ohg2D1]kUaNR3Im.Rkd9m@YrR>sRBch1jo@m1A!P6i[(#QcJ9I`4W[tri%3Ip(pCjanJ+pTe7(ePm:"W0-&0G:!($SZB,+Bbn\na>JK?-3uC7^b<^b(naBqqrR1P`L_Pr.C@,q;01Nf1Yo@p"8%Pjhl*;E&Z_"%E%)lAp&0N0nr:=7CG(tE"lEZIe"qFsQ#K]rkrX?<8U\UT#&ar>0@tKMh^iD-nb;lS]bbR\Hi4!dKYogA%2Ei_?hiHc_>!e[h5<*a%]ma5;h<\cAq;1ER*#0)LnS.Ib$bk.e3#cVtHi4!k)-[p;O*hFYY@"M3JDF&n\C]'=\b&q;J='5:#9Vjh(Yk4:YQ<Q7p\G%Pc+^r5%`d@Ytf%h<`!"$0e0=X<.=_rh>r>aYS]%(`!r5qS`s1gO2?r#^Wkso!N4-P^JcXIsiqYBNn+h.<m+Y,-4=?,@J<+GCi$[-ZH?-lO-%lf[@&fNlj&hWku:`W&-9amSin_ib?CJId%0?SIeeSF6%X?;P&JWO(FHk:ec!\,)6A).pY8cQ7h4\,&,2+dr=9^YkqZR`dMQ]mdf,%qJi9NVL/8n2dBk=@Li//"lJTXB5l1AY@$ccQX?oZV"a_2DPFUYopbb@^/1lJ+n"B[q%OA*5/'&4lPFBULX,$!F0As?'!Z5]m?IAA%q-!:L<^52Mo2FN3kEXdKXsD;AY@"LoDu21DhWkujhG!CtSFp2Qb&-SlQ7'G.DjjB=?MF!74q,D7rFWU$0>&t*IsQbE?GD?"icA\,%cJr4qCKl>8XaXZ=c/V-qi*6.,a\&&ZbRnE&g3`c\lXbFne">@T][q)e=PlO@q?:A[4c8j@f.Yb^$@a/T/6TKk[WL?kk?Kg7.-J]p%Wup1_2MZYX*)p1PqMgKMLV24l@!`\SMp6LM?gpN44$#F_]m^%'"Lm4U>duIJ:].nTe&3i/*"-hk?RW[0k'R'8")mk%@eZPY]mdeP%+cQAFh!5bm)#C<Z:406Pi/E%Zg+rQ=I^G6o\,(+<fM)&9q)[Ik2EmISrPiko0),4=!cRc'bc[Mr?GGF?_)mQrnpC=e-AU`F=Kp*8%TfEOcdB%W0o+4jg>cG3%odgL;g2lB#HGFJ0hKU]L/NT],B?;!7iRn.QH&2uW8'!42iL,5F"RHi$g-V]JnWT]Q?@-RUqYfg)<[>DK%*Guo6AE1^qZEh/?`^#V][@b#oYOuDqT;goh"G1)5:\u6=bgu5LC1I.q9PnZPhP[M\T3\Eoq43d#^Xq&5lHr%'WchUedb]\g-641u%5"iq'DsrKlBC4i:FEO=Hde,ol<k9/r]LfT\YV"ZpD2k>5CUXW7+aoQ=I_@A(8P`-+Dpn6R3g<t#]+sSl,]V6#pFFqri+I8/5E\+;%rR%s6(p)eb_'$6-6>#CQ,ehiEm%<[;RW#gI^E26AX3:%Fo-InA?&YC_m2[g/I)Zs<bj9%QZ!ED4B]em=lgMIVjsj(/N/c7KmIUR+%#t]Io<3NLcdSdE&b0IV$K=E/><kmSjd_Pnr8rmIt`I!TV!n+YME4tJQXE=t,A+V@dCd'0BrR8/R,Tb<5/U<]:<*+7>C@S5N<T!(s%db`[Af3n,?Itc+sQpkrj]9:l':*6<Kof34:M&0(O2ZJ^hq3/*sc*Zf&9]tnJFpM:2MoAo2VQng0kJM7!QJ=UQ@VaY^>KEu'r[c*U%b!n:T:@@O:l!Z,cZ#C%a\#8_'-am&P)mT%Wh0s25HP*Zmp2*ne>oeLa<`5SLQfQ\[]MWFoZ8/fPH$A:.f#O<pM,u4MM1NBJp#PcB%q_n:oqi0EX.JpZ;_/HAIk1<Fm&t(<M#tcp\IJ_i*7;qN?a`X.m/)MfNRBh:E-e@3'glk89N\q1JdK7<YrU\d.ZFL(:nC9ZC'TRY?%pk?)jd'P:6SPQNrHjdBl;VZoY;J?M'!'Rbr>%<VXiks"NIHM`r*['5']g*[0anC?7e7%mUPhk(tAS"!c]b9UYmZC3_4Z^Y,I]$8p%<;&,%n15oO?\@5\o\`W%Li>uB\V[#PkIV/s1H#hB=Z$Y,X<JUq=g[<-:k],%VT/m=88"l:cd/nI-]KK[o^bPlmuYi:Sj07.PH.Io%]mYmm^UUf[:K*'7k"EkR+#C@<:b"+&oS`^Q<mK8SQe1+V.lZ#'MY<N<R:KH.n*YdO>cIHiBA[3_Wlu9s$QgH0%uZQb<K&YXBO$qE%??LIgH!NUI=BAFq<o(ksHEY/>.Au4$C1@5$5Y8DV(G50gYA&1/CV4o*Sui$OdYOmu%f1I7[D`(;:6JtF&!H/2UJ,L\m-Bk@D&t*2%OKmE+MSD5c^(S28M55qLp@bF)5O@p57q3X#mS3J*#Tl-=m&.UFBAUO4]JVX[$r'As?3F0M<\r$iX*FQ9.J@Kkqj!(RX=E/`Ek'RS%-Xd_ScAtT"qODpqK#+%06(B(LCGlEiE4O*iW\pO4Kre0YHVC,Q]ToA-Z+l$Q"B8FEOI_JW`.pf(8]s0?<O:O*&Yor9J3[XtL,[IM%eIl9$ULBHZXOGS/^5?,%q_"HYO1<>QqD\Y)k@b=V;,0@;RoJDgAQ.@Zg\oRDB;#?=XLF,TKhbWS><;PP+K%fd3Q)]c4'p!1mG$Ai%OZ:Pk1J=+o+dsF;/TeYI),BUUg4>,TSjR$4p'st^9%HCN=0"gM9(G6nK/n<h]sDj2AMMOLPLs1m!q4Pfdc$d6?n9^DQK@?GqQ46R%\V-r`Cjg'HOaL).P*bGg(1Na4IJDnFUsK_"rKV3b[<Jc+\!AlNkV'\[[?KCuKQ`X.40<@B3G'<Uhf#tJn%ELt.Jq7i<;B"ON'M$#%3IA?)a[9Zg8hHLTpO7*!/jf.+<CuWVY/pJX'2?YB;H"4s%CgQ=Ah>!$NtR7Jnc9%fF,e-K?27sbL>A1<0;mLSrS>3#Y90qm"8m.C%C;(`'XH:9L]`sGCYd<B^NGriW5q-GU-V,(D]5UAm))(%=_7V(a9mrTJe`G')F`gjC5KgLD91=,UXniaU=_kE+HdYXT&@R`N_`Nn"%"R&[2mCdFh^m<r&<_[jB?/(Xn+0ds^nVP0d"_c@D0$A*^=l.[&;6+Slda>Xr7sukPV8N2ROqkGnS0dJSrk(\:f/UYF`+j]?;jF-b%][;i[H']-=UXSSM>9(aeBRrVDn>=1Sq]?,_c]AglY6X0cZEoTqFbanW7!\h>m,b,8&i4Uf"L\Ah;FucEa88LN2h3SpaC2mtPC+2"%`5[Vgl+W\R<]OdNZ@u1bJU.o\>K<]k"@3ZmWaVYn[jhH:<,$'EJnp*(-RE3XX%WY8fttW"cCWOAGKTm`<d0gA+S*JU$e9"I>2RBY%;KF"J'i<]ASJQ)VXT[f]ip[/?-=N@Ar7kCQQT#ssABg@fo%m<"puJpnB+<X.8Em=o1Y>hp#B[\,*]hgNiX.b[`]d-$:,XgC/0CX9%FomltJoK"mF^gir+FHh.NLdUHIB;3o19pG,9]$"j%m?"1Jo=<ZAJAX79hZKg/n:LXh^4u.K1Ch@GI<&fSF0K!.jg<ToW4/Q?^ZW*%2i(8/.QLlA*!j/7D8pdIn=t+bH>9cK\?_OlP@qbrn]YU^Sb#sS'ZYgG^A:H)YV'uJ-p9DYE2G=$K(HdMQ[D#b$&Ig1'$#TpdWa<.%PQ<<8U?ltEg*PdI5]1PW7+M4gVo8^K,l>`8o+W+S)jL\KXIH='-M35jO,OC%f;6Z_5&t$OY"rdQhi,6V"K;'cU(iD-l%L;a!g]+;%>b)L]N?I=E*[:,n,9iPIV%2Q;K!eaNOU3)[ptVGqc,e16#Dq&udg;9Z!^S(QKHcrq41]j[G'_\rp!&"rFq'X1qk+5L)ei'C,4Xod%OU9DSlL%(bJJ#]MYO.i?;9ULhBh:R?j8>+7O@-6M(`CV_-XY:/7A2B?iAF`i4"<8KZE"COWM=@$do3up'IR.CP;-k8ZZqD+`"9&n%Y0AM-g!#DGPKc.!Cap.I7)Kbc04H`S.#l#'-perAN.i9%9'?l5&-t%gK^M[O3d>i26o2+]`[Y@@SrIqP,:hc(%4`$8JPKr2mga;U%`"DLEZT*db?J.;>E);sJEWRM!`lEP1P\IoDRH,Vm[<58SbfJ9`,]KQC7^K7DoX:jfhKmV-a=,)S<3q1>D;>X[i9*/,l?dO5rK,PR%)O=P#&'NU#%(;AC/VpR+E*/V6pMeE/'c3luYE:7/cHSZ[>Q6PDHBuBcW's'2oUDuU;W255UU.QUh(IYu?rf_U\b9fK\bo:;^J:2#%3=^Mb'&sYq-QKk&_e#]o-/2'\]pns8]4n=3"\TgNqKA!.3cp(Z9%^sk/QcpRm+`hHkjf\Hr.EpnP"UNT+09;:702!lbf\+ielDF=%Rth)754]=;fXHK-\0FZe<`Fqel96H#;7sP)[=b:plH](l!cnboPSn@?-[l3`(mZ-WM\'(%gP'3p<I>:]o">"1/(ZR-)KB_Q!:b#Q%H"<>ZJV`2noH^Ge$,H-)IbJCG_N*nBQuKUEM+7^%+E?t<aJjlN%\"U8dL\\ujSHiTjs5(^mCPWhPJTC-+$H?M]"BCT<oj,*5Z*kX%91TQ(>8?'p6/LL!9@@$il's:Y98Ujp7"ogFfAkmsV;/dfQhT@OOM@t7?7q8bE.1f`\!oii:6uk6^qCnh51bAMXUT&f-SFki_!g3&%7G]Op$W?T&Zt74(pYOK^^#Q"')QnpFWtVUh;jttI0@eK@JW#$@<\2(:EJtB%E14"tA03V.?*.3:>QnU@YI[O^ESe*F"<+rVA?Yd1%,<YF-&EH8s)(fLOV=i7K*o#7T0c`fF[W#_@KH@H(LuAW\)`!8^([msc;GYm#V1p5\#Y7PTlu(H"=3M-"Q^W99*aX=4gW#rgbub*\%eRIe+`\mUk5K$S89.#<oL>:LX\A!R@*Y_QW*W'Ak&m_<S+do^+"t+5(h7)n]MS1@#o2(i*p:P>hNlj0VU:IX*RcYUGq:"'CQ:0"3%oa+B?KVjU7!00dR0.,9dF@X7pqI4J^JbQuUW%U9@"jaW<:$#s84@3u)W`U"/YodncP`[$NJbiKNJi^'5Kp/EI.rkg`nqt#h0--Wk%ichgS)SL&>S-!Fg%\Tul8r*/]S".@;k2ZZ:;hu\H?#53V7I1dDC%Kjei][mN!h_9Emoiqe881bn1*TXHNR`kb#/4#\)Po0NaoEC#%V)4,B9#F/1OG!m:A`*hcBVgi!8n0'1JZ1nR;c"C7++(3lEiJsT-?S?<<D1J-j`FZ>"+(g4.#j'_L8Z[-V3.:t`&Pj_Q''dP@BK*H%bZ5WnH%5!4LDZECns[J441W*!^8k4BRog'b.Z*oWL[on+EuetGS\o8Zqp%7KQeE<f>n:WdCLp;qbI5hFA6h_H"_j/_Z<WF)p9<5D%(/@l*FXfoDP]d8tL%A:Z+m]UhHQ?>I3dkuh;X^;fpihPeT-l_YXMK,UAJl8^qF!j'((QOQ[flpIQ]Pe:PDk!c_>Mqu.u@qi3-UuD%`VWU\jgk8IWXj%f^9Oc&om>j]QI/oI(QYuDa)Bc/h1XG8FbU^4m,DD/FgKK)2f*S-e9[s8ZV1l+?Rd#bf^e`LNuNC573Pg0<(L1)%^U/1#3F@%&3$")@eeV@;8>drHGPd)h4)**nV5g3<@=Fnt+q%h\"j6YX4`f%"g[NK#-&n0(,_ID^L!r3\%Om:a[iKU:<BnR5p7@?n%0#,,umd88&CMo*?L,^ZJQgPnmi-,:TK@Q^uClh1KV&STS1\nI3k:)Rj8e."8n(DZ)0;h(.28Y,XRJ\s4n8/@/V+MIbc=Z=ETYB.9%5u\?BW4Bu<W+XUI(TG$m>GO2bOF3YWdu;aaia1O`N;_;79"&kK6c8nO/!#p1pB^#9LC5qCm)_lq@B_=(%c7f%9<%@7SfY^Wq&(`L%,Lt7Mh*i&=hE]/Bp9>6nN_21I[[R<m5"Y6lFq*(9nTD3&Z\K0p2]Oi7U?8C\f7GkM=M5<78TTR8)o;sNKUO-ehMB*;BoZH-lD6MX%l4#g.Be%A9jT:Ck)f4]A6ZXA"X$KrBe9tk'a#E)Urn2>u]g:hJkqkn4]b-Z(F+i'_86_,'*'\eEk2:Kn>!,*`gF^7UMB(%`m6d[.%I\!-?T@VAn5Mj7c$"CgMV"Vr""l;F/2RmS%bGUgU[=D3]H3`-bnOBU1:t.F$^R3(VafUo.T7\\,+t>g+r'^6a2Ta[)qDf(5iSKTe%OM)u*<Pj)2ecYZd("aoulEB!a^Fk:&Mh>2[i9(p`onnC]o.GV=ToR5S9I/+<%Z7CY\OJo>32grg1H"6;G"iSUFo#Qp,h+=Sl9'WT%RU,Uq13k-eboI%;3JBW0CkpZP<)JhSPs)cIN2U\k<<,(smCJg4q)%75rJ98)=@bI5HRm?4\)3Q"U;Yu_i?IAj?dFL05-=X7LltEa%jjs@"+hYi2=WEKl\k$RIB6@!FQ[1[a&Z=gb+b-8-kh9<ddjlj.K9Zf!9!GH6I[C@2.I?,'Y8B#`mN7Q,:i;l7n4$;o+9s;J@HF6$%G/+//)orTIfRnWECZq=QG@]BkDDp#+b3"fti0ZO;i=R+'fO@AE8du!YPi3&a\b\g*U>1jI^&JV^6s4a:XM0O$U54"t'88BTC_$IF%a!BW'Zr_JS8TLbs-u<)p^Y_otDcge&s%#hJNTeI-1!q]6NJJ/(a?Y8c6S0po(`kEZ12L>WkRi/+#I(?$8PZH2X=KR'?D5OjV0/V^%)3`DI5D;hQ.I^[eXsri.9$#k<J)=aR$3D^FiO(3#nEs;r$RnVD?5C>]d3-TC%s?OBb:#o`jgQA5jd2==J_)DtF(=XX7Xke^bC=ci%eb3>s=a$@]fW\hhs4jn12Dub!C2O`Oe9Gl@nrFV,1rh(bfbO=sl\Eq,)d-t<4m]'1=c<er_dIQG+#,Z]<'&6_BoNQi`K]!6VWhZ.%+A4/3,A3RJ.>PtGGhQ2]?Y11'N-0r5DBo,7-t"'IK^T://>^B<ipjto1*!a2pmA"C<=m7?IHb_>!'lEsE"5GuZ%Z\^aMT(c5W%O%%&Oi.nE2o4c.lG]Qf\5Y6CcPLC$6.[VG!sP;-HbIM51V[]Qmdl/ORlmmM2<k(QJ:07_3'_u58Y&fo3p3(QQktAA"p1l3>3V*JRgp*%pt.eI'4oTdDD1s$@\PEZ@Gf>g(#*so1Zd6WPnTe2`q-\3p9[J1&A\:%]"D3,7!0O4Og`ob_c#eQ[M5rQ\YgPaa!QY.=BdD$\#HK[%4d<-?AEKs:c#A.te-t^$fW\$aFn7<Ab+07i`3bPKHn[nkU_h9/1m:s53c([1816&?i8&4kFhP.&2A4/Ces/%C-Vo#5&Bi#"e+*[k%c67oh4g#nM44+t33'S"e/d)\&!de-bno$)Hg"'Xo^i]=s\R[W:1#IhTjAaBcaaa3%S$=^oEL%(!/$#Dc.E&fWA^YU%WeHAZA,5=2%G(h5fCVScahKgdBUoplD4,Lt01AYh;*IK&SbpA_1j3/A2NVUHPYL0dp^FEN7[Ij4o1WY2!l\DeLG=OK,&^n%rEI<5]Bi)ipWK?e$%AD+&V%t0Y.>cCB7+S'V70"f\iYD+JVM!=4S6+Z#g(sSB7XO#<C2IhqR)t''S]fHGSS(MbT/BW(:M9"kVrEe17p/XkjoqZ^)Gub)-%7)u)G3f8aPp;>FGE*Qj6`eQpHAK?%OK*!f)eoKDD@$Uj\H\8D]"6n<2AIuS.B45f:Teog#1,=Krp7MnMQdV6lAWW1>cq8r:=ek4T%;KK?`@$+s`o.4;hfqi%?Odup#&*h^BS22q)7RuC_JMU-,_M8QX_ujO0Xem*&a_>O>_*:S\%$BV0rF2)gC<5f.'kq-^QJbLaE+U)2%LC[@Uei2iGh)'HY@t3ZdRm*ia\5N]_NLk=XK4F?9".hXGY_`/9..?Q#\>':ZE[4C%<EXeN'>Af(PoXLOFSJNR-P.hs_\i5qUL;-&%:PM(eV=<FF<\jUK_&@G1nJstbV4JcAa9_u[Aj=%pOLW'JkbA/Cmg*)R\i]!.#UR$G8Qn^YpBPE,1:bjJ*1g=Z^<q=#^6LnSlBrCD%nM@8:Bu^M*AX7C>!jU*8=5J1>,S/5kV=]m7l4pH0SKHp+K&YhU'9UdTrN8T<`iiBHOBs'`_trrs36e!Z5b-?U9/<ojBM4M,[=qh*%+Fu]OV6U$9i=mOoRg2odSohmVI-?)&53Ifnm*Sur?a`c((f5XB+ie(q#?)c<5k`)@;+5]@=:%o9H9]YD%O=P:A6cqO?Z=gh"t0=8%_W1e:B&:Qpm7Z*RNj*oeAbtU=!B3MsK0F[foCl=gSGlF!B2oh/4)@Yo5-cln#-XXE`BW0/8]]dRh!@Z$6U,f/K=:5*ANMH]CB%Yq%&OX^_;+!-uN0;M$dHotnh<^d,>OS[h1`b8*A.&XJI+)eOX8QZ%](tf'\Q^/(2*8_>H8Jj9.NKKG\T5%5D)A$KHFT;((G$\/YiJgW%o>aBQ[/=P(II8apDUlmJdf$Tk6;FQX>B"8o,rnG,1R:.O0TkPH6B>I019o>Br<a$r.*'o7'*X/>I.OSaE-TaE*]DVVWnmR`<GDfE%,]F0SPuC6J:(MQ0be^`m^\K*Qm653mQ2])7$&;Z`>D91?<\WqtUQ/&upCfK!oiH9hg4F^U]3+q'WIcW"j"?X"X"Du%A8K&d)!@jJ%b>5BRX1]NXlWj@@ZZ9H;X;Mh%6Ji(U9geW=oZp6&p5q=J9)@]t,jqn*?iSo7KW*O%d\INhS6ZeG6F$\uE8'#12Bb(Ikl+Ke5$c:h%l19Z\O.D^`n`_c_T;8DOjYooYB9IkrG`QPgh!lcn!F^?-j$=2ch]DJ^R3erpYX[sA0_Y6Nl/^-ta08n`LOEQt45s@BYC2$REo0Am%U*[TgcX?(n?4U;Wo+RM?.;O2?:<;B(_6P'%'kLr8p5;?4d!/>j+V)^I#b5PK[+@pRVf3ai#8OmHm)J?(b]^6"(h@Ge.n>U5ZgbmB%@qU-=7B:g#[\h@i);9+qiCrb5qc9"XO2mEJHT_EXmmuS+`773(5&uHUOrXBC7(E@p71pg'6I5^mdRlL-s']nLW]]D06ROKK%\6_^%O.<-f8)gK_Z!h*L,<-JNi:,mo?:N[&I/+gEdI2"VOjbV):9DkZA+APVR3JR_$OD8T1!?8PX*8nGkLGd4#;\-&H4\*"?rIO<A/i]>%/\CtYAbZ.>l`>^QlK74:(,TiZSfTn$%-/,8TA3k!Ri>_$oJhN>'-XT',0(kb/4&SUKLjm<*!-m*T/.Y[V&5C9LEIXr_6V(Yb9=jV%`Y0+MnLVJ2FP+WC4Rc$0p#2<hY;mt(fMre&8.MK8!\MSt!4DW5/AQutQ"45Km&Y\[-kfX8'-T]76,4+j"X`/3"bVlT#a,90rio6'%iJtk_I5Zn(h%MqS,;oI*NC_iYicd15&IK>+_.QY25S"M6MZU)DH]3d=n\?4_&%5k\VImKC-dl<,KM`VCU6JfM]G^W9LN'2%B!u=0%F(0QXS&#p+NCWNG/'W*D%4h[cHmE;Ah;G.WK+[$0mm%TLE-8TMPi=+tEHn,^fc+mT?91Ip,4U1egrO9kHD@ooaq1M4D;!hZ4QVDj%@?+&,<7mWG/!\o;.h39,Ou/Ji5uZXodXd>h$l8R1MbI@?Mf=!X2[>0JX/#o%r@Kfb=CZX8iJn^T.;/)k)/%'EBZjKhA)IKjR:L.&%?!Ceo2HAr,p"%$Z$spqA'`1P8fpS;6^K-VuN(nTAe\6J`LTQ1T@q%#rTAm2:pt)+]Ff48mWj!o:9DQ!KAn5$;bfhp'anj7=1G[h>%T9Bp\nQnCMfr+GpU!\O`qTQ-n4oIcsi0+X4JJW=Mp4ne1eon4k@G_Ti"k<:A$\4W[DCH-E(!G3\]j9Rd+nP#m7lJ9#:OIQF@ileK%8meZ3D+@L`h6<.Tqg@P$,lbY"f'EVjrkWTSNZ[395?d(h3KHAc*qW(np&i.MK6S.%m^TQl`2e;IC77A#(R.5'I[%Zt!Xqe[37hi&%JP;]Y`9Z49\V-Rk4RUhq'QEc_E_MTHY1j7iknC?2#N>nBEKS3][Tq]M!4H08B^6Hn(p1q$HbBC6[oSZUCDmK'obr<B0\oc%[Uib\%gR7fd_Kl+I(baZj\=pdUP/;[PU6=<8DR/)Y!^=XOp<XX0NjmeJ?]FfseS(p^H"`^8]_u$r(EN99hYiXQT8fpl9eYtrla4QYO99Ng%njNl7_iH>`q]?+<lS!4eI`O>uq#dgrGHm,*;"8`[,#s':9n)lA'R98S'tKe/nDW<#LEkgSdo.;O*.7Bt,X.j<LE/kq&,t1("A(6t%2`t/&%=Y9"&s&fNX6+BN"+]0JZ2*8A*7t1-p*4UBr$S3<i%o:@A]9HT\K(I.K@8f38-6[uj^e"n'8\qd$iOME<?JZ\SQc'^kW0F6%SK-N,Pb[PA!rIpa2kgUX)sJ5+UIRmXhfqUJI#^bF!rDrb?g-MY<T$"a=VX2UJ"n*@kf[mDoWP2/4c)B%P+iBgG'=g,bF+c'<*#!;%Y32Qeeo/ft15;gkU@!bOj>2Zp$%8^'i+PX;&A_"mILlDW4"?q:s,+rsoE8q(cVV93XH!kc4Vr.jRoeY7,7n#&j;fpTJYm$i9(40Z%IcV!'LU0W55ZtBH1GDkJ_rZi9A8"(B/`E?:3LA.S49oGan5+B65NSPO#m[:VB#\rNZ:fEj-OUef3>a\NF/\6$#N$9<`,@@I>/J,:%9jf1VA!J_b'b)G^*.G/*RNc1#YiiBHK;&7g!V%?6j%.&Ia<!7<iC6:6<';]UAkJ5#?tS&&E^n4i;;b1jeh*Qq"(?XU&6r+'YNZof%0:P(g/gA^IC?.7a/>o7Li"2k?E[lF^Y*9B,\1icAX%00%25b%[8OZpQcXff+_ud`@Bei#0$FF%J.D<A`JCL)U6*(\u#umeaA=\L=%77=FH%:6BaoLr#2RPI:BMk&)LZR]TSW@gkRlYr>)1Sa1aii+(Ed54R2ZX&;R;3q_<$71k*dr>\K;ItKsi"Aus3KHXo/Fu\`(T+i1%O1]+ljV9&Q%$MimoOpfZ_J7&_9G]%\IF)`J5f5iaOc5Z>7a4R]BFS!SA.7Nm6kr)4jRP;7QXD3iZ!hTC*PI5QT*Ig%TMu^S<M2k=%Zcc#GM7&=75s!IdcRseCXBKU?3>X$IICRff`"Yd30?ArV$LV]4$r(&R"+<H]B`9o0$&2>7PJQ/i<!uYPk@BR-1.4g;6tYn-A\*Eq%S&;&3kUH4PXB$$mD[jPDC*.?$XCkL"2/oNPWZ>Y)(h$l.<FiL&jY7=2=<J4s/rH_RXXVFUPU7U&"D[!TX%X[HO[GqSa=6I=]2CPO%m_U6X%bck2>"6r&H<1f;[b4L^<J=;Fb90>hN*mbV+X".f*eA<pP<gT7PU%H9"D[!TX%XitAV_%',cA`M4^'9=V7849Xi##,OP\Sg%GS>1YUd:LG1+?iY<ImaV'BD\=#aDFT'ZMUg[6S</#r9VqE\:$GJKDHob>chHMB$2p:l.GuQII.\<X^JH_BcQ#[i/CbZD#,hOu#R&%d\53=R::bBNl36IU,c)u,Q\,q(5u7FC&nE.PuSktG%$O;HK75i9Z^s=mmK00MMn(ChQq!/6`D\3@f)hKH)+Ma1mKN$6.InEaqL>(%$8`V)%k>@Kq)j;6F<W2$UQC8Y74c#8$,+7l@;X2lQm*h\qm+pP(dl4c[L!kP+^M:N`(Vur'7,uu;H;3mW'E+ZBNtQBJ-!i`5Ze3_%#\'\<`\)m@6nF3\$,8lcd)a`o7>ol%:k=fC/Z;2+g=S*JLdc+nQ=GagA?(4i(faJ<kJ2u)4K>+^Frd$o<@(.C9FRT"JpP?8$^$3!%C`!Nf?XUW:Mi])ka8eT4j@)[dq@]ig<Q+0<@<&[])S2dGK9-V:ko^VKV-Fn$S/eOSPiOYq_^-.7%5l4]_'Sa[Pj+XqJC7_jFFbLG%a-E((CdpEYVMh%fhQq!/6YS/H@f*BtaW'$$RW=X$jl5bW0U0JIY_Kp1T<Ou1(FEF\kAVhKU0JZJKh,!Nmr8hk"_G1tM=#@F'IM7`%-D$A?AMTE>cD*X")2;TI4tY_V$3hfg0ZaAZhPDn<D_soA>RFFSdSneFG-,R/eV-S2TAWV?@H2GX&=`5?33g\L2ZSRgn*t>QR@k+:%(QQ.\Nl-uEWWbIe2AX4g#9EB)G9SGgl,$j9F>sLlOYf+V\MB6[hLU1i%)j+V.NKP"fl'6W/ki91O)lG:%$*O];pIfba54.<AOGQa%R)J\Y*=,UoBfINVPp,.a_>+V?!!=s&SsJmF"+r?37'&X`YAn-b"9pPIP]Mu1g$c1<;(0.1"I#m/0)*0hKQ(K8NaFd$#7T[4+05a#%_gSb^1_Gis:ij,W1'q;Ig]rt3_VX>.#7F.J@1lf-EZakPPS;jX3M4VZr<Ebmn/lV+i'1=?OpdI!ck@B)`B`.siBR\@BSkY4=AXk_%PLr(8JNsF1MQKLR$sDtC#kKbU675U""(@HS*!dK5kJEGskj],c.PhKPY'=#9Uh?q+34HnZb.B?am;k9!Q@*ab6nBAX!sWf@&!l-5%r!*U%((nXi22D':8Ys=Q&BQBf4jJJ[TMu^SZ#pQN+bqndM3U"M6?\<&jI#gp$8@EUeC+KEIB[.%&W88<inXjX,Yd71#>$%+$[D,k%_AE=eYsf/c_(b+%k)8`UA*1?g@$jN(d%S;"IL;j+=;6<!k<-Pe$A6XD@S-\JdiO0cD/:%``$2Y3iB/6BB:*5fE^eWqZ-@F<SH*/h%oX'-i*b^]'(f2c2Jc-35dZK$s3tJ8TTVU&'=Db,`<aQ5mX%c@P!Fjg)oPuo%&D^@rR<'Dl\d_K[R&;7Co>%#@(FEF\a#ag19\0uH%Eusn@Mk7rFZYO,>BeE(gqjbq6ZI^[<M^us_'8`.AL1SpiA)=GL+(k(".,BSK([1D7K:rqlM8PR%dEAljlrr(=L's3t5/DM02QS+(%7[SJ\c#RF-:7sRVhC<M)%lT[=_B]N]*6nZ75_c$'c@b)MB<_-s>1l`P$^94,Vt4:?Tumt6M(b(:I%GC$9T;;WL:pU(]+>B#n%t;*%kj`Nnig(c3\`>I//p]R*c`WNBA\'RPm1\%q'Y4XhQ-!S(KNjMAeiUD7#^]R)>E?"^<#6l]T]]F<:rq>sLIlX9;qZM@X_ar+$^94,%_4AX\8!,=LM3GstmQ/.&`k>-;1!Tg(+:Jhe/'67a\.\/hEEEX#Noc@C2'ENYm0O8r4\k`;!_%Ve@7M2E&+;_JSH4TcoX';G*uL7)%_P@M1GR"<#>Xb*9F!+;98C(]4fsS,ZF;H:/I81"K&Y_`@.oV9VaSZ9YTpG9lm,_KtJ$>Ul&Wn>8j4sr>7SH+&.-De@A+/*9ZCqsK%-F%\gpH_5e.\<-?18O:-7ZMO3:^Mm9ecVudhL/d.3>\Q_5gQ_7!:0Oi^\j17Oit#]lq5r-GnH1k3l-)<CmTu;\V[*!%!C6D:7+$p%gF`mjqJ@Y6Kh3'D$*+TTd:&DA(Hn%sB@k:\;I,[.p,Q1r'_gmF/?V1XigPDa?@@pSeH]5^I8J_"%uRmnTSet5pZdA\Y!+8nl@\*(%qN.VMQkek1m'4M7SUdr`#G$ka[eN*r'EO%7d,Eab<.kJs^OdU?1@1@;Pn4"lM-.\33Saq-aiM9ZMBnu23;5]b0[-K)$@)<].P`t"%"(U9tm$F)0+Y/Go\IU]_;NAK0C1A"Kh?(^VC6RR>jBu2U_g+KoP%c=ALRF01*2^B3F#jdHK^Q^N46SYo#%V7;MS_Fa\j/c`n(9M&%+>alE9q[-mLg9D=Wp=nfPNCT+1?:;:^H;i,V?*V)b?r7NV'q/]6*Gi\D&>AL.WHZ<$VZD,bpnp^F3a9J!eD7AWCL'](mH0dEja0V%*c\4hHl6'+YT4=&rP3SX\5`afWF8W7$^33ij4tr,D1H%m>kHYu"07[rA[jFNm;oj/\nQ(Z@q>kt=(_=Q\tp"+\"_VlKD@>48er#\%!]Agp6=j\3);D5=M<+4?HdCQMAOEFL9Od=@Pnhj:*.e(VFH2HR+uh*[`3I%NLs?UMPS`ODelXcV3AOjbR%_'],6h_j0T#01elic^%[C?j;BH1na6O"BFh*WNXJQj(u+B0-eeNq6\_L`0t#u#_qXi<q&V=/A=4r>L,_N>Mq<1VdJW11Sh&`]In+Jr_31H3:[c$&6lfMI<Y%M(c-kj0iP3j.:,4P!s](`3D1X6Lc#"#UWXMKXDQ>hN5b"<,3Ej>K9RBX^>nP6a\k/Yr*+48onFh"F?*Y(!YH%`\?LZoQ':]]2ghS%m_U6X:KUn"BK42?7Y-1gNcba=j]LoS_F0DA&IV3O@?Lb>Nn"ku"JIeKWf*IkhQq!/6RaW]@f(i/(#<AHQL<IuQ#gfgb'@gLb.4rn%l)sDV\pJdiOr(T?Tb<JohRu(1602C>`:aKIP%=<p?)F&k&)"+AC@/'0%Z>)j^0kgfK9BN-A:^>i6'A;jia"-eT#P<!GM=YseV-S2%T@6(meWR0mj,4U.(c_iC+>D#VYmP^\M8JI#(1!TO3Cmh,<HY*aCb2O#8Vn4%%[%92LfhSRrP,n[6MEir3Ju1>j'3ij8GGnXeqi6C%<oG72oub.g(YCCg,*RsCL;aiUfio\(D6+p^?OMdm9nJ9+PF9lg6A>RTG2>Z>ac(FLn8F)?A3oE3*4gc__aRJEV!2!TERI_J45<F=%L<s0b1k?/*0]Z2[cT`pYXI]3rBqDY?[`j9Jfhl!djteFAKh3*EnI>XN,<PQ9-I"tTA+/*YZCq[C-F%toLV_&1)0V8'BnI;dL8DnX%$#eIRSJh848p4X+"a[i)J?"EZOMbV=kS`_M]2ghSlG=gTcfm4KG,>@CB&tBoj.(!NAL9OoNlhcY#*jC@ap[idQU/+O'=^^J8Yh]>%fR%emM%+%-0T#01>R$IJF<"l5%bH!(5p9'p3Npf6$"rh`:oXne.aSj;BAo3dLIlR7e(B"jX_ar+$^94,fCgc=4`kRV!iO>K579h=%p1INGQXbN2"_ELW*1O4sHNr5PKq19F"tbt/]a!WOTLGMUbpau@qu6Wn%P[d$U'lNg(t7_98-Ff+l)bSR$XlCo/khEn:N.I&ag"''%EKO2PCNcOj-q-NL[SBq3OZ^'bRBGp[VJEf.q7k[2\"6<Wj?2cFoRH(o"\?KlXK"CKFgZ%"!<QcPQ:+8f`1f8h..lkpbG?ZeHfl%S%)5mB@_n]L_R^j8/^X!]6O]dI@LlBdfiE>U]Su%r\P*b`$;Ku6QZb1=NiE8W-%Sh:tLPKHul&ZSK"p:UB'oNEI9*U&Hh$9i>aU8;@%i>^hu/6Q5_@Eu\5<$a?CX8?&r=3@@Z/I"(mhqncfftk7(W@o%7]+ogjGqt^68M]l<&D;*DARn@Nc=4-51c9?rCC94Ag;3Y3L!rD5%R?*aHlg$emWmkt&R1C67dpR7eJ.C;[bm2D6V;4_k#+YLn+e,ZS3S'G=LNfpY?o1HQ[SNc@Wr:`.SGKEgrSZ1h4E!cl%@O).SE?*u%c-+,o=W(4&39BfR5*o,ua5oaKmsLkQA^LX9b:)'"!XeC#@3-K;1$Tr+o//L3JfOc\*%aQ51QSo7_oj5CZ,>Wi)8%Lg'tc*'`<@oQ%;"]H>:\'[8jgpV=-&[+dQufP=e]a!ClB98bW`?iD6N"K:LAFm"b1SdIF_=0fOqnJ'-RZjYk7IC?31Z:3Q%N"A>m`hIqb5^P&"b,Z%:bPC1Foc$?[-YZLP\M2.7ZnPhcjHBjLJYE1YM(rP(+3)M_'uSV0UUqcNh2.fk-N-]'FZ=6DM#\M<9<%;P.Y<Z>r#+@V(Ae'0P<$F%<Qg?ll40H0@4i]l,FM3n@D9ArQqM?UQ^!\(%Wc?`<68BsOqm(q,l(].\YPaUod+\D;:F0-Cs\VbEf1NE#0a3HWgPk><=_h^aU8;O%&VJY]DmDJ]WP'ZMW;==ZY:g'T]fU;W@?V=a>jU'Q+r;C\G=msT,?(Tm1V/aV&<QU+^/6SsP.6JSHV(3.K2Z+4OjC=-#OeKsL#;("%Ya4_K=gfsOo3$aH*Lp;r(Ha=621D1CP/U-7k0dCcC1KeZFh\'T4`i/CT4ng5GdmFV&<6Fn8GKUe[kLP&>^DPIr@J`9mJSV6dKZG\%KkY/]P1LBMde_h*4[e&+"bFc]Op-a-Bp/^aD42hnH'4s?P"$ClE>_p-cp9^^9iEj7]Vb%6H,oS'Igac&OFIb'OJ>"BQjk^1pTB%'%s/feTQdWOSKR-cucF_,AB+%#^g![O<A9*:,eDX?<UToKFYNTh;9]_3Z6%ZA;<;kb)PJ#gr)=6R.SAl^jfJoFe;UpCu?=-<YT-'lG%cQa0R*3&2_K2hVcUr(G&'n1Un$ND0HnF%Ohr?)jS4]:7r,8GZVPR>1k6MqZT9!<9/;,S@M"]/p@#T%*L<;45n:@`ukEH<Q9B2%)`%hF<)OTiC.3Ph27\M+`KNHoa:,Q<@a_`-Suh.>p*j-nD,4RF+RRJgk\2BUP8$G8BpVd5Ed,Pj1Ckjjg24(,_aOrWe5<=OtQrk@D+L%<qXQi:m@t"S4\q\E`p?IELc;;c[p^a<_CmP:3h9(R%VZtPSt'M+Z1<+bZ.`_fb0<[-:S3H,;l&JMaD/@ZB)<$I\at&Q![0XNHarB%)ah#V&Ho:dF6Nbpjkt.]hA<JU&pTIo:t:1s:%FGr_5.Nu;a'2EnH>>H;Y>Z@?=39:'TIh9(l'2Y2[@AFG\>)-/FkD,Tt1_/=-=AI%03*TAN)Mn#<?%jB;QAp<Ph1,4Db4'=_]#F7L[Zmi$K52%Z5g`jKW6&_>*>5h[h'&jU:7G<@Dc@BQ;ERb.'N&0NSe:Y4N>>JHu;%_%*:UN/].ANZN>JVli,g>ladD#G"[4q1bBn&q99'ggEcB1eMoN]Ke!PNk3TV=XHuu+Q3U;hKjR_)nVIqME8W)@@U`C>:-OY6BN)"!6%betd1.$tXNj;o3^BnI0N7<sS&9I5ON(2h*@J+E@^8FQXa8/Q`3$eUnFJtsC?%/B9KO0;-,1E:/c$/u.(cK[;`M^2GpVa[qpc-ml`%F>UqTJ80]FU3pk=d^#[W#MEnrnk1)Xa-r1]0_TQ+'^kXMI1@\O6kn'CjC&=n-plH?URn7bdp^[G(*#58g9b;6q'/ir1WjK+L4c@d%#)jb<SVf$kU/$j&<)TX^.oeenocu1-%[$hW36ahIZuJ,WV4%Xe]Y7o9oFD@cSdboMnL$c>SVDboh$9i>aU<j@3"1R^a;Z3<%c]5_%`aLk!%h/cg8IHB+XZ@b6c9n-PYG\6miE*%!E#M;S0HDF<b].BQ]Op2G<_E$+SFZN:9Fik;A$uLKg5tVd<$C!`9[8ag+]RR]<0FoP%Kok#++m1)n.lP]7I0`h739Bh0YcY3lmfGs+DpAm`0U;5s4SsrYq&tu;AkjDpEA!K6cJKV>HH<-Jc=XJ`I#o+b3nANM+h#G5#<T2_%aSR.5\`<W"gBH[:&40A-:,U-d`ks+?e.%PZRA7p:+bZk.7X9-kQjsh_FA;JBpqSIZ-UQ`,;2)e;6;la-:pkpS9Cc!=el!uD%,=JG%2Ne-NKPDKso(meAgq*4tLc6?)GftY/]]C7`$f5o3R\#o=,f^i62]l1Ib971<FHEgK/t$#)P#i@(52$L=2lLc@]4HC]R(?jWBIpc,%I;G?"F*Woo?^/$>[(C>B=]3j;3h&iB1RGbOS/B#3BaPUKJGI-.U@F*1ih>q"nH;QV6X5"J]FH]1cDQ?6p`uj+5s@#p?"e*^`8t*"%.a"ehntD-s716]t[hA`/MWAN:]IThZ<;kb)PIs_V=(9oO(.j[%;=YkL7B#Lf.Bi4'(Ug_=1VM2ChL!OO;"J4QB:9EB!Lm]d(f`d[%od%j&9ta*KJoRfG]P?JK<_>4[:3h8ePK>qNj2X^4n[fWmF1.#`3Sp_&bihgM677tB,fdZT\G(X:pbsS@)lL?[A26<YlnCRWU$OJ)%R5]FU;VC#'0b,6La9dULF-I[t8PV:g%[U:@fQb&#:,%d`#6n'f%&A1d/G0)IW?)7A3t.qYJUu;]"0!C5q?I4&57F?:(eF$]"6nP8%U]I5i;!5l\$r,pPd%!hn'2bct3I+$5.<`%Af,7,'P,Ci)O>`BKHuh@"QOK[eAtd8tR.Gb82Scu7A".2h-R)O_i)GoQ?m'SHk)<5'%jE2E>ZVmfPE6@K>JQ`uO&MT*f#Z\Hl.b+$P0T&]s9;o"Ge!9!J:b@OOE1FokDqI%?Pu9aMVnBa=GKI"Sjs-IrbaB!!imM@$FD;UG%o)VlYeM<ncU]oY5PTU:'99Qf*ff7To7&\,A.Bb?B87cI*Sme07kq"VsS<GQ]?<rpN1L@'KbihgM]Qpk<%\tmMo+5OHJ2SjQ.L2la%\mQY?EYq@-M$DDLG0>+?"%d3Q@a^G[+/W&$JM_*W<"B(&BkHLj=7f-hr;YhlnS:I8p9q1H(h04q-q$fB'"fegeMEtlUa9s&g/bk/%oH)Fe)l@[SWgXge[JenHLlHSH8o"Z&VU@FtQVgOWaf,'PW@)u-^XTQg2#8B!T;IcKc%Ar$?`G>_Gs-oLC`FrN[PN*.OI5/&=<TDq%\dqP[Or#U)8NMkdH4Fq\f41"BWfe7]eKn.nCC"At<D7srhN,RjIbrhc6NXqs8>sPEBd@u?BGqLCBUm'ccU&[i<_E$+SFZLdmui'a%!_-O]i*@P,i*DMJ5BrNJWZ7O$P*`gSoN_d[V(Ah&39OQ[Wci@(lV#7HX8*eXj"(XHgmBlJHi`<!J)Q;2$e<Ik4JLk@jpPg9q"BhA%hF9htbGOhj/^3H]hdJW1G;Pje4CCA#FF*@g3'DIDS"<SD9R,&0-^[S#U[Il4-<$/XpD@Nq`>fZTd?C*MV<'86r8o3Hmnrc1["$u/%,o9_@N34EXpl_dbAGNdB\ApXZptB>ZaKfg.X8A_!!4cH[Bkd$eiI]E?jGU&uqnTFAle.&S$.XHC\s'eb9<)5/g)/@-S5lAn8L[Z]%N:Q7CO-Y+A&8O/R&6iMP=P7Hl^.6ADl'Y1?P+8f,>,ias>*dZu)Ic;p1RGbOlqJ+^d!LuA4+f>G8A$`MX=is8@[\Z!H'4]]9-S/s%qi[*b27C1Ol)MJ=Z?"&;MPcQdea`^*`%oepC1`n(,"8o`]HP)7*uXMJ)6a,jL1M?r-pc!ifaJ.j)9V`]L?(?5r1S+$kDt;f)q"BI%]LMGmE'>M?kQd.ij90t[g,"%GoC"KWR<sna@"j%[`hOk@5AsKAAZL'76cDAM%#&nZS/DV7$^ikGeIPD<aU9,%G)hE%S@PsgQ`X^;%B9[-PSFZMSa-iZ6J]Cl\pPg>!!Vbt+\!l`S9FB<uE4V7GcuGq?12i]J+g9TZSX!*<K2Z+6Omk#"GOW:B4F0Qn-`W9t02G>6p_TrM%E#M;S0SV&?Q6G-MMlSb[jnfG9Ri1><*U3RX\)9"7#l&Lk5/m9\rqieSVu$j%3B39L0;\QP8&0JIZ97_iGjgqp[=_Ca?cpcAeU-F5%p3E&J8b1K'+%\9BS0(>%B'/.d*TqfCm.3!-l:UU]$%A[Ejh4.-kucgrp!IZZE9T'U9Bg7;WEnb),HYqLCa5df%Sg)g(VE::QdTlR%LV.B^FB2$,*1ZTrP&^,a?DMTh02f=k\'BDJOc6;O7P.1>VU9I0OieiMI,IFCfo'C2o'2ASBl\4gk_j`Lj./a$]>s*XnF,:#&rQSE%E<eM?HSi:;HRR5\jh,r!/+agp7*;8M3AIU1dd2?`*Tb:p%[!Cj>pMFS/TdF,R\%(^,UirK;-'1tX@n^5S'M>j1!RpInsVm.Zs?Gf%`rJsE's0a0O+al4R@P:2,r;BC17'@[EqRduf,g:8?ZmS)PGFI4Cc7c[AhJ@'0sIf&I\XM&^X:l#2s5(6he5Bk).iFZh>Qg^h';`T%md-XYa5Ju2ONhtp^X:k%nf'05UXrHU%IH(1d'.O.*CLXRh%Ps_h$[4I3;"OM"kJeL5'4E_nm39u]%m`o4ZMQrr<reo*plDU1%$/n%+`(&Sa9B.h2'WnIVc<WQe<@NZ=N;FMN)Mat=Uu18Pu>kZ;dS>n=EbIA*]"Up*[;JD*j-?eMl]Q?UlEiojFtsl2]%Stmih/-EA"UN%'p1CLH%"(.JhKj`^j0b:X%B_].OE]JVK:;)Cf^@7WCCJVOu.)"+[ti+AIOZpQc+"cVit#YpY_9;QV8\'l8hU&R*HP2DlPTroY]u'%)l5"hVip*E'1kBWZ*mi!B?Be>:>6d>TIHeO^?@/SRSaQY8l'&XltT@/Z<5@"1Mi"bAkn'h)lFO>H?+u,+\lfB\OgWfS%(.5<d1q7%Pgac1FZpHL/NS_<[-3`qld2A)W9V3u-@)RZk;@Z7dPVPTdtYCCSO1j_UV+/_'C#!,;.XA.4*mL9RIcr_,GVh*UFSnD^8#`DNp7dj%Ic*;fL[V/]^8(7mn*&m6iS\RHi8,$j[V/"K)[52TYW/@j#EKY]"LI=Si*OIc8TLCc7V<nZj5;YTSDYj%`iIt26FXkqp[BL$=[;jN%qck;<\hg*C8P=LV^)P(j*TF0jW_H*bb/#O1/piJo-"rD$QZu:<d<JHLpt<<XLhV1tdZYsF.B;aNo:D[%8[DC/Vhf&!k*">\4[lYP%Gu##h0&BSr1u;4XYJ58r1!Pom4@t_1'm853]W3FedbW9^MO:7f-@&%r3'p#IM^8e'Q[Dq"MN(/SU`0?k>pPMmQNIp"^#_6&#e>AM%2iVbb&d3'eR78.d$Qq(BMLI:>aHW'O1T`e5]X(#dLo>oN6qB(pR*$@9bfM)IS@OMrEZ0n4,]=pL:_Kdr3?@EY*I$X0D\!\UP.TR/%K;i)\S?^DF?(W+5l3F5YjFrUU0;"Ch:@B@p[;e5XV4%Xe]Y7@VTmfg%]&rS2jf%?I4t%MT<-Mqr-Y]8n6T`F\[mQ[R)nqh1/g&o0%o$R-B&'@Dg\W`R)2E4.YQ$aNEj\!7HSODg:^+%Sl3/o1:[-4$MU)]*3-$c\Ro7cCql9.,goc;'#o4CpXe=p>#4`<0ASl"fK.E]K%%"?FRl,./hd85[[=a#N\S8Z%U=BLtrKdi`sk_]Dhj6CA%P$=t.:>9:pD#h@.h6K*Y^c=*LsKJF!>T'?fZ9ES5heM*n2IE?ic[5"Z$%\=KR:L<2#4IETjj.+C3,'WQIuW_$Od*t;p3C7N9eDqI%?Pu@:-;dNi%+5LS'"rni-64G?I*=F62,l!Fbl8gn18RCm.4h4D,I2%FG%?""$%eOkN6N)O'?@3E\*N^a6@:b\#f.Mt`t%>1&o<:/VnP.]jAih.6/.V3mdNH=6F:lU*+?Jj^-3i]hE/6-sG,?J1*8Fe"%.W<>k%:@`uil-35bb'V3V^H8I.)-&[Vjn8R'HgDl;7s=9]atnFA[jcm$B$4kpW7a8%k/gl",Uqk"d3`Y>89^6hC7M6a,&Nd;\`>XH>]Z$r%RLgNM`SV;XW[R2!*`Q.9[j3/ol3F5YjFqCq8R2fpjKcF9j'4l2TrJ?q]Y;::fG24b`c\r,$,O$Y]EthnFEnNdW;=?0-[Egei&Y3$%KZN^j)s9m#Tpc4a]Y9W$A*kcUgJ'%I&S<u!Zud1$?YN(h8p)5GmNaGrkNo(0k&7f94P.<qr%1N@%Sh:t.3u#9V$uWdb+PUE"8+'R%:fAeFjY;@W<:_].1?_;)5=ugc<6CjSV$u'TaoE45/spGlkHS2Rjsc_$<jd3f3ipkT2QDoXPpFTjM4TmSl58&=SCM8\8L[Y$39A[2%-H+kKdG?k>KLkM@f4E!l&BVPYS@lCOGZT'0*,e,REV8t,-roI^)M.IQG=AQ^.>C)F11O<a#=;Cicn")a#Y.l*:,U-$hA*$CjkMA1%P,CiiY:*C839BfR\N.9,ZHpeS,0)l-LFX&8jIBMjfI,hfeTGiBP.]^]iE59)S<LlS[gdE#3C<CL7X9-kjQ<[FjN_o)Ui^n'bos*K%Rj7paOIIIopVH)hnku#;o'V7nS1Lkt31$-[<9<&&f,&ifLlWcldmJ<s_tdOue!MLN!:P!^1d,pE8WrhY9^YMd>\99YFcam\e'-#^%Y:9<Q$ATE9n8Mp2)%R6+b]J(hIa8E-rqho"5='nqZkSN,o_t:%TumAuo*OY?H[JO#U9Ph()@RP>=MYpa7,s71Bmeiu"bNVH+YMVR%cp>s+R)rH$P28@C)[ccPgL)@<62NDsAQhms*%#<8:+_h(32aFTWLZuXQ)YprHBK)'Ku-:BK%Z:J<?(*p(nmr7VnBa9HcF@Wdla(/%T3VVZ:7Rh5UGJ2,H1ZM3j?+YZFW[.A,VSpp-D*7X:@jQ+D4JmDWQN%+YOBQb3Qi6*llr(,PKO87Ss%FPalNnpdn'%-`_J-n:_.i;%VrZ+2>eZjPjU5=b;Ckh0qW^=3NI>r"`'-,;V"+\oYE%XBP.]^iGu@ui./d:T3Vr##Wci@(lUs6"j7'Xqi/CtY+OLRk8BBI]WgPjb%1(LJqQ(/+d(M*PVH1UO:(mSH&oX[#-^Na&P\[BS1O[9ncXM%+U[PrP=Pj1:h>tJ@;e&d$P^%mrT]f+0(E^KF=SFZN:g2F9d"cW/J%;#H<O6Ld"f,sq,\TkXh1QK0?uM>!V#^Ie"=A`K:68>sPE.BbCm9i@W/"F!_gF"gC]4.7j!C=+IEpVGl"Ee:PA`AJX%T&fN,7V<nZ%jks"!*+pOj^N=563UbI`F67)&e!aico1!G?k0fG=B-cF=/@=N/:R7feS2Qj21GbB1VV%2UCtF;paMhkQ0I8m#RUp6JLc*];1f*9)%,Y>^%k@CKAELBsmH4asOS#0dMGtg#3kN0>d%o>lQjiKceELAYI'.5?_L&fE9OmsJ0+XHH;6?Jn06A]7d69#kcAeiG_["`*:]t&q"%/l4*.0N)nA0lmqZ:!jIm4idr,d@6%2XJ\5&iSWKCg(a5<;3RMHh5k9tNa\!%do]6B,9\b,df4!RN2?.s<BiJ9,VN+U.hYV;l_J*;%e],.gCI0lh:3h7:?_r14YL8GYQ$VMPBEnh+oh_[ci,g>l+^_&fq'u?)f57&'8u]tL.BbB.@GN$4h7Rd_c0K&T)>[u<jHNQ%b\/89%+U%,VD)^X!LjNs.:.hMBK2Z)^C:j:jcusIOD)^Y*#'1jJJYO\"Vip+p[[Z_o*aFJGE.)+8>i4YOS+"aJoDQHe5]BG8]8;DQU$X0A%.1:PX'aY?bV4*7'Y@EmQDGk^TBY-jp4]1!(6>a&'jjt."DE<'XNKq`5K`7DRqTG"0?bST8qN\'m7Q!b129p5/IlkTVn'6T8V<S;`%]XhVl]NP?ZX4(=_b*6j:LN0?*-I"N(?E()[e!9!jC1l-,rfepkgIUh3.+OM!jjbC9r;2T,LG7,&(d&U^0^ATUntlOCLetL3;bQ[Z%3#92_+e_-D.lP[!oF'2/39BfR9fL&On$%`KoV(Lr;2(m:i^jYT2hgN\38I/40G/3rdg+2mQM9#kkN*;UEcB1eMuJsT?YL&$gD;r8%GK2(saG]&A:RJ",-9]K@hNYipTJ7<ed*P'>R8#InQb9'V9mLnb,nEj),kGV=q',ESBT48.LhrM-F*WqEkZ=H-8B.K:8OWmKCc5#4%>k4=m%a-sqk9)T8FNu<[os6)n'P."e,B_;b>RZuXaIq0GVn?/qH<b;FgYqF`&3K'BUu+XKMJQ0#PHDeA&$l-no0G;aB0[kF5</<]%0,P93]7M$#El]ah:1pD&p#)(dGI6@oc]Q*jd5)I_-E9nR=>p"Pi)lrS_5Sf-W>-ep,,#Z_(,p)tlbk5O1Gd1S9>6.Tm70=Z9ge;I%?fH%\ftU#B3Y-d>h$9i>aU>h;.SW9i;a'2A)lL#?WcE($lhf@:#=H#P5(3,AT,F+I+kP53&piZ1.A9`&i)GlP?qPN$1H&#,OCtKB%2CkV=#H,5K'V)#eFT]X)2-XP]2d=.2@CChec-49S3_hDDMAo/?B6i3;2jA5m.\$7rFKFqt/i+bda8C:C,PB<OOJ:LTSC#^>cC@_2%lelk2H,7tVjCHR1X3'q$NH;dOK^(QWjn0oq_phL/_hJ:2RAXIa:lor@L5$2+Va7<9_5S`+U!LrI!$`TNQ0#\;c@q5aeMoPMp&1$d%Y<<='P"#SO_Fq'6;tIDjJXHS/VIqME8b*&hpE2.::DTbRX>ZJ@1D>tbU/3N0C.GtA"iYdr=%u]-2W3kS.F"'e4@t^:(UgdI=>()Z%5GFs&e-f3DR^qK:"`n/;."0*SXTdP"HQLnY1ofVT^mPiT;H%"FnUM,':h;kgEN*)=h1KN%!nhsTbH[pT:96+aS&;W`)g=Sf-`Wir%',&LqV<S;`T&^&rU+I$32WAP.]Op2G<_?@&:3h7P_g5aX-A-Z(&d:V)Gs=(4Hd7.CWh(+$,V;t']-W0cf,[NDqJG7t%5X]H#H,5G%jF,E2])gr&IIhN9f@>.6e2?Q>-;&D&SF.XUG[I7+DXc[sH.BnpT9)m7K2Z)`17?Y\*AF(c=XW4ZFuG;j^7D*q<9)mnP.];-PNV4j%Y:S#&Z8^itl9.,god-A)K@0f:>B=PhR58;/.*\/@8lZ?r--6Na;baAS2;B`"Bt6+!UM:%3]Y7o5oaeXWoV9#l41`W!B?lo+8i8CP%NuZteY*$?>>iUpD@@h@;S'%3k\[tPEcZ'5(g:fI`HE`1KRj[RQnj^jsI<ea]W9V3u-@%%&M`kUjBccih[qE$FWd\p0lUs5iO.$SC%22%7oO?R\,8LAZ(BecXRi,g8j_$BRfdVkYu+jVnhCfX1$*1ZTrIPI:?8W*P?4"5X0CcKi:iV!:VlOsoT)$RYpVF8>D\3*>\loGdg%-`R4`-+.PK),8@\nsX%'<]LO>QX"5"alSSkW.p"C4h8p[ab?&(=_PA.6H_5ZdO6'(:!JBXCG)u!^AB<-IXGN_NPf`#LEY,20V%uJ%3/tgp)BTeko.Z]s+`Dg;36f?[RYTiYra-)3T37c/cmFJJj#dclnjn*ok6fWaL<a5'<;kb)PIqUL`d&KBW>tJdNRM#ZeN>hQp&3=7%F1s`C.9,3)D[9g9<n&b%9H.$EfJB?BRF+RR64hnp!D1*I9B+gO`];N9W\K<(3T\d370.GVAa!d3kV?`DLEafsUoFF"kd'5JP.Xa0%+;S8F;KG]A[;i?#5V0M539BfZ,AM,0,FB[N1'DZPW.IkkhtCIS#h@.hJsU24Eu6>9+W`8Zdpa%8[Z7?bC7*JT^/Ps-4ZuTZ/U3ki%R6<jf4?ZJ0<=_h^aU:SfFa0L\_t.tui-DmDcdS.B:F7`>T%%k(Ql(4ra!4'Io)u&WkkmkAFWI!T,VOD6`8D"HEEV/*EA"n!W1JW?%?=,I^``>&$7_5<M=2`a77ZEkocLau6G&V1f?8A6G@gq$G=l-N*0(VQ2`ka+-0,[X`KEmI-94tEKZg3PgIDVQ>UK%!(kt^f$mn'+o%&/:Jle]YtC!'?l(#H,5K*6KT8MMFa'n?Hdtj($d'X7'QOR&4LK4\:OICnsl%@(%=P%9+Fn`\]Jma_Qd!`O&p^6.4fKC3`AiFK>/4%^!a#0fVWpLQR>AqQ,TQ2\T-k:P'0F+fkd+G\`>XH>Ut`gB1_6>V39'_asE30&r`b>QXi!L4ip@5CoJ[9K$ogpk:F_k<;#16f9_q3%%S`kp(ahUR>=n(Ym[?pT=*JFWWDriSe<@PlluG]2ZuMOi]P6DJ<_>4[:3h7:SB]Q!T7B[_X3XXU:"Es_Dgg7#]*m/[);Rkf#\Mg`%Z*h0UZ8eag>H:Dn.L2la\mSE4iS3K($D`)K3>,?KWUt$`"^c^?CI0Ji_.*U.cBP!U<0sd=7fDY*S?g3!9SDCgGe?UC8<^72bp0TJ%U`LL>+e9QbppB_M?Ge/"$WT2HPpA#YaZ"+S@>rn`Y1YM"PZ"p5.'N'[JrsA50m<a@P_,o1<'d4E*_/N`(TNl`Kq+Jm:9g:4Rudl=%jD?1(_(_/!Huh@"pIj]g-'*j(4kAZ)IHQo#4QIYu>o_?;ZX'N4bih[I;I)$JIKsdd')10>c?Y.tl8^icebrBKN#Rr@9UPK]8=;1!%a@p;#1M&*87WffCmNg,J&,;g99UJikH.Bq!XH]_)SFZNNq=&95dmI1Uh3eeJ]S1Z=GH*4&BmSpiP9fUL\QDSu/Mj/tXp)OflV47E%R7gjboYJ3;4n__6_Hl0nQqUtLOh'?ZF.R3:-S]n0S62)E?99qaXsE5]f?fJ39iEj7]V8drTQ3BjVSd_R86\o%*L.;,WUp&:R10Qu%pNINo5i2YPR$S=cX!:5up9-@Vmf)LK9]OS?P,ZemW%6GZ\mk'*o;1i)6?lY9/#Jh_P*_%;kIP-_O>h!Gc:Y)$_'uSVQgQGqS+9&?%k`JcSAr'8Z$"p>1f*Q*:#Xpt&oH5NK77Bi5)OHoRm'=Aa';:cuO.#&3F/WkDPOEe6Gt>Y&$7?A[mO:6:aS/dKWr(^r-[ENN)OuUo%N5d$d&ts,>8l[XA]XefUVJbmj,"%XPbaTbNDWgUf:Up"T.+L::N?g.l>inXs`i1!LRZ5d!.Ficab3M]OC@d)ESp=l@lmbaG3+ht9%(1*k;jks+$]Mp:%BD9&o]_@'F*i3TVVnBa]7$<T"Thka^E=XB/;$@V)3irW#8Z67`j@pm?k:l2]*_`@TD^3@l@Of,2k&d]n-l!k[%YlUV@e5.ZGW'[Td3UdHb!edQpS8+4RM?V@@C90slj>@n>X.,AV7nbr)od(8C]u@gl+<POCb9s<O]e=ieOQ.unf>6]Dnku.7FbO9*%cQV_]@BS^h:d(4D?=!-+BQHFo8RF\p,0BA+1Qh;p_3mhdeIG>+aU9.*DXSBI2+_&^@G^BMU4[#5b,\1'4ak)oTahmPM'7e3W'[YH%]IP-M8#Yj.e",P's%;H5d;^([]OBiB<_?@%:3h7Pdi^M"BOd-'U%&m2d<H$jglL;Y@[\ZcH'0EpUk\_%:CedMPk8]2)fHoT:!Hr6%RW=Kn1m.2RR7R&c%%-o`-5$F0rB6T?G=a.0?':%df-m=>'8Z`Sj_,jojT?01lpdSOgW;Ne6lHYkLc"@^)'[L^Wb4da8IGaNi(fdc%+>&M@2U2K%#us,Jjjj<=+FUu9qKrC2K$ntg6"7NUG6F`[<BiJ9,VN^&N#\)5a!&dO(Yc$UC*&o9q@8]\JsCr06m5%9A0S$]1.`$R%0U[UZ4uh@i?8.d.LDU2a.E`YgcIklX<=VcLIE?/kgXcujndmePA2'9)@`CULGG^BuNJ#\Nnq,77c"7uopQ5.'31Z=4]a(IJ^8(J/%*(pKpWo&Nib=!)&0?_aM.)%63jks+$]\ld>I'+=a;d!G3ER*/^<:/V.f6:d"bWD.Z^gU=rM9qV>AG6XuZ?q7>AkjDpE@uX@oN2`7%*:eiEoAO^`j[8=#e$6Vt1gM#Qk_$E*FO1*<,e(VoVJ-6h$VXL!H>olU?4'Bdcp9IVmO[h@D4DM=9%=GIH$q+qXmat;!Mcmf:jdel%6AYcCIhW5-#h=':\rs]?Qq#&[65er;DqI$N&mD6*K2Z)`ngr<3"lQUOW^S=JFtquKSr%eW'Lib9Q5R(U/bkS\qsGK"G)0ol:+)l;%j5?/'G>q]!+c&=lMZX34!#Pt<q(T&o''OtiK^(`\h+:qQYf;6H^;='>BD(J9Kf,PR#H,5KBK#+#]g6\[DMF%=_j`BUL\59KCmps+%oH_PJ9q=Fr`ar[PH;&7`febL+a_T%2PNZJll@8rtbpK1TAs4W&hJ?Yi-ZaQrV!(r*e]F:T;:5ZCfu,^)F3/3TB%'Ynh^b"&mTbIt%ba-O2B%RCIN@0:SUEM5o$l`_RY9CAfAk@%So#7:/nk1)Xa-r$CQX]O+63=CBA%.g;I6["aNLa]O/rCdAHBOVP,*:%jCpGUqgGij'%#us,Jjn0pp65)#)C<fGV=5R/Coh,3aGJ,FJ<;kb)PIt:&8@kVWoH*R0)lL#?Wd/R+l\e5d9:kl[.N+mnnNKe9-lHDlpVH)ho"7hn%.IY:@-rJockA=6l<=VcLI7MBZfps.,n\uL<8r+s-T?%KZE`@^,*1TK](Q=6@\(=G3+No+JS1>I"<:@XPYOCu!*8)t5aOr37aOqrE%52j<kPHnJQ;b?P3-YDLWQhNZ(R:>JF0e(kr39BfRSet<]"%MQanAGl<nAL+a(HaE=2)?V@kVsB[7d=FO`$BW;ef>3k(oHl?C<YpE%?cmP[4&aO8K<,#4ULGpB1FgDi!d$nc;UpCu:%CUiba239UNQ,K2U%Y,$DZmS;-r&jWjY!YG`;N^pfKEA+l["^G,GooX!Uft_<FS_%;Qq)6,OrTb8_up7YaSBO#H,5KUMTNsSI_QW.H0*<KlN9e%j'K)lor?]W7o(e-$d>*OM&_DSRd"HbKa<Q68]6JH$qpS.Vh6r:X%/&%UaSST/f!Z!0<A!U.(!#K=g_Qd\1H!K1rRAbERmD[dCh4d1J?.Y8t1f*IL.!+RF`-I$Cl*+K45^^WT-Y?YnKe!\`:l1kQd.ijEO#n%kO#P792D*iqTKse2FTcRe0HE<b3pr*L>CXt_e7,5_[W4e^Y<f(9R3>sR8Hc.6DFB&]fUV9Hkoe"S4f(_Wd/R+X%O2J?L;cCfTb5L%<nhC^58gL%2RVk0eHo0SqquQDH(j6M/%oZ@-ZN^C)[S\7V()_J]Y9U[5<e<*dW<0iIPbHs+7snWWf\0Y,V>h7O/(UU4N,JTqRn<-%HZ7-.9-/qZK+]2FEBmsrX7E(C.o0m_.2:n%;1b=rLU]@;cuF>oS7do1R0Z5CGdJ_Dp`HN;dJ'$kq3dpA_2QZ5OPiT@,RDB54:J39%N'hi=hL?.!1`>?P+AYOTh`T>5P..,u@%(MbKTk*"rZ`RoG5D5PTU>N\Pc>dpC6BCG%7S.UHp15i=)FJNXV%R^E6@K.9ER#)65L@#%C@=iKe?JpQq]qO56?O<=Xs>Zg#2Ied(F>"!T%f"q!bZG3aC7VaF[m4jOT`G'S-8j58a5[K8apXnJi?FVaU<j>SWi!2%nr(oOd*hJ%P2M<u?Jj^YfQZ%r)u0DWDZa?Gmqp^DhKp2pl972`8R=([*kjqsfoX092U"0#KW8QPH$.Lgd'B8bMN&^)DTCE&5g<:):"(nbSg8U!%TVf_i]k0j)s(8Uj1c'3pCPn)n[HY,T@ND^.;K]1:[1]QPj/.)WQR>AqN?@%W7r5h@P.in6RnZg;Qb93Npi/O:$;IN1jU_*B`&dt[%dI9m4Ju5:D'Ardda6`HlM]On9s"V[$c,TL.j9O:ZJY_HeYNP-21/bX5,:/"k-^PF^Vfm>nho0/[81irNK:Lk*OAgm1]K++`H]0HV%4[Osjnu,,TkS#UtB,r0Z@pKgYl72+7&51n`=+OI%qSAp33MAOIoSdotHBQbO(nHL[b_*r0E^F/3eV&C4E>lQjgJZDK.HT.Dgf/Ko%\dqP[Or"1`R\\p>&>q(_ff0d#,uj!aPh-_2J2,P\A69X$O"/pPJso@b*u7nRb.CN1K@<B^]GWDXG^57s4QMp&a_%AKn%gHVn!@?4%FPa]pr-^70Vrmk_/Y#W*HaW4AHf(kmW+P2QK912FX-c>dq7]j%(8q+t6E:m!o&[,/a[4+tIN+8u*K9)7%\`Fo5TKLY_h<2PPRf)R%Wd8Wa8R=.d3/#FeKk,JJ`jlKkU$;l\]Y5)G1s]D:K_r\m%_R<H\RHe_-[a(u0MY]4Q[6Nh>RnE18_e[TEZ!>j)<KBp6_SqTpotm"%+7%=1Z$t'p;5r9cW?li+:hWAZa*u+9RUe<,V&BT:]Y;:9E0M?F24#;cgI'q*#Y3!FUUgt2GES;=_l&[8[2nh>-]e!FUlrX8.Bi4'%=Y8rPj$TbnB)mV_n^k7!XGpqAd^t1_qm:R!6D")?><d!s54s?.Y2iO=PGGGgq=Jl_CqddJ=Apskb0`*G3P*3pWGDEQFH(cJfD+Om%)IJN-nKn&D7SRo<p*"70HLRk)cHeA?iu^KkTDuh*mohBdqK/pSo(,<M?(_/?Da*!Ls4c`"o=qA^iq*1>(()%W\65ATQ.FQ6gCW]N%h`a?bD2=3Ts!BT7-a"9F@.77GOZ;9-nbGYS6D[KD,NI1$M<iOtr*#.(,]TdtqE$&fiCJ\_5[aj!GVFsSn+PP?.4C:cMj$[GJ"sc+%UW7>)NGe_67Mma-?Ps(Ij16T;D-_sIq-;P"e";+(i%Dq^$_N&`E$C>*+lpCeqTkd_s69RYoR?eG5QCXgrq!&&r68U+pOE%u^]3Qi%s16/Kj_t1o_[h7gqnN$GkPp6crU.]JrqcA=pVVJf^Yd@eq&fY/LHke(rr$b!IA0s>GG"a3DdN#_j>DBQ?Mu84eUBhkodAg#IR7Ae%:WVl$$$fhVT=k0ne$!\IWOfV3C)nt@A."W(iiBe#@)F%rrr""=_nUW<o6YcEIeC1"q3sVJl/2KXf0B5O++F7%5Q9tP_ls(5cfhlc%]`$/2iBR=Zn,NCYTDd;IrT<FtJ,\t&r8CGd"6lG]l2U$es3:CY/`GTjs8II==^THu5-1:Kg3MfgCrd=/U&A8_WImcC=Lp=\!P`mk%EBge5XW,Wprdh#;[J.F$n0(.[c\B08Ond/nG8^a1ce;#RZ.$Mnh0]LiTKNtJ\,M>70hcM:j/SY/iHM9n%*a^l<`lUJ>$G`gO]1>W%b.=HhK*[hQUX.7]C0?m>);nl=+rH4GCRdBG+h@/k9a3Gb%=MA$\Y%f's2@4o'^k/DaMVdV:irTE`;*9jBrqcn=SmmD6dt?!&]4d-%.s-2#It$lI)h$(jQ4d7JP#3Cnn[.$n$nZEae/mf\.m4rj8PW[rWm>JMd/MiVg15@C4`>#bdRN1A]JO&LE%8VX.Yo)-66]7T%[LR.%?ho%JOnqrgf(pk'7>@r_1oa4Ta)&RJLc%$Q!tO%#h%3khI8,Y1eH;+8+!>eakX5U)'`-'Af:O-Q0s94&#ATC5?12uUjbGePet;/o%\Ng*ub[G30*H-#bqc%&WF?L.g$6T]NCM42N#9L5PdVg/5-Uq086*.cKAQo]D9cJg$*HP,:efgf([&gYQkjJ,"1q&u[Y:W$-eglR0%/c/SOGbGHj=Mo30c>.jh-KGR(rMT\e-[@$<jsPJ[0=jq-.oPnDo^tbirT4WPK$0mloYfW[.7Mr;<;$,+5]Ac/%>/?E98fo3>;J;I%0?*`)2&G>%)#kN@C0Pmom!Vu$Ut!YopL+)rd`sOkl*1q`m&%'39Ed5L(Wb"kFU]2#GCXB*CD6JWhh(M)Socu3Usf#_q(*8kal7ZD%#ABM03"9.D?SCi'aBNS.N]2]&nosSUa%nT;U_#&`?AaN]'e&^>h`H:G*SiIu+,%i_\k=rr[Coht9%VTr>=mS=hn3ok[HJB/k=ou&%.DFNCdm`JkZg=@e/sE6CqDgla7a+[r%:#7:j.n;VlT&Fc1+V8UdHMk&0&.Hm)uVSH)sEBE4(jZ?T\8);6PWl#TsgFZ>dIL`hEIi.%mF=KXiP)[k5W>%G,=C59,:!H!A7lPeKdAW_)__<E7;qd`M6,=8e(oMIeB-(8%Y0bVjTLhYm/r4CUX]A'N-a\a!S?N"IH8#^Y<mTh%ou9d+):]l*$862)H9,kcV9<Yhk/lM&hC$]:[-d5]o.1jeI'qi,8RHgZUS28G>*l'HYH&Kc]/W$ZNXk630-PE$)>m40V;ASZV7sX?%OAR?Wbnh\%W%dDGdZ*C9ir_Z^49VBAK^-uLJIXR"Q8#mh%t,'!_P=pL2h]du:$FJ(i`2[PmWIoFCXTOBODLWV$8bP6_FW_So!FEI%f&!(\UKK)'9=[M&D%Qm7:mWR9%'<$Q<%nib0@P'q3-7;/qm3.2>T.NP:hufd4E]O\S4Cro6:Hk&T&\tb_Rdo=qHNU-[5Cu\KC`-V%ItiXT;]ab);uMQeXOl=7f43.!Tm%pf]O`T!4lF"VO*e&o!qbE9HOUT&E4rD3cliht&SPH>L>H)]?.`fW!dcFJ.%H6SrQt3jE9hV+%@]<FeON^e7,6?]pc(N)fWp%*f!5T+E%?Zu]VJB`.SXtJ-ob`LV7G42UWk*Rr@6RD3iTGYEm'7d)]gbPiqrN;Q[>7kg2@t&TY-#+<%hKj29"pGm5P:KAWVp#-@Y(a5)ej`Zh+4`(^U.kti2Z=UFKV4lOLg^YJk`5?;ps"G,n6K8qlleKSHBmBSgD6r?q&t4N\+e\6^i-k_%/S!%&&ld_KOc+(S0:rY?i%c>\=SatNaCmdOn/Huh$4/%AkX$Fjo=Cd0#Fb_uXTuI[IaJU0hdbNQQ.arYNQRciDiuHVZ0sh&*BCl[%%/70Np+Ft7+C$j>),/CQBj>/-'g!nF4'jR)D[&rt9]h1T"PCF.U.q8D#/colRl#T_d?<_14,B>nNR`,-"GMkD&?M=TGC2be1u9m/%+@cZ(]%-j)TEgo2UopV55NBEFXiZ^WQsZV?GCbW^nqi,glQ>Kl2R";B]>!hc5T_Q/g>,C<Te@C+KhAh1ZF2*hB"R]]n)TTY9C??o%;/Na:L$0/kol,$=Wg2b8!J7dlOMp[FAr4B3-o['@c.P;8IDY?;rq/;-:+Yt62(-sfrL0)hT#Ab^b6'[+X\qEq2K*:g6#1gljkKVA%^)$%H<VFtXGY.!Y51-)fN0l31V9nqA+al\lIe'.8LcC]HnE)\9o,S=8b;ctDdYpiA217ZCSCA"ZV/C1"ocdD0Y9.&]s.RYVZ,IeK%fj%l[fK)t*Jr+ib6%[\R<WZ7Ym[=jh39p2'.t%q50%><ZVC6%L7B9DLDTFQT;WhJL.^[O7^s:#9`E.I#Z_rmn;.';R(9/$onV(:W%>@2WCgbY@9IHP?s`eAN$%EZt.3u(QC-rG_SXs^V'kRr6iY\Pal3/YEg8$Ul'WR2I"!Zs&bp[2MmfNQHR5[?T<;^s^PWPG5,KZh8h%Cj9u/2\gM.[kf4`*&i$@@Orn9?f`6^.]:p`]"`u8`Z3.TTB?[qQ7)ui*dm&<!_87K8^BkRL45j+L^u*mj&-KC>PY)95U[fA_LLUJ%\\j#M1OUk1T=i(n^PoW%'ccV"Dus>WbB((9"C@D.\t6VcedpT$"[2O@ZfX%4#]/]4++2FTP_.ctE6Y`&X9TV6$K,HSq120Scot#d%E:Neg.eMhd"7*OL]s+qBpI>!&\;,QD/Uo4-;,$$4<IQ\1aeZ\!nt94DH;Q%6TG8/b$hPQc]dd%3$!5Y"\b]YsGn:RXAZ5?X5R8m"%[teP(g`4OhfGJq@hYZH&ME2fh=:-[E!,B^Olo*jYW3[G^@s#TDc'(P)56dJ8[CA1^kU(CGf=]rJ'g$q>HJ'aY"ZL<dia1o0":P!!%:=NqFI]u#$._u[a89gm-Pdg8I@h9e3Do!7T-[Kj=,]%B&O]%"m'Ur];OOHI?$Z<V8$CWDH&.S=)mNJ+obkhks-c!9!V*t(7o?GY:%D!6j[(IL]Tdk8RE,7F\mJp\.((a,`Fn+tB9.Td4b0I$*RO_*-2&!_^)8_[K:k/9_]Bd^B]r8@t9ON`q!(HpTm1X"SApSe0sf;B'@%k$ntSOb3>l]FgSb49X_S`&TDEi0NB1js0js)^sY=EjkgP"'f1sWeC(/mj(PQm08"I+J.O@97r''UqLTU<jo@Lg5aa\p)Bs"nHab1%F?;uC5r'*r[,SFMVamo;_P-OeHn,sh,WQWQ4s$]k3*a;-S6fj$>?47p_G#V,#]+@!?c!uir'#Y,;Eeg*S^1kX0=[m/7ueDP-i<*W%B;B)`+$%!F)[rq<#2RIWfVQ3G!%g(\*F:6ED@mD]\"IAIX).Xt@]5j?j4t`c=79YfmKUP?l_rmH"K+/T8!_PJeJ@#t+h\ZI]/su\%pCTR'],M+GY+saT(+L;b2n[GG5ZNgo%7Cc[qmpuq?1%"]fe5"K9B0p[jkX<hH#_EH[efdiDD8`9*?&R[mc?l3Xi^<P^UtKm0CK+_%dqjY"FR][H5r+Yno(qV8bDV!k0u!?3M"Bb87Y'?l/;V<K+>.&K_HT33"[:bW]`XB"/\\lLKm.`KbO@50KAVJr+;OqEg.QJ!@6^U*%]PdC0&Ne<cD\)X9,/Zo)H:%J$I&_C?ZOja,=9V<W_PcBDlU1W*!K37"([Z'Soq:2;V%8t[b>doh;=IsH7I74e:t<"$57)(fD.m-p%H`5>sJ`e/cYc)(7^4Dfe#).u*(76fOF4XT(0QsT6GHJLFc)V:j?Vg"*dilm?L]3N9<\HJ5UGrcXj;n,ZB%t<`40kN!8e[kPh(PiE%eeF-n,9<=h].<%f]tt!=SUff1s$)ga(/rj0Ch%FVfD2k`ceV'mSaV%?2os`GpWj*t;RNFb-[J04"S3^"rH]RqBmg>^fcY%oa%uBF%M=%U82tXdL95RiOs%R+M*i[f$PM6R5e+bYF:D"k*Y-njjf)S+G7\@-shZc:2E,FPJQQ2b1J62=--]]gl!!0n1H9Ct^*"DgN(=W-u%(N.T>goljjoIOb\LRNqAUYQLaLR%Y`Y7WeeY']k;51ci5PN:h;[nADaEUg_hV,#+8lcieUQ[H9'"($A!BXSDN"WH8".-L`WIP/.@%_=i;T!Z2&EpNdk)g-["A`Of:;pPT/dq2HPg%i:H3"ep?d/7+?(o3u#o%7ZfZk-kkOW<^]Y@Rh2N,$9q5QHe!`gnMJ/,<.2[^E8,p%fYua`^s4oM$q'g85RRZuKQf)"5MV(>HIg+9Rc`DkG6MmC=kS#/*`^^^U'lVBC8E;cb7Vo1Ip\#mJn=K]^9`'JQT@["-h82e*O8d_%2[WNbXn2IM45]dR\tP-A/f$8k]"%Cf%LSuc^V<Zc4*_d0ABf4q>(uDp2!'aBn4.u30mMM(k,ouqqV^[O9]0e1?4Mk],/V`km&)Z@%.!s#nP_7PM?_YA.R/QFmf!tg?ko@*C1l[RfhoS'ANn<d[h`(<-m\IkLbp`5d%?;UpD,6&k38cE9d"Ws[8=tP=Zj4F)E1\?AnO7'u%5+,Nq8V:V8OO_=>(d]gQA6>+i"p!s47MlG7;XhBGo`a'bP._P@C_T?j]%$KMg\g5h>S@Grre,cGJ531)J2%R;N(VM1It<HX:Z@)D%(&2@605eS]18D\FDZXfipg&d,bARf?DmMM4>_ltFS(tl/Wnl1_XBsJ$TNTG7q]RXTCY/toro2lsT'NiND]D<u[X[nukTNi]c9(Y'%^YbAX.#$SRKP!hFV5rHm\cA\m1AZ3h:>cG,\MhASYjE$rKtKm"6Kqa&c"u1--[[!HC!(,'3g%X>"5ZMfAPG3K+OcZ6\(4Z:)/rA\%CIM,aoHq^^]BPJ$miEj!A:WXtEraP*!OB*_;Pi\*NXYF8n#M%9lo!U1>QF]rqY0YR*5C&6^"J=<!8kkPj'@.I!?cL44V"^K?VaR%%8'n0<X`*4r<r\sRUm_ef1rI`1i::\:(&mT$]HDlE?=Q$bJah%c+g@S#Kk/..C54jD^Xk(o*rk$SMhaB2QhX`&:*C5W2?pD(d7/.b%6hs':A=Z(tDYQ5c%K&cLNV4;Ml9WgkU.6\J]gP89=WX=f!C4^Q].Z`m#4ce@RiiQ'5$Z>G%=Z!/FgXDRMQa+T03u4jiCW27rX'ar%HH\E.27Pjj5cT\HY4pr%re;!W#VQE4gd&eY&V"(m5'P\q)H7:D:u4H)+0/-S:\5V#%l6Me*j.A"22"uDNC.l=>fcbX(/cPOc/UCE%FM%4(_F3d,rq041OnN!<J:iT72&Nn_qHL`&%\]).pR=@>*Nn#Y5OS$=0*P#]*1ft#.E?YoB&-*Dm5HqZa1gnZ31$]"Qi,HWG3TZA%([LXmIS$61jN&tr!0^3QBokY$S?[0)Vqm`1IDPFJ?I.9]ELlCQ>u#l:,q+g]9IC2h;<g(sgs0+OJfaHf+NC'=PkFRf9cE5<4kS/%%dEY'Nai,#[c=1ZlZ8t(qpoUmQ5.(@Wh`+@Jr.]+qCt;AP9Ri$K#K!!]]4_E=7GCN0n%imXdj!b;6jS]K+DL[(+8r'%+&)B^CPV0o%4nh<Z7^O:9c3LFEg'cL1JQ=`A+U57dnH&Mk.S@i^q*7?U&tB`b#"uYUlmK5jel!L+%OCi(QHdS,CQf\2qVcA"-W<RO\/igG?Z#/r%jeg^oBt",WP%;ff%9a"p792%>UAu*oPB;"t8<!hQpfhH)_#D8%`2eWZr2HR<!?g.9>rb<0QCGU]K`a%Wf6r0In^%Tp#2jQ8`RdBd%LZC(_GM+\NW//Nu3=thVmls!jFEE=(]GGJudElmkH4(X*X\YXp+9V&Wh?YBnd$l@0OAIR7pL)Yb*u,SQ<%=ou'fsfklpHX-d-D$B%*HHKtA(`[Ki,:FRAK!'$'OQHopdY#bd>Wuu4@$_q>o*KiMI7^B\t="I'nO8qTN3jBZ-TA2>1\O]]^JLc66%N295=N:En;*6IFMY2%iI/b;_scl?YFXdO/^bea.Y)In=I@Gg3t=,eibLd1J9BC=Al&dLlO.&F7&6MG\,:EMfEcYKPc\_q]F97oE>K5,\ps<,kQ0QT2^]Y4%;n^cBTt_DARku!On7L\_%]AaDF;FMEeE1DO*pPNI-+ZNp5u@T6nop'f,MX8$n[P3@n]qo*7.*1;g+[L3J(t$mD.=Z+0L"(2Lnd")%VDYg9p[@eR/"EH6'^Kgp&8d(?i[N]u+enNDF!HrmB_\#M]8MTRC_?R=)DLCuBENV,Ps<Z1$!80VE*DF>,uiNt6[-<H&oG12["fCr%+U<GlHh,"n&hM,"E`FMkKa298mU=De>JgA6'>75<A0^SU6JmMlYmC)"\eHDTOie";(uVJaVjJ6N#[?LeK<5clJ5I&?GL_Zq2%f9o%Na2PO\*fSu,LBk3.lctqXt<S*[)LH)>k[RublW:k<,\pbUJR6=M`u4L[GOUe4dZRQ`IRb%*8jViM;jWM083ZIH#X,W_K1Sj'r4I+%dS9Dki-`L\_K>;FO>HS_XFoP)o)NWt?U&i"7@5(iQ<,nW*!3u0_O!W@YBZ4DCGm(@ga"5neR=>4*L.#(Bdu'oWi@T$]3[Lb7e")7%$5A4UbTJ/gm,.,4F\WNFMY2/>E=$)3Q@=\^7Dp]D#Sic%)a`7CTYC'Hcd9SA*9kmFbKJ10[i.Z/ccaei!U9KAgOAV'\,fPS^kil<%XU=Lt0X`,-b2E7n,to^5A0Vdc!j2EqfL5[@q;P?KP)[iaVuB-hns_,#d%g?P4$cMHehC'h(T'2b/g@%Kjj.Rf.pZLa/,T(P,KM_m%Y9NI,:Y+M4^=/(3Y,q;=3aN#Bg]\h1"5eSX39j^OmQdL@L"@7U5IJt36B2ZP];,@es39<16R^uga9gqah2m)==4=TBp_`1*8==jJ%OVr`R/TOOZnGZ.[Y[>_C"`Mdqr6<M$`7Y;\A"aO$JP@6&gKf<H)hO!.%CWAJG$]2E"Cq,@)TKs42_+5<FCP9A:][7'mb]s)7BmF<%Gs;![mGClk(e68>`hAjKUkI'`^%q.H@*bF3)`n.`Ko@=BU-BHBkAj;omn9d-aWnWLf+Zm.eJe3J/okc!f^c"6hpVJq2r'["\)4as%7Bj^7$-)$S=)qKkEDtujFL5h4+4;c]cAFf^E'`eI`]\S52lTpFhRnYR8'1_!<W4'LTa[+(/"GZ)TlOr,eDI"8Qfs>pY;S^[?u+&d%kr<#D>@^QI,snQteYN(n.VE^_j"+VGmJVBgG\)#Lcm2sZJ"tNTrS'a$KukQrkE.Z=j>5b<+YX!eLu=`i7A9/joQ![XmqEnU,CTW$%Dg<`g^nAN/Xg.J[B:4]DP]+2aT6SQJV,:M4gfYVRjE#WT5hgqok[MMJ6)BI.BIWerQ]>t@aTj-sN*ROPTM?(S,R>bPYETL-YKl+i%)o.iW/i'1>>Wi<cYRMI(OHK=\+GLG]I8+1p'b)h[jQ-!7U=O5C.pY=/$RnOTUA*&&'`AIkQ(f-T@^cLG3,c<NMWbN#;$TG.D\GE0%MMN/E:;50Q)[ECgmecQH&^lZT@dpoWPYQCPc$e;PDHc/@n#7//\,^VaAgBfK*%HK%l.a:rQbsB&a7f_apO#@+@,`ST,Q&T>)FX[E%#';W7BTm\lo7k%Zkh"J[Iq/h=!3hI#3!DR)_#h,YWriPF<sI$c6of5)UXP`p:fa15+*A(G6,3TAqpO&MV[f^0!bRP1!uE5W@JFpa%$&Wh2C676H[;:Ng5fJ)\E['L]-n!.;$K*KC5W163FX.d\eg[`.!0H`^jZrHm-I;Q.6$17:1PRA`DI!=7KbuN=BHFH<eG0`>n53mm%-G>S:\<+^iMoUTM#b7c6%IA;[bP9p:4Cb0h/F7i=;S]^BIt`Zr\$i14/6-QN#o)gj17-$efQFVdh$.sZMS=I9Lu+`3q(Pe4o14!K%qUD-AZMa]2F.juYS\tW$H(2H3KBG"/?q[[*XR<s*RJb(B[^<X9%&:TU2nsG?F/(.?\(rM;PMZpIjVqL=g@*YUhRK;unQV=&pOJo^%ERb!^`0UN6&_qq]Q_0*ia=+Z>D<O]E&j7Mk`<2p@nKYl34K7t3^sWh`!gp8/=!c#,&34q07U/!EUj=JJkbS)$L>p&5/3l?JPhJ:(%ib8,)+\+d3OZ&`iL>P:OGV]1(2LH-[\rB?Ll>QU8d`&#.Vu+C4;%HbUMWho=KNauYqaPZ@5Qh:S1e:I]>^;NJ!H.sn61D7o`FofQ%$L\sT#'$)AJ4SB$dS2T%-J?mjJ:aOE8g,#Y!J$>Vr%>T$La)0=?$))O471Ue0PLm=1:7H>jlh[u"1oM-e$JZ!WWDG*_PrIJ-.%a+%/]q<aC<0GH+:4;P9tA,OpkuIMA@;R`'@7?bn$1,37@#ulP5ni6g8b53AcSKsc4,/t.nNs/VkK1S'W"0n"oust<0b37$5:C,GoIh7%;cF#KkMYF:!u*`'!Nsa@V0._$C$>J@%,/H--Wg+BIo#Wpl*EhgI;fgm&)W*;--ZI2T>-snLKQh84st),+mVT3#3&$)$_2Ft8E-N,%4C!,q&u:`-f75/U+@7+"eu#-NXG>XI5"aH-[f/`.3<jUA%PH,,@7JVc5o375"#t%K/MaB%\[e"2^:u(<K,(Y2,i>UTT+p"3es;)$%YKlS]*G0Rf!h@i%d%kO,L&c$.b$-T.B`s6fqXR4O51s*:bs@n938G$mfQFY3BT_;4c%do1g!r#%\u^CuD,9Q8S&?6<?'lG9#[u_2%i%(qDYO@P"X;abBS8po["--m#UbA>KP50L##6T0?V_!nSnU'hRs2@3-A1;p[LQEI1@Y!hL&)GqmO][OsjVQW=(G>t:iG`1^LQ4J&%)o0<Yf2`f["i/WTNUt'tJ6RbT"`=U;#l+&-Kd%SHd0WBDrbM]7e5:'sUNq+YVW1_B&q"aWoq3k+8$;_>_%tDQrU90(,I$BT"86;g%[hM90kAqGX#bkiWNXhU'W/t/13q.e6B80oun#8/;qOe@Q^+k;8r,32%E(G+V]IgKH6(`\(%[2+`VpHR1C!oY/n.2%KI/m\7IE8I'%:uN6.PggcA2*2^N!na&V?\9fA<hk4?2b5$ie=p@NQ6pob4t/<_dtIFPp[A7j"6#C@k+G1U&D@t[f59r^8hV"8h"QL\RLQ>/!?A`n%(fLo+erG]Hob:M?g&rn+;V/.T9qX0,NGuh<.8]?aLCFU<-;]D]%j7,A*n9_Y2ISl!-6D^q6^:_i!nGP^L2NUp!7/nN@ffW%0Lulb%'SrZ>Y,s8%]_e'kTqKB=e^7WU:Tm0Yd,1iuCh.;p<-3V>N)7@O^A23Dk6EeWpY-[Ib]Ts"#,j^oO=1eR[>$*=.LQ7?Kf"Jb:mker%)KoDC6:$s-oLr75W7jG[=<8R6dbRc5$BRp1SiJnJ'P=*sfAuP?X\_i4@@FAL'`,=VKu0EG;()iLL#R>B9VH\Z&;]/R'PmE;K-o=V%&!F<i^>MNf-_h3"m4]kGYXBT9(@R+-4=l['/te#\![7r'2MCasdZ\]c**R*?"Mc/(VE'f&h8UDnYp9[nH/oTUSHA,i3"">\$A2<U%GUQ!jg^4(TZcfIL(sr)Jo&Z'%6c*-D3CjWPM"0k]?<hp':43Q)a$.ukR8m'GO^R_9:![ct[Iu4"#=#S5pjJ)*`abX\KD^loDM#fE%6k=S<P#aNp/j=s2R0a(r,Q#"1nbaHI&'6;RdYQ=]l\==+Kd+,36=nU^[@d<RY]L&A^N-"ZK5U7[:mFrd03J\N0@r00gCB8)8[\L<%e1']'GuqM]+1d;kb-<,W.rYP:HUF0-j'%OG>enO\fGi0h)mpkE"BPIOX-[KEo[uVp(ojaeNk&J=>2_h+dV;Y;.nuMmifjX-`,q`&%;dd*57T("I5RjFq6aNZRO#a_;&5&9ea98)R"I8Hn$@'VCBi],WJ4WY%&62?A1"tgu@#VH/nMFcfH%<D%Weh4[gLc%V=mhcC/l6+P%JVaAB)7,GE)mTbgn680)i;A09@*mh&DPNV9-Vin%Df`_L:+V$@?ZsS&@)iFR0=9rcT0kVb_kj(-C84'^[mFG!\6s<i$[]H4X3(qV%-P?G/;L"4>3hDX]M&lhX[9$97Ntd#MNTT25'tBt-^`%`\`KZd!d)3";<"?Y'q4TQk!'"*?ir'C?b'NAn*<#I(ejDkI$\pCn/C&dN%lOY!<#MbR;jtFbWo7m]$VO_'nC>e0M8#6L79BD618F;_Y6j;/"`7hsmBM;[AmP-#F,FkC;_r.YMah7^[E"lsW1e;Q&M%kQiq:ufo%>]bqL:Cna0+(iu#ep+X2duA2a(kp$:G*#Y5=MtOi5-@*)`peRGX?_?OYBC)RU*2759%1>2PQ?aoM"j9$H`\JU)jU]a8NKTYp!eN&%rTYGuDk$`Tfl5r1$RV<Y>[Pgj$l_?Jn^p&E%Arn/hVp2!TPm@%SFVjNTKq>X!"E]0]HMfopN>0\)qVHa@rD[`*hCWuT>phMfWl4G%;tj1r:N7aC_SDC*!<fbso2EGAVAh"tjUcsd]_QNZ4l9Y[hM=:&D&0<6/>ajDq04)D(IBduhWb:>H<s=D`&7>p3ZE`mhj^r<Re6>P%qk=P1P@fH_.RpM;de'"Z8#Qlk5dit)iRgP2K-1F<-Ojg2+RNaso)ldE&;@P%dcENiIF4^2f3j6hi37Pi"_h=7^/6+C!OG*NUh7^-%17FbJ5'37CK,N)Z$'![rHb*sH-t$YC6JDo7'KU[,[u!E6'i-MNG!Sbs;^"HOOBsp.baBV[C)3a:dA19@#DtpbDDMEH5h-lt5#g%)%(,J<]jeOeIL?p9_bn,:+[i(ojR3DADEUIntEeKD^*?'&GIoO@ccl:YABRa/L0q\c'V<Mhb2/"8<h]/[ilL3[)S>mWk]cERLN?Z=I%lSP'1W?'3XE?^gMd#+1tNK0A3j3Yo.I8G=lS[1u'Hr=X5FF8/Vi8c`9,,LL3/_E;O<qs+-!A*1E'lVPD]E3lA;aP[;^u6BcMG\'5%kF7*Gc7`8Q119<IIGY-\oHmDar-\,<6FWoL?""]QP&&,+_F/A13uq&WMVcJYhmq?!YRRkLY^:-MHr1+>p3%90Tg9bu.QdOhdmigk%kVD$(l!f84hoK%jV-F0&>XL>Im`'_I8I?/%daOmO;',#Rf!&SU$A?mlE+dRndV&tX$G[FR>1l`5HJp)>3]'dVX=ef(-D.nf4'*T3%F&BmqVOZANGh[n+Z5="3G8,CRTeOWYNdE1Qpd]qglSZaPNr"F'hU:7`&6D[Z7,lB;7F]"G<<;&,ji1#"I?Ef(Ds'-V]^h;FIiT)G%$TCJ]q@KO4*UKa(8/W*'?oLWR"6#T$T$!!h4FU2l'cjE$JAYt-kn5dr?!M%\T-1dC!$8k#`#PL5Vd353":d5[pYeqbiOa!N9@`,O%/+HSXdf;F)n,R)-)Bqg@)+1!R!gP%b/PniR!TrrJ$"2\L-Uj!dnq-Xbh&Sa4;u-n@a\]Gqh8a/+T9X@#'[f'.Xlb^AU(`8u7(7Yd%Af5-#>i4HZ#$q@8(kiX&Y_L.>O27s#nGBqih[;]i3N;ho*f<JA@:;PKV#`!V(?O?aTCDQOK&e>iTYDnF3MqN3g':6GL6_Ye#Fe\o%JuTEZ<MtSF(*C/nP\*#T71D$qWF=<-Q:t^e_Z3Pun:mkd2$0%=5h.Q@6k,oo]!GUo*mGW?hUF51p-nptV*VImWHK%nJ?!#bD)JD"%P#Ac3/4^]*BMK(*K/3l$;49Z*XbRdeHC.!mLZ-BP1"EC9!MC&6VM>2H4l4Xa^;\[@k`T#NL(uaLk%FtIW)2B6dejP&r.^XYL-gmO%FA@[5?ds11CLO_*ZkCj)oRYb#Qp$"pKc-Oef^XbW/I[@,#/?#I%+`<p$D6W-$6PB5KoXpULJ=u<%`#Y-,XJ-D6$hHU%l/R=#8d$m%865gGW,\'%d7>MG`T9Qo\,i-b3>f,sG>D!sIej<o@cckR.7GuFn<?*L6EjO!^s2$^(pq0hd$b2H!'Ti,:EZ[#`t/M[;PZSo/8*ZN%^3BkKVc9AgPTn<t4LTUa)rO!r5AN*8X*`;oMB)f72G4A^`38S!k&?^r5rVbfOb11='8V:*H<(!05*B?Q1oRK?3Sb,/`r8[>*8.HO%LjtHN'0`nF!(./HIKPt,B]2FuM.H*_i["mA.Nb],3nA[PY<Za=M\UC+],IJ?<Z?9Mk'&E@bk"HK&,*UJKNW3-lh\h`JKoWqK!QHE%CrGdWO?-MPAOY,J&S->lK>d59b*J9KViOoUb+1`7\Y(Rslhmnf5HE2uGI?>nG?)_SXC0M>YP&!-ITM0Smu"u`m4qlZ,rY#"k+8K!%ToEXdick'GpUd04iBu@n-3+a;S@Hf1:R1Msgl@U&e2h-H<O2Z*EV>Qk!@Y2D!"@46H@mIV^]6t1+?>6p[Tig$MaVD[E!sok%_o89%;8'tPoJ_pa$6MA\7H;BR4!UD?mWGBE!<ol0-uVgX!XoVBdK!L16C\d`^NWjHTgBK1#YJP+VD=sQ"-2%A-.Z/0)g$G*G"'O_5iK7S%-)Qoj!t:@ZJ3pqYVGfD:Al!p=K1juP#>oW`<h!\,(ngEr$LJf6.Xjt*@Jg#UGJUs[Qjk(hDORif)+bN=^e)\loNtaKY2st-=kb#-%6@3`@H%'fG69%R'bO3/o5)J9*NA?aj%(#<;+.e3R@6D?gq/MLdKgH<JWbM+9k!UNm4h-Y)%q/#g3f#@VAr%m>&>`+OZNS(:aq]Sg%VK#`F(epsgA\d5KI14iVbF,0a6B7^UiBfA9L7$qY.lFAKL#?-4O>AnDn2\FiKpl?;J`5Xu[_3-<jilg$=hPBifc[\m;43PiU(%-r%8@!(m)k`M'6?K_(jU2O7;$9$_gKIH>KQ#e,c"D!33S7=)K$h-Mc"nfJM,$g=YsM%MF"6[E*k",5Ai-k4lpItGX6YbZbEp$$1.5`\%XptrK@@(ed+(O"nC_?R/YAE7<fAY[("m+j%BIL/k+h5=2_g3*:7M&!($pHKi`Vi9r9QKG9e2W)c+LgEKc1\-Ga;7.;a&(9GA!Jq]%%W1,qU.V(;<<:%#s*/``VaB&>Pqp4teOBPq@mjcl",<O:AJ+_3=)(Fa@8JA+rMDp_""%XaIW8l9g$m6P36.`pM?`Qf"jsi]DF^JG%Z4]\84u<8t1r+um8YjK4,llb^>U\[T"oqg_9`0gt71*gZk]tE7.JfOl;W!:;;R*b*'JF5X_[WBX!s513*uf'VS9agTDD/Xh:em,M%#UZogcC;/%!)QDsSlg7l#5??7/i`'2/'6(-8>5&iS;.feYU(Bu]PDG7&64K("ts=0H4jYl?lq;"ZYIaONM.e%%%P%apG3/-a&Nss%!'gP1NkG3X1\j]G46IU]m,*uU`\nVc*'AhZE_ZpkL0NjBC/M;<%!pU]Bf$#FEPhg:$dF-?K3hT7^DV^,'5*[RBF#n1iU:O^ce(G>%`SDgBYTjt<frr\."%i`,Q09Lt#N[?P>8'ui)Scia,[L<um2Qe5-H<PfnIl'5J)];Vkj`gAGd#1$*pgNu!3-V!*"#]+OJWg'Vokr+%5XgM!eWnMLb(ZV\5W##%;N_JP+ZCdYi6:tmNNGeYd`)$0fH@:sk4aAukuYXqlh7gfme;5*rU9aYLHke7f:RNbX8i-BJ,dE9qW%&D%iS+lmr:Ka`oXk/#LX3a4rU3U'o8!?]rT3Y.s7(koqU6Pcpqu9EqQGDD(EdM7-NDW"rnY?hmAKshomUf&~>%AI9_PrivateDataEnd